<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding-Zuo</title>
  
  <subtitle>Coding And Studying</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-08T02:35:01.523Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Coding-Zuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分查找典型问题(二、三)</title>
    <link href="http://example.com/2021/11/08/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98-%E4%BA%8C%E3%80%81%E4%B8%89/"/>
    <id>http://example.com/2021/11/08/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98-%E4%BA%8C%E3%80%81%E4%B8%89/</id>
    <published>2021-11-08T02:13:14.000Z</published>
    <updated>2021-11-08T02:35:01.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找典型问题-二、三"><a href="#二分查找典型问题-二、三" class="headerlink" title="二分查找典型问题(二、三)"></a>二分查找典型问题(二、三)</h1><p><a href="https://leetcode-cn.com/leetbook/read/learning-algorithms-with-leetcode/x4e1p5/">https://leetcode-cn.com/leetbook/read/learning-algorithms-with-leetcode/x4e1p5/</a></p><h2 id="二、二分答案"><a href="#二、二分答案" class="headerlink" title="二、二分答案"></a>二、二分答案</h2><p>二分答案意思是：题目要我们找的是一个整数，并且这个整数我们知道它可能的最小值和最大值。此时可以考虑用二分查找算法找到这个的目标值</p><h3 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a><a href="https://leetcode-cn.com/problems/sqrtx/">69. Sqrt(x)</a></h3><p>分析：这个题要求计算一个非负整数的平方根，返回值是一个整数。当平方根是浮点数事，需向下取整</p><h4 id="法一：暴力解法"><a href="#法一：暴力解法" class="headerlink" title="法一：暴力解法"></a>法一：暴力解法</h4><p>输入 8 返回的是 2 ， 因为 3 的平方等于 9 大于 8，因此【结果只保留整数的部分，小数部分将被舍去】。要求我们从1开始找，找到最后一个平方以后小于等于 x 的那个数。</p><p>假设 s 表示从 1 开始的那个数：</p><ul><li>如果 s 平方以后小于 x， 暂时放过</li><li>如果 s 平方以后等于 x ，直接返回</li><li>如果 s 平方以后大于 x，说明 s-1 是题目要求，返回 s-1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 特判</span></span><br><span class="line">       <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; ++i) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == x / i) &#123;</span><br><span class="line">               <span class="keyword">return</span> i;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; x / i) &#123;</span><br><span class="line">               <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数出错&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意：如果判别条件写成 <code>s * s == x</code> ，会发生整型溢出，应该写成 <code>s = x / s</code> ，判别条件 <code>s * s &gt; x</code> 也是类似这样写。</p><p>复杂度分析：</p><p>时间复杂度：O(x)，最坏情况下暴力解法会一直尝试到 x/2，O(x/2)=O(x)；<br>空间复杂度：O(1)，只使用到常数个变量。</p><h4 id="法二，二分查找"><a href="#法二，二分查找" class="headerlink" title="法二，二分查找"></a>法二，二分查找</h4><p>如果一个数的平方大于 <code>x</code> ，这个数就一定不是我们要找的平方根。于是，可以通过逼近的方式找到平方根。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> right = x / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">           <span class="comment">// 写完分支以后调整为向上取整</span></span><br><span class="line">           <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;     </span><br><span class="line">           <span class="keyword">if</span> (mid &gt; x / mid) &#123;</span><br><span class="line">               <span class="comment">// mid 以及大于 mid 的数一定不是解，下一轮搜索的区间为 [left, mid - 1]</span></span><br><span class="line">               right = mid - <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               left = mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> left;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分查找典型问题-二、三&quot;&gt;&lt;a href=&quot;#二分查找典型问题-二、三&quot; class=&quot;headerlink&quot; title=&quot;二分查找典型问题(二、三)&quot;&gt;&lt;/a&gt;二分查找典型问题(二、三)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Parameter-Efficient Transfer Learning with Diff Pruning</title>
    <link href="http://example.com/2021/11/05/Parameter-Efficient-Transfer-Learning-with-Diff-Pruning/"/>
    <id>http://example.com/2021/11/05/Parameter-Efficient-Transfer-Learning-with-Diff-Pruning/</id>
    <published>2021-11-05T06:23:11.000Z</published>
    <updated>2021-11-07T15:27:34.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parameter-Efficient-Transfer-Learning-with-Diff-Pruning"><a href="#Parameter-Efficient-Transfer-Learning-with-Diff-Pruning" class="headerlink" title="Parameter-Efficient Transfer Learning with Diff Pruning"></a>Parameter-Efficient Transfer Learning with Diff Pruning</h1><p>Diff pruning 使参数有效的迁移学习在新任务中得到良好的扩展。</p><p>该方法学习了一个特定于任务的 “diff “向量，该向量对原始预训练的参数进行了调整。在训练过程中，这个 diff 向量通过对L0-norm惩罚的可微调近似来适应性地修剪，以鼓励稀疏性。</p><p>随着任务数量的增加，diff pruning仍然具有参数有效，因为它只需要为每个任务存储一个小的diff向量。由于它不需要在训练期间访问所有任务，因此它在任务以流形式设置中很有吸引力。</p><p>在GLUE基准测试中，diff pruning可以与微调基线的性能相媲美，而每个任务只需修改0.5%的预训练模型参数，与流行的修剪方法相比，其扩展性更强。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>针对特定任务对预训练的深度网络进行微调是当代NLP的主流模式，在一系列自然语言理解任务中取得了最先进的结果。</p><p>虽然这种方法简单明了，在经验上也很有效，但很难扩展到多任务、内存受限的情况下（例如设备上的应用），因为它需要为每个任务运送和存储一整套模型参数。</p><p>由于这些模型是通过自监督的预训练来学习可推广的、与任务无关的语言表征，因此为每个任务微调整个模型似乎特别浪费。</p><p>提高参数有效的一种流行方法：</p><ul><li>《Compressing BERT: Studying the Effects of Weight Pruning on Transfer Learning》</li><li>《Poor Man’s BERT: Smaller and Faster Transformer Models》</li><li>《Masking as an Efficient Alternative to Finetuning for Pretrained Language Models》</li><li>《Adaptive Sparsity by Fine-Tuning》</li></ul><p>是为每个任务学习较小的压缩模型。这种方法面临着严重的稀疏性/性能权衡，并在每个任务中保留大量非零参数（例如10%-30%）。多任务学习和基于特征的迁移允许每个任务进行更有效的参数迁移学习。</p><p>多任务学习和 feature-based 的迁移允许每个任务的参数效率更高的迁移学习：</p><ul><li>《Multi-Task Deep Neural Networks for Natural Language Understanding》</li><li>《BAM! Born-Again Multi-Task Networks for Natural Language Understanding》</li><li>《BERT and PALs: Projected attention layers for efficient adaptation in multi-task learning》</li><li>《Sentence- BERT: Sentence Embeddings using Siamese BERT-Networks》</li></ul><p>这些方法在共享模型的基础上训练少量附加参数（例如线性层）。然而，多任务学习通常需要在训练期间访问所有任务，以防止灾难性遗忘，而 feature-based 的迁移学习（例如，基于任务不可知的句子表示）通常通过微调表现得更好</p><p>一个有吸引力的中间地带是为特定任务 finetune 基础模型的扩展。这种方法在保持基于特征的转移的任务模块化的同时，还能抓住 finetune 的训练优势。</p><p>例如，Adapters 使用较小的特定任务模块，在模型的层之间插入这种方法不需要在训练期间访问所有的任务，针对现实环境，随着新的任务流到达（</p><p>《Parameter-efficient transfer learning for nlp》</p><p>《Adapter- Fusion: Non-Destructive Task Composition for Transfer Learning》</p><p>）发现，适配器层可以在GLUE基准上匹配完全微调的BERT的性能，而每个任务需要3.6%的额外参数（平均）。</p><p>Diff pruning 是对预训练模型的一个新的扩展，目的是为了更参数有效的迁移学习。Diff pruning 不是修改模型的结构，而是通过一个特定任务的 diff 向量扩展基础模型。</p><p>为了学习这个向量，我们将特定任务的模型参数重新参数化为 $θ<em>{task} = θ</em>{pretrained} + δ<em>{task}$，其中预训练的参数向量 $θ</em>{pretrained}$是固定的，特定任务的 diff 向量 $δ_{task}$ 是微调的。差异向量用L0-norm惩罚的可微调近似值进行重构，以鼓励稀疏性。</p><p>Diff pruning 可以变得非常有效的参数，因为它只需要为每个任务存储 diff 向量的非零位置和权重。存储共享预训练模型的成本保持不变，并在多个任务中分摊。在GLUE基准上，Diff pruning 可以匹配完全微调的BERT基线的性能，而每个任务只微调0.5%的预训练参数。随着任务数量的增加，diff pruning在所需的存储量方面优于流行的基于剪枝的方法。</p><h2 id="Background-Transfer-Learning"><a href="#Background-Transfer-Learning" class="headerlink" title="Background: Transfer Learning"></a>Background: Transfer Learning</h2><p>NLP中的迁移学习大多使用 pretrain finetune 范式，它从预训练的模型中为所有任务初始化一个模型参数子集，然后根据特定的任务目标进行调整。预训练目标包括上下文预测、自动编码、机器翻译，以及最近的语言建模的变种目标。</p><p>这里我们考虑将转移学习应用于多个任务。 我们考虑的是具有潜在的未知任务集（可能以流的形式到达）的设置，其中每个任务 $τ∈T$ 有一个相关的训练集 $D<em>{\tau} = {x</em>{\tau}^{(n)}, y<em>{\tau}^{(n)}}</em>{n=1}^{N}$。对于所有任务，目标是产生（可能是捆绑的）模型参数 $θ_τ$，使经验风险最小化，</p><script type="math/tex; mode=display">min_{\theta_{\tau}} \frac{1}{N} \sum_{n=1}^N C(f_{\tau}(x_{\tau}^{(n)}; \theta_{\tau}), y_{\tau}^{(n)}) + \lambda R(\theta_{\tau})</script><p>其中，$f<em>τ(\cdot;θ</em>τ)$ 是一个关于输入的参数化函数（例如神经网络），$C(\cdot,\cdot)$是一个损失函数（例如交叉熵）1，R（-）是一个具有超参数 $λ$ 的操作性正则器。</p><p>我们可以通过简单地学习每个任务的独立参数来使用 pretrain finetune 方法。然而，预训练模型的巨大规模使得这种方法的参数非常不方便。例如，广泛采用的模型，如BERT-BASE 和 BERT-LARGE，分别有1.1亿和3.4亿个参数，而他们同代的模型有数十亿的参数数。 解决这种参数效率低下的经典方法是通过联合训练，针对多个任务训练一个共享模型（连同特定任务的输出层）。然而，多任务学习的通常表述要求事先知道任务集 $T$，以防止灾难性的遗忘，这使得它不适合于任务集未知或任务流到来的应用。</p><h2 id="Diff-Pruning"><a href="#Diff-Pruning" class="headerlink" title="Diff Pruning"></a>Diff Pruning</h2><p>Diff pruning 将特定任务的微调表述为学习一个 diff 向量 $δ_τ$，该向量被添加到预先训练的模型参数 $θ$ 中，该参数保持固定。我们首先对特定任务的模型参数进行重新参数化，</p><script type="math/tex; mode=display">\theta_{\tau} = \theta + \delta_{\tau}</script><p>这导致了下面的经验风险最小化问题，</p><script type="math/tex; mode=display">min_{\delta_{\tau}} L(D_{\tau}, f_{\tau} , \theta+\delta_{\tau}) + \lambda R(\theta+\delta_{\tau})</script><p>为了简洁起见，我们将 $L(D<em>τ, f</em>τ, θ_τ)$ 定义为:</p><script type="math/tex; mode=display">L(D_{\tau} , f_{\tau},\theta_{\tau}) = \frac{1}{N} \sum_{n=1}^N C(f_{\tau}(x_{\tau}^{(n)};\theta_{\tau}), y_{\tau}^{(n)})</script><p>这种微不足道的重新参数化表明，存储预训练参数 $θ$ 的成本在不同的任务中被分摊，而新任务的唯一边际成本是 diff向量。如果我们能将 $δ$ 正则化，使其稀疏，从而使  $||\delta_{\tau}||_0 &lt;&lt; ||\theta||_0$，那么随着任务数量的增加，这种方法可以变得更具有参数效率。我们可以用差值向量的L0-norm惩罚来指定这一目标,</p><script type="math/tex; mode=display">R(\theta + \delta_{\tau}) = ||\delta_{\tau}||_0 = \sum_{i=1}^d 1 \ \ \{\delta_{\tau,i} \neq 0\}</script><h3 id="Differentiable-approximation-to-the-L0-norm"><a href="#Differentiable-approximation-to-the-L0-norm" class="headerlink" title="Differentiable approximation to the L0-norm"></a>Differentiable approximation to the L0-norm</h3><p>这个正则器很难优化，因为它是不可微分的。为了近似这个L0目标，我们采用了一种基于梯度的学习方法，即使用一个宽松的掩码向量进行L0稀疏度学习《Learning Sparse Neural Networks through L0 Regularization》</p><p>这种方法包括将 binary vector 放宽到连续空间，然后与密集的权重向量相乘，以确定在训练中应用多少权重向量。训练结束后，掩码被制成确定性的，并且很大一部分 diff 向量为零。</p><p>为了应用这种方法，我们首先将 $δ_τ$ 分解成一个二进制掩码向量，再乘以一个密集向量。</p><script type="math/tex; mode=display">\delta_{\tau} = z_{\tau} \odot w_{\tau} , \ \ \ z_{\tau} \in \{0,1\}, \ w_{\tau}\in R^d</script><p>我们现在对真实目标进行下限，并对关于 $z<em>τ$ 的期望进行优化，其分布 $p(z</em>τ; α<em>τ)$ 初始是伯努利，并引入参数 $α</em>τ$。</p><script type="math/tex; mode=display">min_{\alpha_{\tau}, w_{\tau}} E_{z_{\tau} \sim p(z_{\tau};\alpha_{\tau})} [L(D_{\tau}, f_{\tau},\theta + \delta_{\tau}) + \lambda||\delta_{\tau}||_0]</script><p>这个目标仍然因为 $z_τ$ 的离散性而变得复杂，但是这个期望为经验上有效松弛提供了一些指导。</p><p>遵循先前的工作《Learning Sparse Neural Networks through L0 Regularization》，将 $z<em>τ$ 放宽到连续空间 $[0, 1]^d$，并采用拉伸的  Hard-Concrete 分布，这样就可以使用路径梯度估计器。具体来说，$z</em>τ$ 现在被定义为来自均匀分布的样本 $u$ 的一个确定性和（次）可微函数。</p><script type="math/tex; mode=display">    \begin{equation}\begin{split}  u &\sim U(0, 1)\\ s_{\tau} &= \sigma(logu - log(1-u) + \alpha_{\tau}) \\ \hat s_{\tau} &= s_{\tau} \times (r - l ) + l \\ z_{\tau} &= min (1,max(0, \hat s_{\tau}))    \end{split}\end{equation}</script><p>这里 $l<0, r>1$是两个常数，用来将 $s_τ$ 拉伸到区间 $(l,r)^d$，然后用 $min(1, max(0, \cdot))$ 操作将它夹在 $[0, 1]^d$中。在这种情况下，我们有一个预期L0-norm的可微闭式表达。</p><script type="math/tex; mode=display">E[||\delta_{\tau}||_0] = \sum_{i=1}^d \sigma(\alpha_{\tau,i} - log\frac{-l}{r})</script><p>因此，最终的优化问题由以下方式给出，</p><script type="math/tex; mode=display">min_{\alpha_{\tau}, w_{\tau}} E_{u\sim U[0,1]} [L(D_{\tau}, f_{\tau}, \theta + z_{\tau} \odot w_{\tau})] + \lambda \sum_{i=1}^d \sigma(\alpha_{\tau} - log\frac{-l}{r})</script><p>为了减少符号的混乱，我们把没有经过预训练的特定任务输出层的参数归入θ。我们现在可以利用路径梯度估计器来优化关于 $α<em>τ$ 的第一项，因为期望不再依赖于它。 训练后，我们通过对 $u$ 采样一次以获得 $z</em>τ$（即 不一定是二进制向量，但由于钳位函数的原因，其维数非常多，恰好为零），然后设置 $δ<em>τ = z</em>τ \odot w_τ $</p><h3 id="L0-ball-projection-with-magnitude-pruning-for-sparsity-control"><a href="#L0-ball-projection-with-magnitude-pruning-for-sparsity-control" class="headerlink" title="L0-ball projection with magnitude pruning for sparsity control"></a>L0-ball projection with magnitude pruning for sparsity control</h3><p>微分 L0 正则化使我们能够实现高稀疏率。然而，最理想的是设置一个精确的稀疏率，特别是考虑到需要参数预算的应用。由于正则化系数 $λ$ 是某个 $η$ 的约束条件 $E[||δ_τ||_0]&lt; η$ 的拉格朗日乘数，原则上可以通过搜索不同的 $λ$ 值来实现。 然而，我们发现通过训练后投影到目标 L0-ball 上实现精确的稀疏率更有效率，而且经验上也更有效。</p><p>《Structured Pruning of Large Language Models》</p><p>具体来说，我们对 diff 向量 $δ<em>τ$ 使用 magnitude pruning 幅度修剪，通过在 $δ</em>τ$ 中只保留前  $t \%\times d$ 的值来达到稀疏率 $t\%$。注意，与标准的 magnitude pruning 不同，这是基于diff向量值的幅度而不是模型参数。我们发现，在固定非零掩码的情况下进一步微调 $δ_τ$ 以保持良好的性能是很重要的，这也是 magnitude pruning 中经常出现的情况。由于这种通过投射到L0-ball 上的参数效率可以在没有自适应 diff puning的情况下应用，这样的方法将作为我们在实证研究中的基线之一。</p><h3 id="Structured-Diff-Pruning"><a href="#Structured-Diff-Pruning" class="headerlink" title="Structured Diff Pruning"></a>Structured Diff Pruning</h3><p>为了使diff pruning能够适应模型结构，我们考虑了一个结构化的扩展，其中包括维度之间的依赖性。假设，这种方法可以让模型学会在局部区域修改参数，而不是独立处理每个参数。修改正则器，首先将参数索引分为G组 $ {g(1),…,g(G)}$，其中 $g(j)$ 是由组 $g(j)$ 支配的参数指数的子集。</p><p>然后，为每个组 $g(j)$ 引入一个标量 $z^j<em>τ$（及相关参数 $α^j</em>τ$），并将索引 $i\in g(j)$的特定任务参数分解为 $δ<em>j = z</em>{τ,i} - z^j<em>τ - w</em>{τ,i}$</p><p>然后，期望的L0范数由下式给出:</p><script type="math/tex; mode=display">    \begin{equation}\begin{split}      E[||\delta_{\tau}||_0] &= \sum_{j=1}^G \sum_{i\in g(j)} E[1\ \{z_{\tau,i}\ \cdot z_{\tau}^g > 0\}] \\     &= \sum_{j=1}^G \sum_{i\in g(j)} \sigma(\alpha_{\tau,i} - log\frac{-l}{r}) \cdot \sigma(\alpha_{\tau}^j - log\frac{-l}{r})    \end{split}\end{equation}</script><p>我们可以像以前一样用基于梯度的优化训练。一个组中的参数被正则器所鼓励，共同被移除。</p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Model-and-datasets"><a href="#Model-and-datasets" class="headerlink" title="Model and datasets"></a>Model and datasets</h3><p>为了评估，使用GLUE基准以及SQuAD抽取式问题回答数据集。按照Adapters，在GLUE任务的以下子集上测试。</p><ul><li>多类型自然语言推理（MNLI），目标是预测两个句子之间的关系是包含关系、矛盾关系还是中性关系（我们在 $MNLI<em>m$ 和 $MNLI</em>{mm}$上进行测试，分别对匹配/不匹配的领域进行测试）；</li><li>Quora问题对（QQP），一个分类任务，预测两个问题是否语义等同；</li><li>问题自然语言推理（QNLI），必须预测一个句子是否是问题的正确答案。</li><li>Stanford Sentiment Treebank (SST-2)，一个预测电影评论情绪的句子分类任务；</li><li>Corpus of Linguistic Acceptability (CoLA)，其目标是预测一个句子在语言上是否可以接受。</li><li>语义文本相似性基准（STS-B），必须预测两个句子之间的相似性等级；</li><li>微软研究院转述语料库（MRPC），目标是预测两个句子是否在语义上等同；</li><li>识别文本关联（RTE），必须预测第二个句子是否被第一个句子所包含。</li></ul><p>该基准对CoLA使用Matthew’s correlation，对STS-B使用Spearman，对MRPC/QQP使用F1 score，对MNLI/QNLI/SST- 2/RTE使用accuracy。</p><h3 id="Baselines"><a href="#Baselines" class="headerlink" title="Baselines"></a>Baselines</h3><p>将结构化和非结构化的 diff pruning 变体与以下基线进行比较：</p><ul><li>Full finetuning：像往常一样对BERT-LARGE进行完全微调</li><li>Last layer finetuning：仅微调倒数第二层(连同最终输出层)</li><li>Adapters：该研究在预训练模型的每一层之间训练特定任务的瓶颈层，通过改变瓶颈层的大小，可以对参数效率进行控制。</li><li>Non-adaptive diff pruning：在magnitude pruning的基础上进行diff pruning（即，通过通常的微调获得$\theta<em>{\tau}$，设置 $\delta</em>{\tau} = \theta<em>{\tau} - \theta$，然后应用magnitude pruning，再对 $\delta</em>{\tau}$ 进行额外的微调）。对于diff pruning，我们将目标稀疏率设置为0.5%</li></ul><p><img src="https://i.loli.net/2021/11/07/pa6jXZ2JvkinyCO.png" alt=""></p><h3 id="Structured-vs-Non-structured-Diff-Pruning"><a href="#Structured-vs-Non-structured-Diff-Pruning" class="headerlink" title="Structured vs. Non-structured Diff Pruning"></a>Structured vs. Non-structured Diff Pruning</h3><p><img src="https://i.loli.net/2021/11/07/rGCJ4qX1cn9d2R8.png" alt=""></p><p>结构化Diff Pruning 为每个组引入了一个额外的掩码，这鼓励了对整个组进行 pruning。这比传统的组稀疏技术的限制性要小，这些技术被用于L0-norm松弛，迫使一个组中的所有参数共享同一个掩码。然而，我们仍然期望整个组更经常地被pruning 掉，这可能会使学习过程偏向于完全消除或将非零 diff 聚在一起。在表3中，我们确实发现，结构化的差异修剪导致的微调模型更有可能使整个组与它们的预训练值（零差异）没有变化。</p><h3 id="Task-specific-Sparsity"><a href="#Task-specific-Sparsity" class="headerlink" title="Task-specific Sparsity"></a>Task-specific Sparsity</h3><p><img src="https://i.loli.net/2021/11/07/bP5n9iavNcFOJqB.png" alt=""></p><p>预训练模型的不同层被认为是对不同信息的编码。鉴于每个任务可能会招募不同种类的语言现象嵌入到隐藏层中，我们假设 diff pruning 将通过特定任务的微调来修改预训练模型的不同部分。图2显示了每个任务中不同层的非零 diff 参数的百分比。我们发现，不同的任务确实修改了网络的不同部分，尽管有些任务之间存在一些质量上的相似性，例如QNLI和QQP（都必须对问题进行编码），以及MRPC和STS-B（都必须预测句子间的相似性）。嵌入层对所有任务的修改都很稀疏。虽然稀疏性分布的一些变化是由于简单的随机性造成的，但我们确实观察到在同一任务的多次运行中存在一定程度的一致性。</p><h3 id="Effect-of-L0-ball-projection"><a href="#Effect-of-L0-ball-projection" class="headerlink" title="Effect of L0-ball projection"></a>Effect of L0-ball projection</h3><p><img src="https://i.loli.net/2021/11/07/8MiDzmJnkHr1TGp.png" alt=""></p><p>应用 magnitude pruning 幅度修剪来投影到L0-ball上是实现精确稀疏目标的关键。如表4所示，我们观察到通过此方法在性能上几乎没有损失。我们重申，使用固定掩码进行微调至关重要，即使对于不应用幅度修剪的方法也是如此。</p><p><img src="https://i.loli.net/2021/11/07/YsyAIgbN5el4njO.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Parameter-Efficient-Transfer-Learning-with-Diff-Pruning&quot;&gt;&lt;a href=&quot;#Parameter-Efficient-Transfer-Learning-with-Diff-Pruning&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>谣言、虚假信息综述</title>
    <link href="http://example.com/2021/11/03/A-Survey-on-Natural-Language-Processing-for-Fake-News-Detection/"/>
    <id>http://example.com/2021/11/03/A-Survey-on-Natural-Language-Processing-for-Fake-News-Detection/</id>
    <published>2021-11-03T09:48:08.000Z</published>
    <updated>2021-11-04T08:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谣言、虚假信息综述"><a href="#谣言、虚假信息综述" class="headerlink" title="谣言、虚假信息综述"></a>谣言、虚假信息综述</h1><hr><h1 id="A-Survey-on-Natural-Language-Processing-for-Fake-News-Detection"><a href="#A-Survey-on-Natural-Language-Processing-for-Fake-News-Detection" class="headerlink" title="A Survey on Natural Language Processing for Fake News Detection"></a>A Survey on Natural Language Processing for Fake News Detection</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>虚假新闻检测是自然语言处理（NLP）中的一个关键但具有挑战性的问题。<strong>社交网络平台的迅速崛起不仅带来了信息可及性的大幅提高，而且也加速了假新闻的传播。因此，假新闻的影响越来越大，有时甚至延伸到线下世界，威胁到公共安全。鉴于海量的网络内容，自动检测假新闻是一个实用的NLP问题，对所有在线内容提供商都有用，以减少人类检测和防止假新闻传播的时间和精力。</strong>在本文中，我们描述了假新闻检测所涉及的挑战，也描述了相关任务。我们系统地回顾和比较了为该任务开发的任务描述、数据集和NLP解决方案，还讨论了它们的潜力和局限性。基于我们的见解，我们概述了有希望的研究方向，包括更精细、详细、公平和实用的检测模型。我们还强调了假新闻检测和其他相关任务之间的区别，以及NLP解决方案对假新闻检测的重要性。</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h2><p>自动假新闻检测是评估新闻中 claims（声明，主张） 的真实性的任务。这是一个新的但关键的NLP问题，因为传统的新闻媒体和社交媒体对社会中的每个人都有巨大的社会政治影响。例如，对假新闻的曝光会导致对某些政治候选人的无效、疏远和嘲讽（Balmas，2014）。假新闻甚至与威胁公共安全的真实世界的暴力事件有关（例如，比萨门（Kang和Goldman，2016））。检测假新闻是NLP可以帮助的一个重要的应用，因为它也对技术如何在教育公众的同时促进验证 claims 的真实性产生了更广泛的影响。</p><p><strong>这项任务的传统解决方案是请专业人员，如记者，根据以前说过的或写过的事实，对照证据来检查 claims。然而，这样做既费时又费力。</strong>例如，PolitiFact 需要三位编辑来判断一条新闻的真伪。随着互联网社区和信息传播速度的快速增长，互联网内容的自动假新闻检测已经引起了人工智能研究界的兴趣。<strong>自动假新闻检测的目标是减少人类检测假新闻的时间和精力，帮助我们停止传播假新闻。随着计算机科学子领域的发展，如机器学习（ML）、数据挖掘（DM）和NLP，假新闻检测的任务已从不同角度得到研究。</strong></p><p>在本文中，我们从NLP的角度调查了自动假新闻检测。概括地说，我们介绍了假新闻检测的技术挑战，以及研究人员如何定义不同的任务并制定ML解决方案来解决这个问题。我们讨论了每项任务的优点和缺点，以及潜在的陷阱和弊端。更具体地说，我们对假新闻检测的研究工作进行了概述，并对其任务定义、数据集、模型构建和性能进行了系统的比较。我们还讨论了这个方向上的未来研究的指导方针。本文还包括一些其他方面，如社会参与分析。我们的贡献有三个方面。</p><ul><li>对用于自动检测假新闻的自然语言处理解决方案进行了首次全面调查。</li><li>系统地分析了假新闻检测如何与现有的NLP任务保持一致，并讨论了问题的不同公式的假设和值得注意的问题。</li><li>对现有的数据集、NLP方法和结果进行了分类和总结，为对这个问题感兴趣的新研究人员提供了第一手的经验和易懂的介绍。</li></ul><h2 id="2-Related-Problems"><a href="#2-Related-Problems" class="headerlink" title="2 Related Problems"></a>2 Related Problems</h2><h3 id="2-1-Fact-Checking"><a href="#2-1-Fact-Checking" class="headerlink" title="2.1. Fact-Checking"></a>2.1. Fact-Checking</h3><p>事实核查的任务是评估政治家、专家学者等公众人物提出的主张的真实性。许多研究者并不区分假新闻检测和事实核查，因为它们都是为了评估 claims主张 的真实性。一般来说，<strong>假新闻检测通常专注于新闻事件，而事实核查则更广泛。</strong> Thorne和Vlachos（2018）对这一主题进行了全面的回顾。</p><h3 id="2-2-Rumor-Detection"><a href="#2-2-Rumor-Detection" class="headerlink" title="2.2. Rumor Detection"></a>2.2. Rumor Detection</h3><p><strong>谣言检测并没有一个一致的定义</strong>。最近的一项调查（Zubiaga等人，2018）将谣言检测定义为将个人主张分为谣言和非谣言，其中谣言被<strong>定义为在发布时由未经核实的信息片段组成的声明</strong>。<strong>换句话说，谣言必须包含可以验证的信息，而不是主观的意见或感觉。</strong></p><h3 id="2-3-Stance-Detection"><a href="#2-3-Stance-Detection" class="headerlink" title="2.3. Stance Detection"></a>2.3. Stance Detection</h3><p>立场检测是指从文本中评估作者在辩论中站在哪一边的任务。它与假新闻检测不同，因为它不是针对真实性，而是针对一致性。<strong>立场检测可以是假新闻检测的一个子任务，因为它可以应用于搜索文本的证据</strong>（Ferreira和Vlachos，2016）。PHEME，假新闻数据集之一，有与新闻相关的推文，捕捉到用户信任或不信任的行为。</p><h3 id="2-4-Sentiment-Analysis"><a href="#2-4-Sentiment-Analysis" class="headerlink" title="2.4. Sentiment Analysis"></a>2.4. Sentiment Analysis</h3><p>情感分析是一项提取情感的工作，例如顾客对一家餐厅的好感或负面印象。与谣言检测和假新闻检测不同的是，情感分析不是为了对主张进行客观验证，而是为了分析个人情感。</p><h2 id="3-Task-Formulations"><a href="#3-Task-Formulations" class="headerlink" title="3. Task Formulations"></a>3. Task Formulations</h2><p>在第2节中，我们比较了与假新闻检测有关的问题，以确定本调查的范围。在本调查中，<strong>假新闻检测的一般目标是识别假新闻，定义为看似新闻的虚假故事，包括在谣言检测中被判断为可以验证的信息的谣言。</strong>特别是，我们专注于文本内容的假新闻检测。输入可以是文本，从简短的声明到整个文章。输入与使用的数据集有关（见第4节），而且还可以附加附加信息，如发言人的身份。<br>有不同类型的标签或评分策略用于假新闻检测。在大多数研究中，假新闻检测被表述为一个分类或回归问题，但分类的使用更为频繁。</p><h3 id="3-1-Classification"><a href="#3-1-Classification" class="headerlink" title="3.1. Classification"></a>3.1. Classification</h3><p>最常见的方法是将假新闻的检测制定为一个二元分类问题。<strong>然而，将所有的新闻分为两类（假的或真的）是很困难的，因为存在着新闻部分是真的和部分是假的情况。</strong>为了解决这个问题，增加额外的类别是常见的做法。主要是为既不完全真实也不完全虚假的新闻设置一个类别，或者设置两个以上的真实度作为附加类别。当使用这些数据集时，预期的输出是多类标签，而这些标签是作为独立的标签学习的，具有i.i.d的假设（Rashkin等人，2017；Wang，2017）。<br>假新闻分类器取得良好性能的条件之一是有足够的标签数据。然而，要获得可靠的标签需要大量的时间和人力。因此，人们提出了半/弱监督和无监督的方法（Rubin和Vashchilko，2012；Bhattacharjee等人，2017）。</p><h3 id="3-2-Regression"><a href="#3-2-Regression" class="headerlink" title="3.2. Regression"></a>3.2. Regression</h3><p>虚假新闻检测也可以被表述为一项回归任务，其输出是真实性的数字分数。Nakashole和Mitchell（2014）采用了这种方法。通常情况下，评估是通过计算预测分数和地面真实分数之间的差异或使用Pearson/Spearman Correlations来完成。然而，由于可用的数据集有离散的地面真实分数，这里的挑战是如何将离散的标签转换成数字分数。</p><h2 id="4-Datasets"><a href="#4-Datasets" class="headerlink" title="4. Datasets"></a>4. Datasets</h2><p>数据集地址集合：</p><p> <a href="https://www.sohu.com/a/377489976_787107">https://www.sohu.com/a/377489976_787107</a></p><p><a href="https://www.zhihu.com/question/264356019/answer/1327236489">https://www.zhihu.com/question/264356019/answer/1327236489</a></p><p><img src="https://i.loli.net/2021/11/03/bJIfvLDMoyYBFsc.png" alt=""></p><p>自动假新闻检测的一个重要挑战是数据集的可用性和质量。我们将公共假新闻数据集分为三类：</p><ul><li>claims :  是一个或几个句子，包括值得验证的信息（表2中有一个样本）</li><li>整篇文章 : 是由许多相互关联的句子组成，构成信息的整体。</li><li>社交网络服务（SNS）数据，在长度上与 claims 相似，但以账户和帖子的结构化数据为特征，包括大量的非文本数据。</li></ul><h3 id="4-1-Claims"><a href="#4-1-Claims" class="headerlink" title="4.1. Claims"></a>4.1. Claims</h3><p>POLITIFACT、CHANNEL4.COM、 SNOPES 是三个来源的新闻中的人工标注的短文，这些短文是人工收集和标注的。编辑们从各种场合，如辩论、竞选、Facebook、Twitter、采访、广告等，精心挑选了这些说法。许多数据集是基于这些网站创建的。</p><p>Vlachos和Riedel（2014）发布了第一个公开的假新闻检测数据集，收集了来自POLITIFACT和CHANNEL4.COM的数据。这个数据集有221条声明，其中有制作日期、说话人和URL，以及五分制的真实性标签。EMERGENT（Ferreira和Vlachos，2016）也是早期的声称-验证数据集的工作。它是在事实核查的背景下进行立场分类，包括带有一些支持或反对文本的主张。这个数据集可以改善事实核查，条件是提供一些与 Claims 有关的文章。</p><p>Vlachos只包括221项索赔，Emergent只包括300项索赔，因此将其用于基于机器学习的评估是不切实际的。这些天来，有许多索赔的数据集被公布，它们可以作为前两者的改进版使用。</p><p>最近一个用于假新闻检测的基准数据集是LIAR（Wang，2017）。这个数据集与Vlachos和Riedel（2014）一样从Politifact收集数据，但包括12,836个真实世界的短文，每个声明都被标记为六级真实性。该数据集中还包括关于主题、政党、背景和发言人的信息。对于来自Politifact文章的数据集，Rashkin等人（2017）也发表了大型数据集。他们也收集了来自PunditFact（Politifact的衍生网站）的文章。</p><p>Fever 是一个为事实核查提供相关证据的数据集。在这一点上，它与EMERGENT相似。Fever包含185,445个由维基百科数据生成的说法。每个声明都被标记为支持、反驳或信息不足。他们还标注了他们使用维基百科中的哪些感性内容作为证据。Fever使我们有可能开发出一个能够与证据一起预测主张的真实性的系统，尽管来自维基百科的事实和证据的类型可能仍然表现出与现实世界的政治运动的一些主要风格差异。</p><h3 id="4-2-Entire-Article-Datasets"><a href="#4-2-Entire-Article-Datasets" class="headerlink" title="4.2. Entire-Article Datasets"></a>4.2. Entire-Article Datasets</h3><p>有几个假新闻检测的数据集可以预测———整个文章是真的还是假的。例如，FAKENEWSNET（Shu等人，2017a；Shu等人，2017b；Shu等人，2018）是一个正在进行的假新闻研究的数据收集项目。它包括基于BuzzFeed和PolitiFact的假新闻文章的标题和正文。它还收集了来自Twitter的这些文章的社会参与信息。<br>BS DETECTOR4是从一个名为BS Detector的浏览器扩展中收集的，表明其标签是BS Detector的结果，而不是人类注释者。BS Detec- tor通过检查人工编制的不可靠域名列表，搜索有问题的网页上的所有链接，以寻找不可靠来源的参考。</p><h3 id="4-3-Posts-On-Social-Networking-Services"><a href="#4-3-Posts-On-Social-Networking-Services" class="headerlink" title="4.3. Posts On Social Networking Services"></a>4.3. Posts On Social Networking Services</h3><p>BUZZFEEDNEWS收集了9家新闻机构在Facebook上的2282个帖子。每个帖子都由5名BuzzFeed记者进行事实核查。这个数据集的优势在于，文章是从左倾和右倾组织的两边收集的。BUZZFEEDNEWS有两个丰富的版本。Potthast等人（2017）通过添加链接文章等数据对其进行了丰富，而BUZZFACE（Santia和Williams，2018）则通过Facebook上与新闻文章相关的160万条评论来扩展BuzzFeed数据集。</p><p>SOME-LIKE-IT-HOAX（Tacchini等人，2017）由32个Facebook页面的15500个帖子组成，也就是组织的公开资料（14个阴谋论和18个科学组织）。这个数据集是根据发布者的身份而不是帖子级别的注释来标注的。这种数据集的一个潜在隐患是，这种标签策略可能导致模型学习每个发布者的特征，而不是假新闻的特征。</p><p>PHEME（Zubiaga等人，2016）和CREDBANK(Mitra and Gilbert, 2015)是两篇文章。PHEME包含9个有新闻价值的事件的330条twitter线程（一个人的一系列连接tweet），标记为真或假。CREDBANK包含覆盖96天的6000万条推文，被分组为1049个事件，有一个30维的真实性标签向量。每个事件都由30名人类注释者以5分的李克特量表对其真实性进行评分。他们将30个评分串联起来作为一个向量，因为他们发现很难将其简化为一个一维的分数。</p><p>如上所述，这些数据集是为验证推文的真实性而创建的。因此，它们只限于少数主题，并且可能包括与新闻没有关系的推文。因此，这两个数据集对于假新闻的检测并不理想，它们更多地被用于谣言检测。</p><h2 id="5-Methods"><a href="#5-Methods" class="headerlink" title="5. Methods"></a>5. Methods</h2><p>我们介绍假新闻的检测方法。像往常一样，我们首先将输入文本预处理成合适的形式（5.1.）。如果数据集有整个文章的长度，可以使用修辞学方法作为手工制作的特征提取之一（5.3.）。如果数据集有EMERGENT或FEVER这样的证据，我们可以使用5.4.中的方法来收集输出的证据。</p><h3 id="5-1-Preprocessing"><a href="#5-1-Preprocessing" class="headerlink" title="5.1. Preprocessing"></a>5.1. Preprocessing</h3><p>预处理通常包括标记化、词干化和概括化或加权词。为了将标记化的文本转换为特征，经常使用术语频率-反向文档频率（TF-IDF）和语言学查询和单词计数（LIWC）。对于单词序列，通常使用预先学习的单词嵌入向量，如word2vec（Mikolov等人，2013）和GloVe（Pennington等人，2014）。</p><p>当使用整个文章作为输入时，一个额外的预处理步骤是从原始文本中识别中心主张。Thorne等人（2018）使用TF- IDF和DrQA系统（Chen等人，2017）对句子进行排名。这些操作与子任务密切相关，如单词嵌入、命名实体识别、消歧义或核心参考解析。</p><h3 id="5-2-Machine-Learning-Models"><a href="#5-2-Machine-Learning-Models" class="headerlink" title="5.2. Machine Learning Models"></a>5.2. Machine Learning Models</h3><p>如第3节所述，现有的研究大多使用监督方法，而半监督或无监督的方法则较少使用。在本节中，我们主要通过几个实际的例子来描述分类模型。</p><h4 id="5-2-1-Non-Neural-Network-Models"><a href="#5-2-1-Non-Neural-Network-Models" class="headerlink" title="5.2.1. Non-Neural Network Models"></a>5.2.1. Non-Neural Network Models</h4><p>Support Vector Machine (SVM) 和 Naive Bayes Clas- sifier (NBC) 是经常使用的分类模型（Conroy等人，2015；Khurana和Intelligentie，2017；Shu等人，2018）。这两种模型在结构上有很大不同，它们通常都被用作基线模型。Logistic回归（LR）（Khurana和Intelligentie，2017；Bhattacharjee等人，2017）和决策树，如Ran- dom Forest Classifier（RFC）（Hassan等人，2017）也被偶尔使用。</p><h4 id="5-2-2-Neural-Network-Models"><a href="#5-2-2-Neural-Network-Models" class="headerlink" title="5.2.2. Neural Network Models"></a>5.2.2. Neural Network Models</h4><p>循环神经网络（RNN）在自然语言处理中非常流行，特别是长短时记忆（LSTM），它解决了梯度消失的问题，因此它可以捕获较长期的依赖关系。在第6节中，许多基于LSTM的模型在LIAR和FEVER上都有很高的准确性。此外，Rashkin等人（2017）建立了两个LSTM模型，将文本作为简单的词嵌入输入到一边，并作为LIWC特征向量输入到另一边。在这两种情况下，它们都比NBC和MaxEntropy(MaxEnt)模型更准确，尽管只是轻微的。</p><p>卷积神经网络（CNN）也被广泛使用，因为它们在许多文本分类任务中都很成功。Wang（2017）使用了一个基于Kim的CNN（Kim，2014）的模型，将最大池的文本代表与双向LSTM的元数据代表连接起来。CNN也被用于提取具有各种元数据的特征。例如，Deligiannis等人（2018）将新闻和出版商之间的关系图样数据作为CNN的输入，并用它们评估新闻。</p><p>Karimi等人（2018）提出了多源多类假新闻检测框架（MMFD），其中CNN分析索赔中每个文本的局部模式，LSTM分析整个文本的时间依赖性，然后通过全连接网络传递所有最后的隐藏输出的连接。 这个模型利用了两种模型的特点，因为LSTM对长句子的效果更好。</p><p>注意力机制经常被纳入神经网络以获得更好的性能。Long等人（2017）使用了一个注意力模型，该模型结合了说话人的名字和语句的主题，首先关注特征，然后将加权向量送入LSTM。这样做使准确率提高了约3%（表3）。Kirilin和Strube（2018）使用了一个非常类似的注意机制。Pham（2018）使用了记忆网络，它是一种基于注意力的神经网络，也分享了注意力机制的想法。</p><h3 id="5-3-Rhetorical-Approach"><a href="#5-3-Rhetorical-Approach" class="headerlink" title="5.3. Rhetorical Approach"></a>5.3. Rhetorical Approach</h3><p>修辞结构理论（RST），有时与矢量空间模型（VSM）相结合，也被用于假新闻检测（Rubin等人，2015b；Della Vedova等人，2018；Shu等人，2017b）。RST是一个故事连贯性的分析框架。通过定义文本单元的语义作用（例如，一个句子代表环境、证据和目的），这个框架可以系统地识别基本思想，并分析输入文本的特点。然后根据其连贯性和结构来识别假新闻。为了用RST解释结果，VSM被用来将新闻文本转换成向量，在高维RST空间中与真新闻和假新闻的中心进行比较。向量空间的每个维度表示新闻文本中修辞关系的数量。</p><h3 id="5-4-Collecting-Evidence"><a href="#5-4-Collecting-Evidence" class="headerlink" title="5.4. Collecting Evidence"></a>5.4. Collecting Evidence</h3><p>基于RTE（识别文本蕴涵）（Dagan等人，2010）的方法经常被用来收集和利用证据。RTE是识别句子之间关系的任务。通过使用RTE方法从数据源（如新闻文章）收集支持或反对输入的句子，我们可以预测输入是否正确。基于RTE的模型需要文本证据进行事实核查，因此这种方法只有在数据集包括证据时才能使用，如FEVER和Emergent。</p><hr><h1 id="The-Future-of-False-Information-Detection-on-Social-Media-New-Perspectives-and-Trends"><a href="#The-Future-of-False-Information-Detection-on-Social-Media-New-Perspectives-and-Trends" class="headerlink" title="The Future of False Information Detection on Social Media: New Perspectives and Trends"></a>The Future of False Information Detection on Social Media: New Perspectives and Trends</h1><p>社交媒体上虚假信息的大量传播已经成为一种全球性的风险，隐性地影响着公众舆论，威胁着社会/政治发展。因此，虚假信息检测（FID）已成为近年来风起云涌的研究课题。作为一个前景广阔、发展迅速的研究领域，我们发现很多人已经为FID的新研究问题和方法付出了努力。因此，有必要对FID的新研究趋势做一个全面的回顾。我们首先简要回顾了FID的文献历史，在此基础上，我们提出了几个新的研究挑战和技术，包括<strong>早期检测、多模态数据融合检测和解释式检测</strong>。我们进一步研究了FID中各种人群智能的提取和使用，这为解决FID的挑战铺平了道路。最后，我们对FID的开放性问题和未来的研究方向提出了自己的看法，如<strong>模型对新事件的适应性/通用性、对新型机器学习模型的接纳、人群智慧的聚合、检测模型中的对抗性攻击和防御等等</strong>。                         </p><h2 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h2><blockquote><p>社会化媒体平台（如Twitter1、Facebook2、新浪微博3）彻底改变了信息的传播模式，大大提高了信息传播的速度、数量和种类。然而，社交媒体为事实和虚假信息的快速传播提供了便利。根据奈特基金会最近的一项调查4，美国人估计，他们在社交媒体上看到的新闻有65%是假新闻。此外，虚假信息通常在社交网络中传播得更快、更深、更广。</p></blockquote><p>利用社交媒体传播误导性信息的敌对行为构成了一种政治威胁[8]。例如，在2016年美国总统大选期间，有多达529种不同的低可信度言论在推特上传播[73]，约有1900万个恶意机器人账户发布或转发了支持特朗普或克林顿的帖子，这有可能影响了选举。2018年，《科学》杂志发表了关于 “假新闻 “的主题期刊，他们报道说，假 statements 声明可以引起人们的恐惧和惊讶的感觉，这有助于社会恐慌。例如，一段名为索马里人 “被推入浅坟 “埃塞俄比亚的虚假视频，引起了埃塞俄比亚两个种族之间的暴力冲突；一条网上的虚假信息，暗示希腊已经取消了转机限制，导致希腊警察与移民发生了冲突。上述例子表明，虚假信息的泛滥对社会信息传播的生态构成了严重威胁[91]。社交媒体用户每天都会接触到大量关于各种主题的信息。对用户来说，判断每条信息的可信度是不现实的，也是不可行的[140]。因此，检测社交媒体上的虚假信息是非常迫切的。</p><p>随着新媒体时代的到来，多模态的社交媒体帖子已经逐渐成为社交媒体的主流。因此，随着人工智能（AI）的快速发展，未来的网络虚假信息将超越文字，大规模地扩展到高质量和可操控的信息材料，如图像、视频和音频[8]。例如，DeepFakes[44, 56]利用深度学习模型创建了真实人物的音频和视频，说和做他们从未说过或做过的事情，这使得虚假信息越来越逼真，越来越难以辨别。虽然自动虚假信息检测不是一个新现象，但目前它已经引起了越来越多的公众关注。</p><p>为了便于理解和解释网络和社交媒体上的虚假信息，Kumar等人[89]根据其意图和知识对虚假信息进行总结和分类。</p><p><img src="https://i.loli.net/2021/11/03/kq1zrQMWtJ9jx2U.png" alt=""></p><p>按照意图，false information 可以分为错误信息 misinformation 和虚假信息 disinformation，错误信息是指在事件演变过程中产生的虚假信息，或者是在知识更新过程中产生的虚假信息，没有误导的目的[87，150]；虚假信息是指为了某种目的而故意误导他人的虚假信息[36，166]。根据知识，虚假信息可以被认为是基于意见的，它表达了用户的主观意见，描述了一些没有独特基础真相的情况，而基于事实的，是捏造或违背绝对基础真相的信息[172]。此外，相关文献中还有一些类似的术语，<strong>如谣言、假新闻。谣言一词通常指的是在发布时未经核实的信息</strong>[204]。<strong>因此，谣言可能会被证明是真的或假的。与谣言不同的是，假新闻一词被广泛用于指那些故意的、可验证的虚假新闻文章</strong>[162]。我们根据其意图对这些术语进行分类，如图1所示。尽管上述术语之间有区别，但它们都涉及到虚假信息的传播，并有能力或意图影响一些用户。因此，本调查坚持这些术语的定义，并从技术角度回顾了社交媒体上虚假信息检测（FID）的发展。</p><blockquote><p>近年来，在FID方面有很多努力。根据现有FID方法中使用的特征类型，我们将其分为<strong>四类：基于内容的方法、基于社会环境的方法、基于特征融合的方法和基于深度学习的方法</strong>。<strong>基于内容的检测方法</strong>主要利用从社交帖子中提取的文本或视觉特征进行二元分类（真实或虚假）。<strong>基于社会环境的方法</strong>一般依赖于丰富的用户之间的互动特征，如评论、转贴、关注等。<strong>基于特征融合的方法</strong>综合利用了内容特征和社会环境特征。此外，<strong>基于深度学习的方法</strong>主要通过神经网络学习信息的潜在深度表示。</p></blockquote><p>尽管过去几年对FID做了很多研究，但仍有许多遗留问题需要解决。<strong>首先，现有的FID方法大多利用内容或传播特征，并且通常在虚假信息的整个生命周期中工作良好，这可能导致早期检测的性能不佳。</strong>由于虚假信息可能在短短几分钟内产生严重影响，因此在早期阶段检测它们是至关重要的。第二，随着多模态帖子在社交网络上传播的增加，传统的基于文本的检测方法已不再可行，在更复杂的情况下，利用图像或视频进行FID是有益的。第三，目前的检测方法只给出了声明是否为假的最终结果，但缺乏做出决定的理由。对于揭穿不准确的信息并防止其进一步传播，给出一个令人信服的解释是非常重要的。</p><p>本文旨在深入调查与FID方法有关的最新发展。目前已经有一些关于FID的调查[39, 162, 201, 204]。Zhou等人[201]从<strong>基于知识、基于风格、基于传播和基于可信度</strong>等四个角度研究假新闻，并总结了心理学和社会科学的相关检测方法。Zubiaga等人[204]专注于谣言分类系统，研究了现有的识别疑似谣言、收集谣言相关帖子、检测帖子立场和评估目标事件可信度的方法。同样，Fernandez等人[39]将错误<strong>信息检测分为四个阶段：错误信息识别、传播、验证和驳斥。</strong>他们相应地组织了现有的在线错误信息检测系统。Shu等人[162]从数据挖掘的角度将检测模型分为基于新闻内容的模型和基于社会背景的模型，并总结了虚假新闻检测算法的评估测量方法。我们的调查与其他相关调查的区别如下：</p><ul><li>上述调查对基于深度学习的虚假信息检测方法关注甚少。然而，在过去的三年里，深度学习模型已经被广泛地应用于FID。为了给检测方法提供一个最新的全面调查，我们调查并交叉比较了最近基于深度学习的方法。</li><li>本文回顾了近年来在FID领域出现的新问题和新技术，如早期检测、多模态数据融合检测和解释式检测等。此外，我们的论文从人群智能的角度调查了这些新问题和有前途的工作，研究了利用人群智能促进FID的潜力。</li><li>人工智能的发展提高了FID模型的性能，因此数据集已经变得和算法一样重要。本文为未来的研究人员梳理了自2015年以来广泛使用的开放数据集，这些数据集被现有的调查所忽视。</li></ul><p>与现有研究大多使用帖子内容不同，基于人群智能的方法旨在检测基于聚合的用户意见、猜想和证据的虚假信息，这是人类与帖子互动过程中注入的隐性知识（如帖子的发布、评论和转贴）。最重要的是，我们工作的主要贡献包括：</p><ul><li>基于对FID的简要文献回顾，我们集中讨论了它的最新研究趋势，包括对新事件的模型通用性、早期检测、基于多模态融合的检测和解释式检测。</li><li>我们对基于人群智能的FID方法进行了调查，包括FID中人群智能的范围，基于人群智能的检测模型，以及人机混合融合模型。</li><li>我们进一步讨论了FID的开放性问题和有前途的研究方向，如模型对新事件的适应性/通用性，拥抱新型机器学习模型，以及FID模型中的对抗性攻击和防御。</li></ul><p>本文的其余部分组织如下。我们在第2节中对现有的FID工作进行了简要的文献回顾。然后，我们在第3节调查了FID的几个新的研究趋势。在第4节中，我们强调了基于人群智能的检测，然后在第5节中介绍了FID的开放问题和未来方向。最后，我们在第6节中总结了本文。</p><h2 id="2-A-BRIEF-LITERATURE-REVIEW"><a href="#2-A-BRIEF-LITERATURE-REVIEW" class="headerlink" title="2 A BRIEF LITERATURE REVIEW"></a>2 A BRIEF LITERATURE REVIEW</h2><p>本调查主要关注检测在社交网络上传播的虚假或不准确的说法，因此我们首先给出虚假信息检测问题的一般定义。</p><ul><li>对于一个具体的声明 $s$ ，它包含一组相关的 $n$ 个帖子 $P={p_1, p_2, …, p_n }$ 和一组相关的用户 $U={u_1,u_2,…,u_m}$.每个 $p_i$ 由一系列代表帖子的属性组成，包括文字、图片、评论数量等。每个 $u_i$ 由一系列描述用户的属性组成，包括姓名、注册时间、职业等。</li><li>让 $E = {e1,e2,…,en}$ 指的是 $m$ 个用户和 $n$ 个帖子之间的互动。每个 $e_i$ 被定义为 $e_i = {p_i,u_j,a,t}$，代表一个用户 $u_j$ 在时间 $t$ 通过行动 $a$ （发帖、转帖或评论）与帖子 $p_i$互动。</li></ul><p>定义2.1。false information错误信息检测：给定具有帖子集 $P$、用户集 $U$ 和参与集 $E$ 的语句 $s$，错误信息检测任务是学习预测函数 $F(S)\to {0，1}$</p><p>在下文中，我们对现有的FID技术进行了简要的文献回顾，分为四大类型，即基于内容、基于社会环境、基于特征融合和基于深度学习的方法，如表1（前三种类型）和表2（最后一种类型）所总结的。此外，我们还对现有的几个在线FID工具进行了总结，这些工具对于减轻虚假信息的影响和防止其进一步传播具有重要意义。</p><h3 id="2-1-Content-based-Methods"><a href="#2-1-Content-based-Methods" class="headerlink" title="2.1 Content-based Methods"></a>2.1 Content-based Methods</h3><p>对于一个具体的事件，其微博一般是由一段文字来描述，往往与几张图片或视频相关。基于内容的方法主要是基于特定的写作风格或虚假文章的耸人听闻的标题，如词汇特征、句法特征和主题特征[143]。例如，Castillo等人[16, 17]发现，高可信度的推文有更多的URL，而且文本内容长度通常比低可信度的推文长。</p><p>许多研究利用词法和句法特征来检测虚假信息。例如，Qazvinian等人[136]发现，语篇（POS）是FID的一个可区分的特征。Kwon等人[90]发现一些类型的情感是机器学习分类器的明显特征，包括积极的情感词（如爱、好、甜）、否定词（如不、不、永不）、认知行动词（如原因、知道）和推断行动词（如可能、也许）。然后，他们提出了一个周期性的时间序列模型来识别真实推文和虚假推文之间的关键语言差异。此外，Pérez-Rosas等人[128]总结了真实和虚假内容的语言学特征的差异，可以分为五类。”Ngrams”、”标点符号” “心理语言学特征”、”可读性 “和 “句法”。基于上述特征，使用线性SVM来识别虚假信息。Rashkin等人[141]总结了不可信的新闻内容的语言风格。具体来说，他们发现第一/第二人称代词在低可信度信息中使用的频率更高，夸张的词汇也是如此。</p><p>词汇特征有时不能完全反映虚假信息的特征，因为它的位置性。因此，许多研究为FID引入了语义特征，如话题、情感和写作风格。例如，Potthast等人[134]利用不同的写作风格来检测虚假声明。同样地，Horne等人根据假新闻文章在标题风格上与真实新闻文章有很大不同的观察，提出了一个FID模型。Hu等人[68]提出了一个利用情感信息检测低可信度社交帖子的框架。Ito等人[70]将Latent Dirichlet Allocation（LDA）主题模型引入到推文可信度的评估中，他们提出了推文主题特征和用户主题特征，用于检测虚假信息。</p><h3 id="2-2-Social-Context-based-Methods"><a href="#2-2-Social-Context-based-Methods" class="headerlink" title="2.2 Social Context-based Methods"></a>2.2 Social Context-based Methods</h3><p>传统的基于内容的方法是孤立地分析单个微博或主张的可信度，忽略了不同微博和事件之间的高度关联性。此外，大量的人类内容互动数据（发帖、评论、转帖、评级和标签等）为FID提供了丰富的参考信息。具体来说，基于社会环境的方法可以进一步分为基于帖子和基于传播的方法。</p><p>(1) Post-based features</p><p>基于帖子的方法主要依靠用户的帖子来表达他们对特定事件的情绪或意见。许多研究通过分析用户的可信度[95, 118]或立场[63, 116]来检测虚假信息。例如，Shu等人[164]从用户档案中探索出对FID真正有用的特征，从而减少检测过程中特征提取的负担。具体来说，他们发现性格外向和随和的用户不太可能受到虚假信息的影响。此外，Guess等人[57]指出，保守派更倾向于在Facebook中分享虚假帖子。Long等人[104]发现，在基于内容的检测方法中应用用户档案（如党派、验证信息和位置）可以提高其在FID上的表现。他们提出了一个混合检测模型，分别提取新闻内容的主题特征和用户属性特征。此外，Tacchini等人[170]发现，有不准确信息的社交帖子通常比真实的事实有更多的赞。因此，他们使用逻辑回归（LR）模型和众包算法，在用户喜欢的基础上检测虚假信息。</p><p>(2) Propagation-based features</p><p>基于传播的方法将帖子和事件的可信度作为一个整体进行评估[14]，这些方法通常关注信息传播网络的构建和可信度的传播。<br>一些研究通过分析其传播模式来检测虚假信息。例如，Ma等人[107]发现，社会环境的特征会随着时间的推移而逐渐改变。因此，他们提出了一个DSTS模型来描述FID的社会背景特征的时间模式，该模型将信息传播序列划分为固定长度的片段，然后从每段帖子中提取基于内容和社会背景的特征，最后用SVM进行分类。Liu等人[102]构建了基于异质用户特定属性的信息传播网络，用于识别虚假信息的特殊传播结构。Kim等人[79]提出了一个贝叶斯非参数模型来描述新闻文章的传播特征，该模型联合利用文章的主题和用户兴趣来进行FID。此外，Wu等人[186]观察到虚假信息通常先由普通用户发布，然后由一些意见领袖转发，最后由大量的普通用户传播。然而，真相往往是由一些意见领袖发布，然后由大量用户直接传播。基于这一观察，他们提出了一个用于FID的混合SVM分类器，该分类器对信息传播结构、主题信息、用户属性等共同建模。<br>此外，许多研究还通过构建特定的树状或网络结构来检测虚假信息。例如，Ma等人[108]将谣言相关的微博传播建模为传播树，他们提出了一种基于内核的方法来捕捉这些传播树之间的模式，以实现FID。此外，Gupta等人[62]构建了一个包含用户、帖子和事件的可信度传播网络来模拟虚假信息的传播过程。Jin等人[74]提出了一个连接微博、子事件和事件的三层可信度传播网络，用于信息可信度验证。</p><h3 id="2-3-Feature-Fusion-based-Methods"><a href="#2-3-Feature-Fusion-based-Methods" class="headerlink" title="2.3 Feature Fusion-based Methods"></a>2.3 Feature Fusion-based Methods</h3><p>基于内容的检测方法主要从写作风格、词汇和句法特征方面来识别真实和非真实的主张之间的差异，而基于社会背景的检测方法主要利用从信息传播过程中提取的特征。由于两类方法应用的特征可以互补[145]，最近许多研究者开始研究基于特征融合的新方法。例如，Vedova等人[30]利用了用户和帖子之间的互动信息，以及帖子的文本信息。具体来说，他们对社交帖子进行词干分析，并将每个帖子表示为单词的TF-IDF向量。之后，他们利用用户的喜欢行为来描述社会背景特征，与Tacchini等人的工作类似[170]，最后通过整合这两种信号来识别虚假信息。为了利用传统的内容特征（如词汇或句法特征），Volkova等人[176]将来自新闻内容的心理语言学信号和来自社会环境的作者观点作为FID中不同分类器的输入数据。此外，Shu等人[165]进一步探讨了出版商、新闻作品和用户之间的社会关系。他们提出了一个名为TriFN的通用检测框架，通过非负矩阵分解（NMF）算法对新闻内容、社会互动和新闻发布者之间的内在关系进行建模，用于识别低可信度信息。</p><h3 id="2-4-Deep-Learning-based-Methods"><a href="#2-4-Deep-Learning-based-Methods" class="headerlink" title="2.4 Deep Learning-based Methods"></a>2.4 Deep Learning-based Methods</h3><p><img src="https://i.loli.net/2021/11/03/stFAr7x1CKzyXME.png" alt=""></p><h2 id="3-NEW-TRENDS-IN-FALSE-INFORMATION-DETECTION"><a href="#3-NEW-TRENDS-IN-FALSE-INFORMATION-DETECTION" class="headerlink" title="3 NEW TRENDS IN FALSE INFORMATION DETECTION"></a>3 NEW TRENDS IN FALSE INFORMATION DETECTION</h2><p>在回顾了关于FID的传统研究后，本节调查了这一领域的几个新的研究趋势，包括早期检测、通过多模态数据融合检测和解释性检测。</p><h3 id="3-1-Early-Detection"><a href="#3-1-Early-Detection" class="headerlink" title="3.1 Early Detection"></a>3.1 Early Detection</h3><p>虚假信息很容易被社交网络上的大量用户传播，在很短的时间内造成严重影响[14, 46]。因此，对虚假信息的早期检测成为一个重要的研究课题。然而，大多数现有的研究（基于内容和社会背景的方法）通过假设他们拥有所有的生命周期数据来检测虚假信息。他们依赖于几个聚合特征，如内容特征和传播模式，这需要一定数量的帖子来训练强大的分类器。虚假信息开始时的可用数据非常有限，以至于在早期阶段检测它很有挑战性。最近，有一些针对早期FID的努力。</p><p>传统的机器学习方法通常会分析帖子早期传播中的用户交互信息，手动提取大量的特征，最后用分类器（如SVM、随机森林）来评估其中的可信度。例如，Liu等人[100]发现，在少量的数据中，来源的可靠性、用户的多样性和证据信号，如 “我看到 “和 “我听到”，对FID有很大的影响。此外，Qazvinian等人[136]观察到，在推文传播的早期阶段，用户倾向于表达自己的信念（如支持或质疑）。因此，合理利用信息中的用户信念，对早期发现虚假信息大有裨益。为了解决数据缺乏的问题，从相关事件中借用知识进行FID将是另一种有用的方法。例如，Sampson等人[149]提出了一种通过利用隐性链接（如标签链接、网络链接）从相关事件中获取额外信息的突发性FID方法。实验结果表明，当可用的文本或互动数据较少时，这种隐性链接明显有助于正确识别突发的不真实声明。</p><p>许多检测方法利用深度学习模型对虚假信息进行早期检测。基于深度学习的检测方法通常使用神经网络来自动提取社会环境特征，并通过利用注意力机制找到FID的关键特征。例如，Liu等人[99]观察到只有少数帖子对FID有很大贡献。为了选择这些关键内容，他们提出了一个基于注意力的检测模型，该模型通过每个帖子的注意力值来评估其重要性。此外，实验结果表明，正确使用注意力机制有利于早期发现虚假信息。同样，Chen等人[20]发现，在信息传播的不同时期，用户倾向于对不同的内容进行评论（例如，从惊讶到质疑）。基于这一观察，提出了一个基于RNN的深度注意模型，有选择地学习连续帖子的时间性隐藏表征，以实现早期FID。Yu等人[195]利用一个基于CNN的模型从帖子序列中提取关键特征，并学习它们之间的高层次互动，这有利于用相对较少的互动数据识别虚假推文。Nguyen等人[123]也利用CNN来学习每条推文的潜在表征，相应地获得推文的可信度。然后，他们通过汇总事件开始时所有相关推文的预测，来评估目标事件是否是一条虚假信息。更重要的是，Liu等人[101]发现大多数用户在信息传播的早期过程中没有评论就转发源推文，这隐含着利用用户评论进行早期FID的一些延迟。因此，他们提出了一个传播路径分类模型，名为PPC，该模型联合使用CNN和GRU来提取转发路径中用户的局部和全局特征。</p><h3 id="3-2-Detection-by-Multimodal-Data-Fusion"><a href="#3-2-Detection-by-Multimodal-Data-Fusion" class="headerlink" title="3.2 Detection by Multimodal Data Fusion"></a>3.2 Detection by Multimodal Data Fusion</h3><p>传统的FID方法专注于文本内容和传播结构。然而，社交媒体帖子也包含丰富的视觉数据，如图片和视频，而这种多模态数据往往被忽视。图片和视频比纯文本信息更吸引用户，因为它们可以生动地描述目标事件。<br>图像处理的巨大进步，如AE、VAE和GAN（如第2.4节所述），证明了图像可以很容易地被编辑和修改，使假图像的生成更加容易。因此，分析多模态数据之间的关系并开发基于融合的模型可以成为FID的一个有前途的方法[14]。社交媒体上的虚假信息中主要有三种假图像，包括图像篡改、图像不匹配和图像混合。</p><h3 id="3-3-Explanatory-False-Information-Detection"><a href="#3-3-Explanatory-False-Information-Detection" class="headerlink" title="3.3 Explanatory False Information Detection"></a>3.3 Explanatory False Information Detection</h3><p>大多数基于深度学习的FID方法在输出决策结果时，往往不会呈现做出决策的原因，它们利用预先训练好的分类器来识别测试集中的可疑事件[14]。然而，找到支持决策的证据碎片将有利于揭穿虚假信息并防止其进一步扩散。因此，解释型FID已经成为另一个趋势性的研究课题。现有的解释性FID研究主要集中在两个方面：一是探索实用的可解释性检测模型（模型的解释），二是解释其结果（结果的解释）。</p><h2 id="4-CROWD-INTELLIGENCE-BASED-DETECTION"><a href="#4-CROWD-INTELLIGENCE-BASED-DETECTION" class="headerlink" title="4 CROWD INTELLIGENCE-BASED DETECTION"></a>4 CROWD INTELLIGENCE-BASED DETECTION</h2><p>现有的研究表明，帖子的内容特征仍然是FID的首要任务。由于社交帖子是由用户产生、互动和消费的，它将在帖子的编辑、评论和转发中摄入各种人类智能（如意见、立场、质疑、证据提供）。在社交媒体帖子的传播过程中，所谓的人群智慧[58, 96, 185]也会以集体的方式被聚集起来。正如Castillo等人[16]所说，一个有希望的假设是，在社交媒体环境中存在一些内在的信号，有助于评估信息的可信度。Ma等人[110]也发现，Twitter支持基于聚合的用户意见、猜想和证据碎片的虚假信息的 “自我检测”。虽然，如何在FID中利用人群智能仍然是一个开放的问题。在第4节中，我们试图通过提炼和介绍人群智能在FID系统中的几种不同使用形式来解决这个问题，如图2所示。</p><p><img src="https://i.loli.net/2021/11/03/oeDcFSqNtObuY1J.png" alt=""></p><h3 id="4-1-Crowd-Intelligence-in-False-Information"><a href="#4-1-Crowd-Intelligence-in-False-Information" class="headerlink" title="4.1 Crowd Intelligence in False Information"></a>4.1 Crowd Intelligence in False Information</h3><p>在FID中，人群智能是指在信息产生和传播过程中，来自社交媒体用户智慧的聚合线索或社会信号。在本小节中，我们总结了FID中人群智能的含义和使用方式。<br>我们从社会背景、集体知识和集体行为等三个方面来描述人群智能。</p><ul><li>Social contexts. 源用户和传播者之间的社会关系和互动有助于理解信息的确定性。例如，Kim等人[80]认为用户的标记可以间接反映推文的可信度，所以他们使用PGM来生成人与内容的互动过程，推断推文的真实性。Zhao等人[199]发现群众在评论中对真实性的质疑或询问是低可信度信息的指示性信号，他们使用正则表达式从用户评论中提取上述信号进行FID。此外，Wu等人[188]认为类似的话题可能会在类似的人群中传播，所以他们对传播者进行编码，以捕捉他们的社会接近性，从而识别虚假信息。</li><li>Collective knowledge. 群众提供的收集的证据对推断信息的可信度很有用。例如，Lim等人[97]利用用户对目标事件在线证据的支持或反对来检测不准确的言论。Rayana等人[142]认为用户的评分和评论是对帖子可信度的真实评价，所以他们提出了一个名为SpEagle的检测框架，从集体线索和关系数据（信息传播网络）中提取特征。此外，Qian等人[138]提出了一种用于FID的人群知识转移方法，其中利用了历史上真/假说法中的人群反应知识（如背景特征和行为特征）。</li><li>Collective behaviors. 在很多情况下，虽然个人行为不能很好地描述信息的可信度，但一群用户的聚合行为往往能揭示更多信息。这可能是指人群互动模式，行为或意见偏离多数[88]，观点冲突，等等。例如，经常参与低可信度信息的生产和传播的用户有行为偏差，例如，在短时间内发布几个意见，或在一个固定的时间间隔后与内容互动。基于上述观察，Kumar等人[88]通过贝叶斯模型推断出回复者及其评论的可信度。此外，Jin等人[76]发现同一事件下的相关推文包含支持和反对的意见（通过LDA主题模型分析），他们利用这些冲突的观点来建立FID的可信度传播网络。</li></ul><p>在调查了现有的FID研究后，我们提炼出四种不同的人群智能使用方式，如下所示。</p><ul><li>群体学习模型。它主要使用特征工程和代表学习将人群智能融入到FID模型中。</li><li>人群行为建模。它使用图或概率模型对人群行为和互动进行建模，以推断信息的可信度。</li><li>群众的知识转移。学习到的FID模型通常在新事件上不能很好地发挥作用。这种方式解决了如何将人群知识从现有的事件转移到新的事件。</li><li>人机混合模型。考虑到人类智能和机器智能的互补性，这种方式集中于开发用于FID的混合人机模型。</li></ul><p>前面三种方式的一个共同特点是，人群智能是以隐性方式使用的，没有明确的人类输入。具体来说，人群智能被表示为统计学上的人类行为模式，作为学习模型的特征或参数使用。然而，最后一种方式是基于明确的人类输入，例如使用众包进行数据标记。</p><p><img src="https://i.loli.net/2021/11/03/WmdofhkMb9NeV2p.png" alt=""></p><h3 id="4-2-Implicit-Crowd-Intelligence-Models"><a href="#4-2-Implicit-Crowd-Intelligence-Models" class="headerlink" title="4.2 Implicit Crowd Intelligence Models"></a>4.2 Implicit Crowd Intelligence Models</h3><p>在本节中，我们介绍了关于将隐式人群智能用于FID的开创性研究，特别关注4.1节中描述的前三种方式，如表4中总结的那样。</p><p>(1) 群体学习模型。在该模型中，群体智能被表示为训练分类器以检测虚假信息的特征。这已被证明对早期的 FID 很有用。例如，刘等人。 [100] 尝试使用来自 Twitter 数据的人群线索来解决实时虚假索赔揭穿的问题，包括人们的意见、证人账户的统计数据、对事件的聚合信念、网络传播等。赵等人。 [199] 观察到，在决定是否相信此消息之前，有些人愿意质疑或询问 Twitter 中声明的真实性。特别是，他们发现使用探究思维有助于及早发现虚假信息。<br>社会关系和交互也是 FID 特征学习中广泛使用的群体智能。例如，吴等人。 [188] 假设相似的消息通常会导致相似的信息传播轨迹。他们提出了一种社交媒体用户嵌入方法来捕捉社交接近度和社交网络结构的特征，在此基础上利用 LSTM 模型对信息传播路径进行分类并识别其真实性。拉亚娜等人。 [142] 应用集体意见线索和相关数据来检测虚假信息。<br>通过利用发布虚假帖子的用户行为与发布真实事实的用户行为不同的人群情报来识别虚假信息也很有帮助。陈等人。 [22] 提出了一种无监督学习模型，该模型结合了 RNN 和自动编码器，以将低可信度信息与其他真实声明区分开来。此外，谢等人。 [189] 观察到垃圾评论攻击与其评分模式密切相关，这与正常评论者的行为模式不同。因此，他们提出了一种基于其时间行为模式的垃圾评论检测方法，为群体学习模型的 FID 提供了参考。</p><p>(2) 人群行为建模。在这个模型中，集体的人群行为（人群智能的一种类型）被建模为图或概率模型来推断信息的可信度。Hooi等人[66]发现，欺诈性账户经常在短时间内呈现他们的评级（评级分数满足偏斜分布）。群众智慧的特点是贝叶斯推理模型，它可以估计一个用户的行为与相关社区的行为有多大偏差。他们通过测量行为偏差的程度来推断用户评级的可信度。同样，Kumar等人[88]提出了一个贝叶斯检测模型，该模型结合了聚合的人群智慧，如用户的行为属性、评级的可靠性和产品的优良性。通过对异常行为的惩罚，它可以推断出评级平台的信息可信度。<br>一些研究利用聚合的人群行为建模来促进虚假信息的早期检测。例如，Ma等人[110]假设回复者倾向于询问谁支持或否认给定的事件，并表达他们对更多证据的渴望。因此，他们提出了两个树状结构的递归神经网络（RvNN），用于有效的虚假推文表征学习和早期检测，可以对用户回复结构进行建模，并学习捕捉FID的聚合信号。</p><p>(3) 群众的知识转移。<strong>现有的FID模型在新出现的和时间紧迫的事件上仍然表现不佳。换句话说，现有的FID模型通常捕捉到许多与事件相关的特征，而这些特征在其他事件中并不常见。</strong>因此，<strong>有必要学习并将从现有众包数据中获得的共享知识转移到新的事件中</strong>。Wang等人[182]的工作提出了一个利用可转移特征识别新产生的虚假事件的检测模型，名为事件对抗神经网络（EANN ），它包括三个部分，即 “特征提取器”、”事件判别器 “和 “假新闻检测器”。<strong>EANN使用事件判别器来学习与事件无关的共享特征，并在模型训练中减少事件特定特征的影响。</strong><br>群众知识转移模型也有助于早期FID。例如，Qian等人[138]提出了一个生成性条件变异自动编码器，从历史上用户对真实和虚假新闻文章的评论中捕捉用户反应模式。换句话说，当虚假信息传播的早期阶段没有社会互动数据时，人群智能被利用来产生对新文章的反应，以提高模型的检测能力。Wu等人[187]还探讨了历史众包数据中的知识是否能对新出现的虚假社交媒体帖子的检测有所帮助。他们观察到，内容相似的社交帖子往往会导致类似的行为模式（如好奇心、询问）。因此，他们建立了一个稀疏表示模型来选择共享特征并训练与事件无关的分类器。</p><h2 id="5-OPEN-ISSUES-AND-FUTURE-DIRECTIONS"><a href="#5-OPEN-ISSUES-AND-FUTURE-DIRECTIONS" class="headerlink" title="5 OPEN ISSUES AND FUTURE DIRECTIONS"></a>5 OPEN ISSUES AND FUTURE DIRECTIONS</h2><p>尽管研究人员已经为解决FID系统的上述挑战做出了越来越多的努力，但仍有一些开放性的问题需要在未来进行研究，如下所述。</p><h3 id="1-Cognitive-mechanisms-of-false-information"><a href="#1-Cognitive-mechanisms-of-false-information" class="headerlink" title="(1) Cognitive mechanisms of false information."></a>(1) Cognitive mechanisms of false information.</h3><p>人们对虚假信息的认知机制的研究对于虚假社交媒体帖子的检测和反驳具有很好的指导作用[87]，尤其是基于群体智能的检测方法。几部作品对社交媒体平台上的低可信帖子进行了分析，以研究虚假信息能够快速广泛传播的原因。莱万多夫斯基等人。 [92] 认为打击虚假信息需要在技术和心理学的背景下进行科学研究，因此他们提出了一种称为“技术认知”的跨学科解决方案。此外，他们将用户面对虚假信息的认知问题分为影响效应、熟悉度逆火效应、矫枉过正逆火效应和世界观逆火效应四类，为研究用户对虚假信息的感知奠定了基础。 93]。正如 Acerbi [1] 总结的那样，不准确信息的快速传播在于它们包含满足用户认知偏好的特定内容。为了探索虚假信息的认知特征，他们通过将认知偏好编码为“威胁”、“厌恶”、“社交”、“名人”等部分，进一步分析了真假新闻文章的偏好分布。未来一个有价值的研究点是将虚假和真实的信息与具有认知吸引力的特征进行比较，或者评估与认知偏好相关的特征如何促进信息病毒式传播。</p><p>除了在数据分析层面研究认知机制外，我们还可以从人脑认知功能的角度来学习这种机制。神经科学的进步为研究虚假信息的认知机制提供了一个很好的途径。正如Poldrack等人[130]所说，利用脑电图（EEG）、脑磁图（MEG）、功能性磁共振成像（fMRI）和其他脑成像工具可以推动我们了解人脑如何形成社会行为。此外，Adolphs[3]已经确定了参与社会认知调控的神经结构，如扣带皮层、海马体和基底前脑。Arapakis等人[6]利用脑电图记录来测量用户对新闻文章的兴趣，实验结果显示，额叶α不对称性（FFA）可以客观地评价用户对媒体内容的偏好。为了解释信息病毒的机制，Scholz等人[151]提出了一个基于fMRI数据的神经认知框架来评估用户在Facebook上分享信息的意愿。如果我们能够理解虚假信息的认知机制，就可以把更多的精力放在探索揭穿信息最大化的方法上，从而找到针对虚假信息的有力对策。</p><h3 id="2-Lack-of-standard-datasets-and-benchmarks"><a href="#2-Lack-of-standard-datasets-and-benchmarks" class="headerlink" title="(2) Lack of standard datasets and benchmarks."></a>(2) Lack of standard datasets and benchmarks.</h3><p>尽管研究人员在FID方面做了大量的工作，但仍然缺乏像ImageNet[31]这样的视觉对象识别基准数据集。数据集作为一种资源，与FID的算法同样重要。然而，收集虚假信息是一个耗时耗力的过程，这导致了权威基准的缺乏。<br>我们总结了2015年以来的公开数据集，如表6所示，其数据收集自新浪微博（如RUMDECT，Meida_Weibo）、Twitter（如。MediaEval、PHEME、RUMOUREVAL）和其他社交平台，以及snopes.com、politifact.com（例如Emergent、BuzzFeedWebis、LIAR、Declare、FakeNewsNet）和其他事实核查网站。然而，这些数据集的注解方法、数据维度以及真假陈述的比例都不一样，这给研究人员公平评估其模型性能带来了一定的挑战。Shu等人[162]总结了广泛使用的FID的评价指标，现有的评价指标仍然是精度、召回率、F1得分、准确率等机器学习模型评价指标。在FID中，我们需要定义一些更实用的评价指标。例如，在政治选举中，我们会更关注虚假声明是否被更全面地识别出来（即更关注召回率而不是精度），所以用F1得分来评价检测模型的性能并不是很合适。在未来的研究中，需要标准的数据集和实用的评价指标来比较各种FID算法，促进FID方法的发展。</p><h3 id="3-Model-adaptivity-generality-to-new-events"><a href="#3-Model-adaptivity-generality-to-new-events" class="headerlink" title="(3) Model adaptivity/generality to new events"></a>(3) Model adaptivity/generality to new events</h3><p><strong>FID方法应该识别未见过的、新出现的事件，因为系统的现有数据可能与新出现的事件的内容不同。然而，现有的方法倾向于提取事件的特定特征，而这些特征很难与新事件共享[</strong>204]。正如Tolosi等人[173]所说，<strong>基于特征工程的检测方法很难检测到不同领域（如政治、犯罪、自然灾害）的虚假信息，因为不同事件的特征变化很大。因此，模型的通用性或适应性对于提高FID模型的稳健性相当重要。</strong>Zubiaga等人[206]指出，<strong>依赖于领域的特征分布可能会限制模型的泛化能力。</strong>由于大多数特征的分布直接对应于事件，FID模型的性能将受到影响。尽管我们在第4.2节中讨论了一些人群知识转移模型[138, 182, 187]，但还有更多的东西需要研究。在其他领域（如情感分类[50]和图像识别[103]）成功使用的转移学习模型[59, 126]，可以被用来设计领域适应性的FID模型。使用基于GAN的判别器[182]是另一种有前途的方法，以建立具有共享特征的通用FID模型。</p><h3 id="4-Embracing-of-novel-machine-learning-models"><a href="#4-Embracing-of-novel-machine-learning-models" class="headerlink" title="(4) Embracing of novel machine learning models."></a>(4) Embracing of novel machine learning models.</h3><p>FID过程从本质上讲就是学习分类器，以识别给定主张的可信度。我们发现，许多研究建立了深度学习模型[20, 72, 101, 106, 123, 144, 195]来提高自动事实核查的性能。然而，仍有更多可以探索的地方。在下文中，我们将介绍几个有代表性的例子，它们利用先进的机器学习技术来进行FID。</p><ul><li>Multi-task learning.  多任务学习[109]旨在通过使用相关任务中包含的领域知识来提高模型的泛化性能。现有的方法通过对任务的相关性进行建模，如特征共享、子空间共享和参数共享等，来寻找多个任务之间的共同点，作为促进每个任务学习效果的一些补充知识。例如，Ma等人[109]认为FID任务与立场分类任务高度相关，所以他们提出了一个神经多任务学习框架，以更好地进行事实核查。在权重共享的机制下，他们提出了两个基于RNN的多任务结构来联合训练这两个任务，这可以为谣言表征提取普通以及特定任务的特征。在这项工作的启发下，我们可以研究FID和其他任务之间的联系和协作，并进一步设计基于多任务学习的算法来提高FID模型性能。</li><li>Few-shot learning.  [183]致力于解决数据稀缺的问题，利用少数监督信息来识别未见过的类的样本。现有的少量学习方法通常将其训练程序分解为多个元任务学习程序，类似于元学习[43]，从不同任务的数据中提取可转移的知识。因此，这允许只用少量的标记数据对新类进行分类。据我们所知，在FID中应用的少量学习方法较少，因此我们可以从其他相关领域学习，如文本分类。为了提高分类器的归纳和泛化能力，Geng等人[48]提出了一个基于动态路由算法的分类架构，称为归纳网络，它从少数样本中学习泛化的类级表示。归纳网络主要包含一个编码器模块、一个归纳模块和一个关系模块。具体来说，编码器模块生成样本和查询表征，然后归纳模块利用一个转换矩阵将样本级表征映射到类级表征。最后，关系模块计算出查询和每个类别之间的匹配度。这项工作表明，Few-shot learning在NLP中有很大的潜力，我们可以继续研究基于Few-shot learning的FID方法。</li><li>Semi-supervised models.大多数现有的FID工作集中在监督分类上，他们通常通过大量的标记数据（例如，假的或不假的）来训练分类器识别虚假信息。然而，在很多情况下，我们只有少量的标记数据。半监督模型经常被用来处理标签稀少的问题。例如，Guacho等人[55]提出了一种半监督的FID方法，它利用基于张量分解的文本嵌入来捕捉社交帖子的全局和局部特征。在构建所有帖子的K-近邻（K-NN）图后，他们使用信念传播算法将已知的标签传播到图中，以获得事件的最终可信度。此外，图神经网络的发展也为半监督检测模型的研究提供了机会。GNN，如DeepWalk[129]、LINE[171]和node2vec[54]，利用不同的采样算法来生成节点序列，然后通过跳格模型学习每个节点或传播路径的表示。他们在损失函数中引入了一阶接近性（两个相邻节点之间相似性的表征）和二阶接近性（两个节点之间结构相似性的表征），以确保神经网络能够充分提取图的特征。特别是GCNs[83]，如第2节所讨论的，在相邻的卷积层中通过图形的拉普拉斯矩阵的非线性变换来传递信息。每个卷积层只计算一阶接近度，所以GCN可以通过多个卷积层学习节点或传播路径的高级特征表示。特别是，GNN能够通过明确的图正则化方法[184]平滑标签信息，用于图的半监督学习。因此，FID模型可以建立信息传播图，并结合GNNs来检测虚假信息。</li><li>Unsupervised models. 如果能够直接建立可靠的无监督检测模型，对于快速驳斥虚假信息具有重要意义。无监督模型可以从人与内容的互动（如发布或转发社交媒体帖子）和人与人的互动（如关注或提及某些用户）来评估帖子的可信度。一方面，GAN和VAE的进步为无监督的FID模型带来了新的可能性。另一方面，PGMs仍然可以在FID中发挥重要作用。例如，Chen等人[22]从用户的发帖行为中判断一个帖子是否是假的。这种无监督的方法利用AE来学习一个人最近的发帖和他们的评论的潜在代表。当其重建误差收敛时，该模型可用于评估新帖子的可信度。如果模型的重建误差超过一定的阈值，这个帖子可能是一个假消息。Yang等人[191]将新闻真实性和用户可信度视为潜在变量，并利用用户评论来推断他们对新闻真实性的看法。换句话说，新闻的真实性取决于用户意见的可信度，而意见的可信度则依赖于用户的声誉。他们利用贝叶斯网络对互动过程进行建模，在没有任何标记数据的情况下推断出新闻文章的真实性。实际上，用户的意见可能会受到其他用户的影响，而且他们对不同主题的虚假信息的识别能力也是不同的。在使用PGM时可以进一步考虑这些条件。</li><li>Hybrid learning models. 混合学习模型的发展，结合了线性模型和深度学习模型，已经成为人工智能领域新的研究趋势，即显性特征和潜在特征的结合使用。它利用了两类学习模型的互补性。例如，Wide &amp; Deep[24]是一个表现良好的推荐系统框架，其中Wide部分提取显性特征，Deep部分学习非线性的潜性特征。在FID中也有初步的混合学习模型。Yang等人[192]提出了用于检测虚假信息的TI-CNN模型，该模型在融合显性和隐性特征空间的基础上，对文本和视觉信息进行整体训练。此外，Zhang等人[197]提出了一个基于贝叶斯深度学习的FID模型，该模型使用LSTM来编码索赔和用户评论，并利用贝叶斯模型来推断分类结果。由于混合学习模型仍处于早期阶段，在这个方向上还需要进一步的研究，如概率图模型和深度学习模型的融合。</li></ul><h3 id="5-Adversarial-attack-and-defense-in-FID-models"><a href="#5-Adversarial-attack-and-defense-in-FID-models" class="headerlink" title="(5) Adversarial attack and defense in FID models."></a>(5) Adversarial attack and defense in FID models.</h3><p>基于深度学习的FID模型有助于有效提高事实核查的性能。然而，Szegedy等人[169]已经证明，训练有素的神经网络可能无法抵御对抗性攻击，这意味着在输入向量中添加一些小的扰动会使模型得到错误的结果[4]。现有的FID研究很少强调深度模型的鲁棒性，这些模型可能被对抗性攻击所欺骗。</p><p>虽然很少有关于FID模型中对抗性攻击和防御的研究，但关于其他任务（如图像分类[52，169]、语音识别[15]、文本分类[86]和强化学习[10]）的相关工作已经被调查。有几项工作侧重于对抗性攻击对模型的影响。例如，Dai等人[28]提出了一种基于强化学习（RL）的图数据的对抗性攻击方法，该方法通过增加或减少图中的边的数量来学习最佳攻击策略。为了生成通用的文本对抗性扰动，Behjati等人[9]提出了一种基于梯度投影的攻击方法。Jia等人[71]通过在问题中添加不会对人类理解造成困难的句子或短语来攻击问答系统。</p><p>以上攻击研究可以指导FID模型的对抗性攻击防御研究。Zhou等人[202]进一步将FID模型的对抗性攻击分为事实失真、主客体交换和原因混淆。为了抵御对抗性攻击，他们进一步提出了一个众包知识图谱来及时收集新闻事件的事实。Qiu等人[139]将防御方法分为三类，包括修改数据（如对抗性训练、梯度隐藏）、修改模型（如正则化、防御性蒸馏）和使用辅助工具（如防御-GAN[148]）。无论是对模型的攻击还是对数据的操作，都对FID系统的稳健性提出了更高的要求。因此，在FID的对抗性攻击和防御方面仍有更多的工作要做。</p><h3 id="6-Explanatory-detection-models"><a href="#6-Explanatory-detection-models" class="headerlink" title="(6) Explanatory detection models."></a>(6) Explanatory detection models.</h3><p>提供决策结果的证据或解释可以增加用户对检测模型的信任。尽管关于解释型FID模型的工作很少，但在其他相关领域，如推荐系统，解释的应用已经被研究过。</p><p>可解释的推荐，提供关于为什么推荐一个项目的解释，在最近几年引起了越来越多的关注[198]。它可以提高用户对推荐系统的接受度、信任度和满意度，增强系统的说服力。例如，Chen等人[23]提出了一种基于atten- tive神经网络的可视觉解释的推荐方法，以模拟用户对图像的注意力。用户可以通过提供个性化和直观的视觉亮点来理解产品被推荐的原因。Catherine等人[18]研究了如何在外部知识图谱的支持下产生可解释的推荐，他们提出了一个个性化的PageRank程序，将项目和知识图谱实体一起排名。Wang等人[181]的工作提出了一个基于强化学习（RL）的模型诊断性解释推荐系统，它可以灵活地控制解释的呈现质量。最重要的是，这种可解释推荐系统所使用的方法可以启发我们设计更好的可解释FID系统。</p><p>从更高的角度来看，机器学习模型已经在不同的应用领域（超越了推荐系统和FID）提供了突破性进展。尽管取得了巨大的成功，我们仍然缺乏对其固有行为的理解，例如分类器是如何得出一个特定的决定的。这导致了可解释机器学习（IML）研究方向的激增。IML使机器学习模型有能力以人类可理解的术语进行解释或呈现[2, 34]。Du等人[35]定义了两种类型的可解释性：模型级解释和预测级解释。模型级解释，为增加模型本身的透明度，可以阐明机器学习模型的内部工作机制。预测层面的解释有助于揭示特定输入和模型输出之间的关系。对于FID来说，它更关注预测层面的解释，它可以说明一个决定是如何得出的（使用来源的可靠性、证据和立场等要素）。构建预测级可解释模型的一个代表性方案是采用注意力机制，它被广泛用于解释序列模型（如RNN）做出的决策结果。我们还应该研究植根于IML的其他方法，以提高FID系统的可解释性。</p><h3 id="7-Aggregation-of-crowd-wisdom"><a href="#7-Aggregation-of-crowd-wisdom" class="headerlink" title="(7) Aggregation of crowd wisdom."></a>(7) Aggregation of crowd wisdom.</h3><p>如何聚合人群智慧对FID系统来说非常重要，因为人群贡献的数据往往有噪音。大多数用户的意见可以有效地用于识别虚假信息，但也存在真理掌握在少数人手中的情况。因此，未来仍有必要探索FID的人群智慧的聚合和优化方法。</p><p>我们可以从真相发现系统中学习。随着利用人类智慧从相互冲突的多源数据中提取可靠信息的能力，真相发现已经成为一个越来越重要的研究课题。对于FID，我们也有关于一个事件的多个帖子，目标是识别这个事件的真相。因此，这两个研究问题有相似之处，我们可以借用真相发现系统的知识来促进FID的研究。例如，Liu等人[98]提出了一种专家验证辅助的图像标签真相发现方法，旨在尽可能地从嘈杂的众包标签中推导出正确的标签。特别是，它以人机协作的方式利用了一种半监督学习算法，可以最大限度地发挥专家标签的影响，减少专家的努力。Zhang等人[196]提出了一个名为 “TextTruth “的基于概率图的真相发现模型，它通过全面学习关键因素（一组关键词）的可信度来选择高度可信的问题答案。TextTruth以无监督的方式将答案提供者的可信度和答案因素的可信度一起推断出来。Yin等人[193]提出了一个以无监督的方式进行人群智慧聚合的模型，称为标签感知自动编码器（Label-Aware Autoencoders，LAA），它提取了多源标签的基本特征和模式，并通过一个分类器和一个重构器推断出可信的标签。为了解决同一信息源在不同主题上具有不同可信度的挑战，Ma等人[105]提出了一种名为FaitCrowd的众包数据聚合方法。FaitCrowd通过在概率贝叶斯模型上对问题内容和发布者的答案进行建模，共同学习问题的主题分布、答案提供者的基于主题的知识和真实答案。</p><h3 id="8-Propagation-by-social-bots"><a href="#8-Propagation-by-social-bots" class="headerlink" title="(8) Propagation by social bots."></a>(8) Propagation by social bots.</h3><p>现有的FID研究集中在索赔的内容和发布模式上。然而，对发布和传播帖子的 “账户 “的特征并没有很好的调查。最近，人们已经做出了一些努力来研究虚假信息像病毒一样迅速传播的根本原因。例如，Shao等人[155]对2016年美国总统选举期间的1400万条推文进行了详细分析，他们观察到<br>“社交机器人 “显然促进了虚假信息的快速传播。社交机器人通常指的是一种计算机算法或软件程序，为了某种目的而模仿人类的互动行为（例如，生产内容、关注其他账户、转发帖子等）[40]。这些恶意的机器人账户在虚假推文传播的早期阶段异常活跃。此外，在对社交机器人的社会互动和情感互动进行建模后，Stella等人[167]发现，他们增加了负面和暴力内容在社交网络上的曝光。</p><p>以上发现表明，抑制社交机器人可以成为缓解虚假信息传播的一个有前景的方法。一些研究者分析了社交机器人的行为模式并提出了一些检测方法。例如，Ferrara等人[40]将现有的社交机器人检测方法分为四类，包括基于图的模型、众包、基于特征的模型和混合模型。Almaatoug等人[5]设计了一种社交机器人检测方法，该方法结合了内容属性、社交互动和个人资料属性。同样，Minnich等人[115]提出了BotWalk检测方法，该方法利用几个特征来区分用户和机器人账户，如元数据、内容、时间信息和网络互动。Cresci等人[27]对社交机器人的集体行为进行了穿透性分析，并介绍了一种用于垃圾邮件检测的社会指纹技术。特别是，他们利用数字DNA技术来描述所有账户的集体行为，然后他们提出了一种受DNA启发的方法来识别真实账户和垃圾邮件。Cresci等人[26]也利用集体账户的特征来检测恶意的机器人。由于社交机器人促进了低可信度声明的传播和负面内容的曝光[155, 167]，未来的工作可以将FID与社交机器人检测相结合，为快速驳斥虚假信息提供新的解决方案。</p><h3 id="9-False-Information-Mitigation"><a href="#9-False-Information-Mitigation" class="headerlink" title="(9) False Information Mitigation."></a>(9) False Information Mitigation.</h3><p> 有效的FID是预防虚假信息的一部分，也需要科学研究来减少虚假信息的影响，这属于虚假信息缓解的研究范畴。一些著作对虚假信息缓解和干预的方法进行了回顾。例如，Sharma等人[156]从信息扩散的角度总结了三种缓解方法，即 “去污” “竞争级联 “和 “多阶段干扰”。Shu等人[159]将现有的缓解策略分为 “用户识别”、”网络规模估计 “和 “网络干预”。由于每个用户在虚假信息的传播中扮演着不同的角色，如意见领袖、监护人、恶意传播者和旁观者，因此有必要采取灵活的缓解措施。例如，意见领袖和监护人适合被推荐使用事实信息，以帮助传播真相[175]，而恶意账户或机器人应被遏制[122]。正如Ozturk等人[125]曾经说过的，在Twitter上用事实核查信息展示虚假信息，有助于减少虚假信息的持续传播。基于这一观察，Budak等人[13]提出了多运动独立级联模型，它包含一个虚假信息的运动和一个真实信息的运动。此外，我们还可以利用多变量霍克斯过程[37]来模拟外部干预影响下的虚假信息的传播动态。</p><p>在未来的研究中，FID可以与上述缓解策略相结合，在防止社交网络上的虚假信息传播方面探索出更多有前景的工作。此外，Sundar[168]曾经证实，社交帖子中存在的来源归属改善了用户对在线信息的可信度和质量的看法。因此，来源归属和因果推理[158]也可以用来指导社交媒体上虚假信息的检测。</p><hr><h1 id="Detection-and-Resolution-of-Rumours-in-Social-Media-A-Survey"><a href="#Detection-and-Resolution-of-Rumours-in-Social-Media-A-Survey" class="headerlink" title="Detection and Resolution of Rumours in Social Media: A Survey"></a>Detection and Resolution of Rumours in Social Media: A Survey</h1><p><strong>尽管人们越来越多地使用社交媒体平台来收集信息和新闻，但其未经审核的性质往往导致谣言的出现和传播，即在发布时未经核实的信息项目。</strong>同时，<strong>社交媒体平台的开放性提供了研究用户如何分享和讨论谣言的机会</strong>，并探索如何利用自然语言处理和数据挖掘技术自动评估其真实性。在这篇文章中，我们介绍并讨论了两种在社交媒体上流传的谣言：一种是长期流传的谣言，另一种是<strong>在突发事件等快节奏事件中催生的新出现的谣言</strong>，这些报道是零散发布的，在早期阶段往往是未经核实的状态。我们概述了对社交媒体谣言的研究，最终目标是开发一个由四个部分组成的谣言分类系统<strong>：谣言检测、谣言跟踪、谣言立场分类和谣言真实性分类</strong>。我们深入研究了科学文献中提出的开发这四个组成部分的方法。我们总结了迄今为止在开发谣言分类系统方面所做的努力和取得的成就，并在结论中对未来在社会媒体挖掘中检测和解决谣言的研究途径提出建议。</p><h2 id="INTRODUCTION-1"><a href="#INTRODUCTION-1" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h2><p>社会媒体平台越来越多地被用作收集信息的工具，例如，社会问题（Lazer等人，2009年），以及在突发新闻事件中了解最新进展（Phuvipadawat和Murata，2010年）。之所以能做到这一点，是因为这些平台使任何拥有互联网连接设备的人都能实时分享他们的想法和/或发布他们可能目睹的正在发生的事件的最新情况。因此，社交媒体已经成为记者（Diakopoulos等人，2012；Tolmie等人，2017）以及普通公民（Hermida，2010）的有力工具。然而，虽然社交媒体提供了前所未有的信息来源，但由于平台缺乏系统性的努力来调节帖子，也导致了错误信息的传播（Procter等人，2013b；Webb等人，2016），然后需要额外的努力来确定其来源和真实性。与突发新闻故事相关的更新往往是零散发布的，这就造成了这些更新中很大一部分在发布时未经核实，其中一些可能后来被证明是错误的（Silverman 2015a）。在没有权威声明证实或驳斥一个正在进行的谣言的情况下，据观察，社交媒体用户往往会通过一个集体的、主观间的感觉制造过程来分享他们自己对谣言真实性的想法（Tolmie等人，2018），这可能会导致谣言背后的真相曝光（Procter等人，2013a；Li和Sakamoto，2015）。</p><p>然而，尽管社交媒体具有这种明显的稳健性<strong>，但其日益增长的产生谣言的趋势促使人们开发一些系统，这些系统通过收集和分析用户的集体判断</strong>（Lukasik等人，2016），能够通过加速感知过程来减少谣言的传播（Derczynski和Bontcheva 2014）。<strong>谣言检测系统可以在早期阶段识别出真实性不确定的帖子，可以有效地用来警告用户，其中的信息可能是虚假的</strong>（Zhao等人，2015）。同样，一个汇总了用户发布的不断变化的集体判断的谣言分类系统可以帮助跟踪谣言的真实性状态，因为它被暴露在这个集体感知的过程中（Metaxas等人，2015）。在这篇文章中，我们概述了开发这样一个谣言分类系统所需的组件，并讨论了到目前为止为建立该系统所做的努力的成功。</p><h3 id="1-1-Defining-and-Characterising-Rumours"><a href="#1-1-Defining-and-Characterising-Rumours" class="headerlink" title="1.1 Defining and Characterising Rumours"></a>1.1 Defining and Characterising Rumours</h3><p>谣言的定义。最近研究文献中的出版物使用了彼此不同的谣言的定义。例如，最近的一些工作<strong>将谣言错误地定义为被认为是虚假的信息</strong>（如Cai等人（2014）和Liang等人（2015）），而大多数文献将谣言定义为 “<strong>流通中的未经核实的、工具性的信息声明</strong>“（DiFonzo和Bordia，2007）。在我们的文章中，<strong>我们采用了谣言的定义特征，即它们在发布时是未经核实的</strong>，这与主要词典给出的定义是一致的，比如《牛津英语词典》将谣言定义为 “目前流传的不确定或可疑的故事或报告 “1，或者《梅里亚姆-韦伯斯特词典》将其定义为 “目前没有已知权威机构证明其真实性的声明或报告 “2。 这种未经核实的信息可能被证明是真的，或部分或完全错误；或者，它也可能仍未解决。因此，在这篇文章中，我们坚持这个流行的谣言定义，将其归类为 “<strong>在发布时其真实性尚未得到验证的流通信息</strong>“。这个定义的选择与近期社会媒体研究的一些文献不同；但是，它与主要的字典和社会科学的一个长期研究领域相一致（Allport和Postman 1946；Donovan 2007）。<strong>谣言可以被理解为一个尚未被验证的信息，因此它的真实价值在流传过程中仍未得到解决。当没有证据支持它，或者没有来自权威来源（如那些有信誉的人）或在特定背景下可能有可信度的来源（如目击者）的正式确认时，谣言就被定义为未经证实。</strong></p><p>谣言类型。许多不同的因素可用于按类型对谣言进行分类，包括其最终的真实性价值（真实、虚假或未解决）（Zubiaga等人，2016c）或其可信度（例如，高或低）（Jaeger等人，1980）。另一个按类型对谣言进行分类的尝试是Knapp（1944），他提出了三种类型的谣言的分类法。(1) “白日梦 “谣言：即导致一厢情愿的谣言；(2) “无聊 “谣言：即增加焦虑或恐惧的谣言；以及(3) “楔子驱动 “谣言：即产生仇恨的谣言。当涉及到开发一个谣言分类系统时，主要决定要利用的方法的因素是它们的时间特征：</p><ul><li>突发新闻中出现的新谣言。在突发新闻中出现的谣言通常是以前没有被观察到的。因此，谣言需要被自动检测出来，而且考虑到系统可用的训练数据可能与后来观察到的数据不同，谣言分类系统需要能够处理新的、未见过的谣言。在这些情况下，早期检测和解决谣言是至关重要的，需要实时处理帖子流。在突发新闻中出现的谣言的一个例子是，当一个可疑的恐怖分子的身份被报道时。谣言分类系统可能已经观察到其他类似的疑似恐怖分子的案件，但案件和涉及的名字很可能会有所不同。因此，在这些情况下，谣言分类器的设计需要考虑新案例的出现，以及它们可能带来的新词汇。</li><li>长时间讨论的长期谣言。有些谣言可能流传了很长时间，但其真实性却没有得到确定的证实。尽管（或可能是因为）很难确定实际的真相，这些谣言还是会引起人们巨大的、持续的兴趣。例如，关于奥巴马是穆斯林的传言就是如此。虽然这个说法没有证据，但似乎没有任何证据能让大家满意地推翻它。3 对于像这样的谣言，一个谣言分类系统可能不需要检测谣言，因为它可能是先验的。此外，该系统可以利用历史上关于该谣言的讨论来对正在进行的讨论进行分类，其中词汇的差异性要小得多，因此建立在旧数据上的分类器仍然可以用于新数据。与新出现的谣言相比，对于长期存在的谣言，处理通常是回顾性的，所以帖子不一定需要实时处理。</li></ul><p>在整篇文章中，我们提到了这两种类型的谣言，描述了不同的访问者如何处理每一种谣言。</p><h3 id="1-2-Studying-Rumours-From-Early-Studies-to-Social-Media"><a href="#1-2-Studying-Rumours-From-Early-Studies-to-Social-Media" class="headerlink" title="1.2 Studying Rumours: From Early Studies to Social Media"></a>1.2 Studying Rumours: From Early Studies to Social Media</h3><p>简史。谣言和相关现象已经被从许多不同的角度进行了研究（Donovan 2007），从心理学研究（Rosnow和Foster 2005）到计算分析（Qazvinian等人2011）。传统上，研究人们对谣言的反应是非常困难的，因为这将涉及到在谣言展开时实时收集反应，假设参与者已经被招募了。为了克服这一障碍，All-port（Allport and Postman 1946, 1947）在战时谣言的背景下进行了早期调查。他提出了研究谣言的重要性，强调 “有新闻价值的事件很可能会滋生谣言”，”流通中的谣言数量会随着主题对相关个人的重要性而变化，同时与相关主题有关的证据的模糊性。这使他提出了一个尚待回答的动机问题。”谣言可以被科学地理解和控制吗？” (Allport and Postman 1946)。他在1947年的实验（Allport and Postman 1947）揭示了一个关于谣言流通和信仰的有趣事实。他研究了美国总统富兰克林-D-罗斯福如何消除关于美国海军在1941年日本袭击珍珠港时遭受损失的谣言。研究表明，在总统发表讲话之前，69%的本科生认为损失比官方公布的要大；但五天后，在总统发表讲话的同时，只有46%的同等学生认为这一说法是真的。这项研究揭示了一个有声望的人发表的官方声明在影响社会对谣言准确性的看法方面的重要性。</p><p>早期的研究集中在不同的目标上。一些工作研究了决定谣言传播的因素，例如，包括谣言的可信度对其后续传播的影响，其中可信度是指谣言可能被视为真实的程度。Prasad(1935)和Sinha(1952)的早期研究认为，在自然灾害的背景下，可信度不是影响造谣的一个因素。然而，最近，Jaeger等人（1980）发现，当可信度较高时，谣言的传播更为频繁。此外，Jaeger等人（1980年）和Scanlon（1977年）发现，接受者认为谣言的重要性是决定它是否被传播的一个因素，最不重要的谣言被传播得更多。</p><p>互联网上的流言。互联网的广泛采用使自然环境下的谣言研究进入了一个新的阶段（Bordia 1996），并且随着社交媒体的出现而显得尤为重要，它不仅为分享信息提供了强大的新工具，而且也便于从大量的参与者那里收集数据。例如，Takayasu等人（2015）利用社交媒体研究了2011年日本地震期间流传的谣言的扩散情况，该谣言称地震后的雨水可能包括有害的化学物质，并导致人们被警告要携带雨伞。作者研究了早期报道该谣言的推文以及后来报道该谣言的推文的转发（RTs）情况。虽然他们的研究显示，后来的更正推文的出现减少了报告虚假谣言的推文的传播，但分析仅限于一个谣言，并没有为理解社交媒体中谣言的性质提供足够的洞察力。然而，他们的案例研究确实展示了一个对社会有重要影响的谣言的例子，因为市民们都在关注有关地震的最新动态，以保持安全。</p><p>社会媒体中的谣言。近年来，社交媒体作为研究谣言的一个来源已经得到了重视，这是因为它是收集与谣言相关的大型数据集的一个有趣的来源，而且，除其他因素外，其巨大的用户群和分享的便利性使其成为谣言滋生的沃土。研究普遍发现，由于用户在分享意见、猜想和证据时具有众包的自我修正特性，Twitter在驳斥不准确信息方面表现良好。例如，Castillo等人（2013）发现，在2010年智利地震的案例中，支持和驳斥虚假谣言的推文比例为1：1（每条支持的推文对应一条驳斥的推文）。Procter等人（2013b）在分析2011年英格兰骚乱期间的虚假谣言时得出了类似的结论，但他们指出，任何自我纠正的效果都很缓慢。相反，在他们对2013年波士顿马拉松爆炸案的研究中，Starbird等人（2014）发现Twitter用户在区分真相和骗局方面做得并不好。在研究三种不同的谣言时，他们发现支持虚假谣言的推文所占比例分别为44：1、18：1和5：1。Zubiaga等人（2016c）进一步深入研究了谣言传播和支持的时间方面，描述了对九个突发新闻事件中的谣言的分析。这项研究的结论是，虽然总体趋势是用户在早期阶段支持未经核实的谣言，但随着时间的推移，会转向支持真实的谣言和驳斥虚假的谣言。因此，社交媒体聚合大量用户社区的判断的能力（Li和Sakamoto 2015）促使人们进一步研究机器学习方法，以改善谣言分类系统。尽管谣言和错误信息的传播给此类系统的开发带来了挑战，但将开发过程分解成更小的组成部分并利用合适的技术，在开发有效系统方面取得了令人鼓舞的进展，这些系统可以帮助人们在评估从社交媒体收集的信息的真实性方面做出决定。</p><h3 id="1-3-Scope-and-Organisation"><a href="#1-3-Scope-and-Organisation" class="headerlink" title="1.3 Scope and Organisation"></a>1.3 Scope and Organisation</h3><p>这篇调查文章的起因是<strong>人们越来越多地使用Facebook或Twitter等社交媒体平台来发布和发现信息。虽然我们承认它们在收集独家信息方面的作用毋庸置疑，但它们的开放性、缺乏节制以及信息可以随时随地发布的便利性，无疑给信息质量保障带来了很大的问题。考虑到谣言的传播可能带来的不安和潜在的危害，近年来，开发处理谣言的数据挖掘工具的动机越来越强烈。</strong>这篇调查文章旨在深入研究谣言对开发用于收集社交媒体信息的数据挖掘应用所带来的这些挑战，并总结迄今为止在这个方向上的努力。</p><p>我们在第2节继续这一调查，研究社交媒体给众多领域带来的机会，同时也引入了必须处理谣言的新挑战。接着是对谣言分类系统的分析，我们首先描述了将谣言数据集放在一起的不同方法，以便进行进一步的实验；第3节描述了数据集的生成，首先是访问社交媒体API的方法，然后概述了收集和注释从社交媒体收集的数据的方法。我们在第4节中总结了对社交媒体中谣言的扩散和动态的特征和理解的研究结果。之后，我们在第5节中描述了构成谣言分类系统的组件。然后，在随后的章节中进一步描述这些组件并讨论现有的方法；第6节中的谣言检测系统、第7节中的谣言追踪系统、第8节中的谣言立场分类以及第9节中的真实性分类。我们在第10节中继续列举并描述了现有的处理谣言分类的应用和相关应用。最后，我们在第11节中总结了到目前为止的成就，并概述了未来的研究方向。</p><h2 id="2-SOCIAL-MEDIA-AS-AN-INFORMATION-SOURCE-CHALLENGES-POSED-BY-RUMOURS"><a href="#2-SOCIAL-MEDIA-AS-AN-INFORMATION-SOURCE-CHALLENGES-POSED-BY-RUMOURS" class="headerlink" title="2 SOCIAL MEDIA AS AN INFORMATION SOURCE: CHALLENGES POSED BY RUMOURS"></a>2 SOCIAL MEDIA AS AN INFORMATION SOURCE: CHALLENGES POSED BY RUMOURS</h2><p>社会媒体越来越多地被一系列专业人士和公众所利用，成为了解最新发展和时事的信息来源（Van Dijck 2013；Fuchs 2013）。社交媒体的使用已经在许多不同的领域被发现是有用的；我们在下面描述一些最值得注意的使用。</p><p>新闻收集。社交媒体平台在新闻传播方面显示出巨大的潜力，在突发新闻报道方面有时甚至超过了专业新闻机构（Kwak等人，2010）。除其他外，这使人们能够从目击者和广泛的用户那里获得最新信息，这些用户可以获得潜在的独家信息（Diakopoulos等人，2012；Starbird等人，2012）。为了利用社交媒体平台的这一特点，研究人员研究了新闻收集工具的发展（Zubiaga等人，2013年；Diakopoulos等人，2012年；Marcus等人，2011年），分析了用户生成内容（UGC）在新闻报道中的使用（Hermida和Thurman，2008年；Tolmie等人，2017年），并探索了社交媒体催生合作和公民新闻的潜力，包括对社交媒体上发布的报道进行合作核查（Hermida，2012年；Spangenberg和Heise，2014年）。</p><p>突发事件和危机。近年来，社会媒体在紧急情况和危机中的使用也大幅增加（Imran等人，2015；Castillo，2016；Procter等人，2013a），其应用包括从目击者那里获得报告或找到寻求帮助的人。人们发现社交媒体对不同情况下的信息收集和协调非常有用，包括紧急情况（Yates和Paquette 2011；Yin等人2012；Procter等人2013a）、抗议活动（Trottier和Fuchs 2014；Agarwal等人2014）和自然灾害（Vieweg等人2010；Middleton等人2014）。</p><p>公共舆论。研究人员也在利用社交媒体来收集用户对一系列社会问题的看法，然后将其汇总以衡量公众意见（Murphy等人，2014）。研究人员试图清理社交媒体数据（Gao等人，2014），并试图摆脱人口偏见（Olteanu等人，2016），以了解社交媒体如何塑造社会对问题、产品、人物等的看法。古德曼等人（2011）。人们发现，社交媒体对于衡量选举期间的民意（Anstead和O’Loughlin 2015），以及网上意见对组织声誉（Sung和Lee 2015）或对健康项目的态度（Shi等人2014）等方面的影响都很有用。</p><p>金融/股票市场。社交媒体也已经成为了解金融界和股票市场最新发展的重要信息来源。例如，推文中表达的情绪被用来预测股市反应（Azar和Lo 2016），收集投资者在社交媒体上发布的意见（Chen等人，2014）或分析社交媒体帖子对品牌和产品的影响（李等人，2015）。</p><p>由于社交媒体作为信息来源的潜力越来越大，其传播错误信息和未经证实的主张的倾向已经引起了许多研究。研究考察了用户的可信度认知（Westerman等人，2014），也评估了用户依赖社交媒体收集新闻等信息的程度（Gottfried and Shearer，2016）。因此，社交媒体中存在的谣言和有问题的说法所带来的困难导致了人们对建立谣言分类系统的技术的兴趣，并通过促进用户收集准确的信息来缓解这一问题。谈到谣言分类系统的发展，有两个主要用例需要考虑。</p><ul><li>处理长期存在的流言。在这种情况下，被追踪的谣言是预先知道的，并且社交媒体被作为收集意见的来源而加以挖掘。这个用例可能适用，例如，当想要追踪公众意见，或者当诸如潜在的收购等谣言在金融领域被长期讨论时。</li><li>处理新出现的传言。当某些事件或话题被追踪时，新的谣言突然出现。这种用例可能适用于新闻收集和紧急情况，在这种情况下，信息被零散地发布并需要被核实，或者其他突然出现的谣言，例如那些预计会对股票市场产生影响的政治决定。</li></ul><h2 id="3-DATA-COLLECTION-AND-ANNOTATION"><a href="#3-DATA-COLLECTION-AND-ANNOTATION" class="headerlink" title="3 DATA COLLECTION AND ANNOTATION"></a>3 DATA COLLECTION AND ANNOTATION</h2><p>本节介绍了用于收集社交媒体数据的不同策略，这些数据能够研究谣言，以及收集数据注释的方法。</p><h3 id="3-1-Access-to-Social-Media-APIs"><a href="#3-1-Access-to-Social-Media-APIs" class="headerlink" title="3.1 Access to Social Media APIs"></a>3.1 Access to Social Media APIs</h3><p>访问、收集和存储社交媒体平台数据的最佳方式通常是通过应用编程接口（API）（Lomborg和Bechmann，2014年）。API是易于使用的界面，通常伴随着描述如何请求感兴趣的数据的文档。它们被设计成可以被其他应用程序访问，而不是为人设计的网络接口；API提供了一套定义明确的方法，应用程序可以调用这些方法来请求数据。例如，在一个社交媒体平台上，可能需要检索某个特定用户发布的所有数据或包含某个关键词的所有帖子。</p><p>在使用API之前，关键的第一步是阅读其文档，了解其方法和限制。事实上，每个社交媒体平台都有自己的局限性，当想要开发一个利用社交媒体数据的谣言分类系统时，这是关键。用于研究谣言的三个关键平台是Twitter、新浪微博和Facebook；这里我们简要讨论一下这三个平台的特点和局限。</p><ul><li>Twitter提供了使用其API的详细文档4，它可以访问REST API以从其数据库中获取数据，也可以访问流式API以实时获取数据。在注册了一个Twitter应用程序5后，该程序将生成一组密钥，用于通过OAuth认证访问API，然后开发人员将有机会使用一系列方法（”端点”）来收集Twitter数据。这些端点中最慷慨的是可以访问整个推文流中随机抽样的1%；要获得更大比例的数据通常需要付费。为了确保收集到全面的推文，最好是通过流媒体API实时收集推文；同样，从这个API免费收集的推文数量有1%的限制。使用Twitter的API的主要优点是它是最开放的，这可能部分解释了为什么它被最广泛地用于研究；主要的注意事项是它主要被设计用来收集实时或最近的数据，因此收集比过去几周更早的数据更具挑战性。推特在收集每条推文时都会提供一系列元数据，包括推文语言、地点（如有）等，以及发布推文的用户的详细信息。</li><li>新浪微博是中国最流行的微型博客平台，它提供的API与Twitter有许多相似之处。然而，对它的一些方法的访问是不公开的。例如，搜索API需要先与管理员联系以获得批准。此外，新浪微博提供的一系列方法只能通过其REST API访问，它缺乏一个官方的流媒体API来检索实时数据。要通过新浪微博的流媒体API检索实时数据，必须使用第三方供应商，如Socialgist。7,8 与Twitter一样，新浪微博为每个帖子提供一组元数据，包括帖子的信息和用户的详细信息。</li><li>Facebook提供了一个记录在案的API，以及一套适用于多种编程语言和平台的软件开发工具包，使得利用其数据开发应用程序变得容易。与Twitter的API类似，Facebook也需要注册一个应用程序10来生成访问API所需的密钥。与Twitter相比，Facebook用户发布的大部分内容都是私密的，因此无法访问发布的具体内容，除非用户是认证账户的 “朋友”。获取Facebook上的帖子的变通方法通常是从所谓的Facebook页面收集数据，这些页面是由组织、政府、团体或协会创建的公开页面。与Twitter不同的是，从这些Facebook页面获取历史数据是可能的；但是，访问仅限于在这些页面上发布的内容。脸谱网提供的每个帖子的元数据更加有限，需要向API提出额外的请求才能获得这些数据。</li></ul><h2 id="4-CHARACTERISING-RUMOURS-UNDERSTANDING-RUMOUR-DIFFUSION-AND-FEATURES"><a href="#4-CHARACTERISING-RUMOURS-UNDERSTANDING-RUMOUR-DIFFUSION-AND-FEATURES" class="headerlink" title="4 CHARACTERISING RUMOURS: UNDERSTANDING RUMOUR DIFFUSION AND FEATURES"></a>4 CHARACTERISING RUMOURS: UNDERSTANDING RUMOUR DIFFUSION AND FEATURES</h2><p>最近的许多研究都关注了社会媒体中谣言的出现和传播的特点。从这些研究中得到的启示反过来也可以为谣言分类系统的发展提供参考。其中一些研究集中于对某一特定谣言的广泛分析，而另一些研究则是对较大的谣言集进行更广泛的分析。</p><p>对围绕谣言的话语进行研究是为了考察围绕谣言的讨论以及谣言随时间的演变。一些研究着眼于定义一个方案，以对谣言的反应类型进行分类。Maddock等人（2015年）研究了谣言的起源和随时间的变化，从而确定了对谣言的七种行为反应：错误信息、猜测、纠正、质疑、对冲、不相关或中立/其他。同样，Procter等人（2013b）提出，对谣言的反应可以分为四种类型，即支持、否认、呼吁提供更多信息和评论。还有人研究了谣言，以了解人们对谣言的反应。通过研究在中国微博平台上传播的谣言，Liao和Shi（2013）确定了七种类型的用户（名人、认证、大众媒体、组织、网站、网络明星和普通人）的干预，他们以七种不同的方式（提供信息、发表意见、情感状态、感性陈述、询问性陈述、指导性陈述和离题陈述）做出贡献。在另一项研究中，Zubiaga等人（2016c）研究了由Twitter上的谣言报道引发的 “对话”（即由回复关系连接的一系列推文），发现社交媒体用户的普遍倾向是支持和传播谣言，而不考虑其真实性价值。这包括声誉高的用户，如新闻机构，他们倾向于在谣言的早期阶段支持谣言，稍后在需要时发布更正声明。在早期的研究中，Mendoza等人（2010）发现了谣言支持和真实性之间的强烈关联，表明大多数用户支持真实的谣言，而更多的用户否认虚假的谣言。尽管这些研究之间存在明显的矛盾，但值得注意的是，Mendoza等人（2010年）研究了谣言的整个生命周期，因此汇总导致了良好的相关性；相反，Zubiaga等人（2016c）专注于谣言的早期再行动，表明用户在谣言的早期阶段确定真实性方面存在问题。利用Reddit的谣言数据，也发现了不同用户之间的差异，表明有三个不同的用户群体：一般支持虚假谣言的用户，一般反驳虚假谣言的用户，以及一般对虚假谣言开玩笑的用户（Dang等人，2016a）。也有人认为，更正通常是由新闻机构发布的，它们有时会被广泛传播（Takayasu等人，2015；Arif等人，2016；Andrews等人，2016），特别是如果这些更正来自志同道合的账户（Hannak等人，2014），偶尔甚至会导致原始帖子的删除或取消分享（Frias-Martinez等人，2012）。然而，更正并不总是具有与原始谣言相同的效果（Lewandowsky等人，2012；Shin等人，2016；Starbird等人，2014），这加强了开发处理新出现的谣言分类系统的必要性。</p><p>其他研究也关注了促使谣言传播的因素。谣言的传播通常取决于用户之间的关系强度，谣言更有可能在网络中的强关系中传播（Cheng等人，2013）。其他对谣言时间模式的研究表明，在社交媒体（Kwon等人，2013年；Kwon和Cha，2014年；Lukasik等人，2015年b）和互联网上的其他平台（Jo，2002年），谣言的流行度往往会随着时间的推移而波动，但在谣言流行度消退后又有可能被重新讨论。</p><p>研究还考察了谣言的出现。通过使用谣言理论方法来研究导致表达对追踪谣言的兴趣的因素，Oh等人（2013）认为缺乏官方来源和个人参与是最重要的因素，而其他因素，如焦虑，则不那么重要。海报的可信度和谣言的吸引力也被认为是促成谣言传播的因素（Petty和Cacioppo 2012）。Liu等人（2014）强化了这些发现，认为个人参与是最重要的因素。Chua等人（2016）分析了Twitter上的具体谣言信息，发现拥有较大粉丝网络的成熟用户的推文传播最广。</p><p>虽然许多研究都探讨了谣言的传播，但对这些研究的详尽分析并不在本调查文章的范围内，而是侧重于有关检测和解决谣言的方法的发展研究。要阅读更多关于研究谣言扩散的研究，我们推荐Serrano等人（2015）和Walia和Bhatia（2016）的调查。</p><h2 id="5-RUMOUR-CLASSIFICATION-SYSTEM-ARCHITECTURE"><a href="#5-RUMOUR-CLASSIFICATION-SYSTEM-ARCHITECTURE" class="headerlink" title="5 RUMOUR CLASSIFICATION: SYSTEM ARCHITECTURE"></a>5 RUMOUR CLASSIFICATION: SYSTEM ARCHITECTURE</h2><p>谣言分类系统的结构可以有轻微的变化，这取决于具体的使用情况。这里我们定义了一个典型的谣言分类系统的架构，它包括一个完整系统所需的所有组件；然而，正如我们在下面的描述中指出的，根据需求，其中一些组件可以省略。谣言分类系统通常从确定某条信息未被证实开始（即谣言检测），最后确定该条信息的估计可信度值（即可信度分类）。从谣言检测到真实性分类的整个过程是通过以下四个部分进行的（见图1）。</p><p><img src="https://i.loli.net/2021/11/04/Z9NnoAdsbS8t1EX.png" alt=""></p><ul><li>谣言检测。首先，一个谣言分类系统必须确定一条信息是否构成谣言。谣言检测组件的典型输入可以是社交媒体的帖子流，然后一个二元分类器必须确定每个帖子是被视为谣言还是非谣言。这个组件的输出是帖子流，其中每个帖子都被标记为谣言或非谣言。这个组件对于识别新出现的谣言很有用；但是，在处理先验已知的谣言时，它就没有必要了。</li><li>谣言追踪。一旦确定了一个谣言，或者因为它是先验的，或者因为它是由谣言检测组件确定的，谣言跟踪组件就会收集和过滤讨论该谣言的帖子。谣言的输入可以是一个帖子或描述它的句子，也可以是一组关键词，这个组件监测社交媒体以找到讨论该谣言的帖子，同时剔除不相关的帖子。该组件的输出是讨论该谣言的帖子的集合。</li><li>立场分类。当谣言追踪组件检索与谣言相关的帖子时，立场分类组件确定每个帖子对谣言的真实性的定位。将一组与同一谣言相关的帖子作为输入，它为每一个帖子输出一个标签，这些标签一般从预定义的立场类型集合中选择。这个组件对于促进后续处理真实性分类的组件的任务很有用。但是，如果公众的立场被认为是没有用的，例如，仅仅依靠专家的输入或权威来源的验证的情况下，它可以被省略。</li><li>真实性分类。最后的真实性分类组件试图确定谣言的实际真相价值。它可以使用在谣言跟踪组件中收集到的帖子集，以及在立场分类组件中产生的立场标签作为输入。它可以选择从其他来源，如新闻媒体，或其他网站和数据库中收集额外的数据。该组件的输出可以只是预测的真值，但它也可以包括上下文，如URL或其他数据源，以帮助最终用户通过与相关来源的双重检查来评估分类器的可靠性。</li></ul><p>在下面的章节中，我们将更详细地探讨这四个组成部分，到目前为止用于实施这些组成部分的方法以及迄今取得的成就。</p><h2 id="6-RUMOUR-DETECTION"><a href="#6-RUMOUR-DETECTION" class="headerlink" title="6 RUMOUR DETECTION"></a>6 RUMOUR DETECTION</h2><h3 id="6-1-Definition-of-the-Task-and-Evaluation"><a href="#6-1-Definition-of-the-Task-and-Evaluation" class="headerlink" title="6.1 Definition of the Task and Evaluation"></a>6.1 Definition of the Task and Evaluation</h3><p>谣言检测任务是指系统必须从一组社交媒体帖子中确定哪些帖子是报告谣言的，因此是在传播有待核实的信息。请注意，一条推文构成谣言的事实并不意味着它以后会被认为是真的或假的，而是意味着它在发布的时候是未经核实的。从形式上看，该任务将社交媒体帖子的时间线TL={t1,…,t|TL|}作为输入，分类器必须确定这些帖子中的每一个，ti，是谣言还是非谣言，从Y={R,NR}中分配标签。因此，该任务通常被表述为一个二元分类问题，其性能通过计算目标类别（即谣言）的精度、召回率和F1分数来评估。</p><h3 id="6-2-Datasets"><a href="#6-2-Datasets" class="headerlink" title="6.2 Datasets"></a>6.2 Datasets</h3><p>唯一公开的数据集是PHEME的谣言和非谣言数据集，其中包括与5个突发新闻故事相关的1972个谣言和3830个非谣言的集合（Zubiaga等人，2016b）。</p><h3 id="6-3-Approaches-to-Rumour-Detection"><a href="#6-3-Approaches-to-Rumour-Detection" class="headerlink" title="6.3 Approaches to Rumour Detection"></a>6.3 Approaches to Rumour Detection</h3><p>尽管人们对分析社交媒体中的谣言和建立工具来处理之前已经确定的谣言越来越感兴趣（Seo等人，2012；Takahashi和Igata，2012），但在自动谣言检测方面的工作却很少。谣言检测方面的一些工作（Qazvinian等人，2011年；Hamidian和Diab，2015年，2016年）仅限于寻找先验的谣言。他们用一组预定义的谣言（例如，奥巴马是穆斯林）来喂养分类器，将新的推文分类为与已知的谣言之一有关或无关（例如，我认为奥巴马不是穆斯林将与谣言有关，而奥巴马正在与一群穆斯林交谈则不是）。像这样的方法对于长期存在的谣言是很有用的，在这种情况下，需要的是识别与追踪已经确定的谣言有关的推文；在这篇调查文章中，我们把这项任务称为谣言追踪，因为被监测的谣言是已知的，但帖子流需要被过滤。仅仅依靠谣言追踪是不够的，因为在快节奏的背景下，<strong>如突发新闻，会出现新的、未见过的谣言，而与尚未被发现的谣言相关的具体关键词并不是预先知道的。为了处理这个问题，分类器将需要学习可概括的模式，以帮助在新出现的事件中识别谣言。</strong></p><p>第一个解决新谣言检测的工作是Zhao等人（2015）的工作。他们的方法建立在这样的假设上：谣言会引起怀疑论者的推文，他们会质疑或询问谣言的真实性；如果一条信息有一些相关的询问推文，那么就意味着该信息是谣言的。作者创建了一个由五个正则表达式（例如”（那个|这个|它）是真的吗”）组成的人工策划列表，用于识别询问性推文。然后，这些询问的推文按相似度进行聚类，每个聚类最终被视为一个候选谣言。他们用召回率来评估是不可行的，而只用精确度来评估。</p><p>相比之下，Zubiaga等人（2016b，2017）提出了另一种方法，在整个突发新闻故事中学习上下文，以确定一条推文是否构成谣言。他们的假设是，由于缺乏上下文，单单一条推文可能不足以知道其背后的故事是否是谣言。此外，他们避免了对询问性推文的依赖，他们认为并非所有的谣言都会引发，因此可能导致低召回率，因为没有引发询问性推文的谣言会被遗漏。他们的上下文学习方法依靠条件随机场（CRF）作为顺序分类器，学习事件中的报道动态，这样分类器就可以根据事件中迄今为止的情况，对每条新推文确定其是否是谣言。他们的方法导致了比Zhao等人（2015）的基线分类器更高的性能，也改善了一些作为基线的非序列分类器。在这种情况下，该分类器也被评估为召回率，取得了最先进的结果。</p><p>Tolosi等人（2016年）对不同事件中的谣言进行特征分析，发现很难区分谣言和非谣言，因为不同事件的特征变化很大。Zubiaga等人（2016b）解决了推特层面的这些发现，表明通过利用事件的背景，可以实现普遍性。<br>McCreadie等人（2015年）研究了使用众包平台来识别社交媒体中的谣言和非谣言的可行性，发现注释者取得了很高的注释者之间的一致性。他们还将谣言分为六个不同的类型。未经证实的信息、有争议的信息、错误的信息/虚假的信息、报道、有关联的争议和有意见的。然而，他们的工作仅限于对谣言和非谣言的众包注解，他们没有研究自动谣言检测系统的发展。这项研究的数据集没有公开提供。<br>然而，其他的工作被贴上了谣言检测的标签，专注于确定社交媒体上发布的信息是真的还是假的，而不是早期检测未经核实的信息，因此我们在第9节关于真实性分类中讨论。<br>技术现状。谣言检测的最先进方法是Zubiaga等人（2017）提出的方法，它利用与特定事件相关的早期帖子的上下文来确定一条推文是否构成谣言。</p><h2 id="11-DISCUSSION-SUMMARY-AND-FUTURE-RESEARCH-DIRECTIONS"><a href="#11-DISCUSSION-SUMMARY-AND-FUTURE-RESEARCH-DIRECTIONS" class="headerlink" title="11 DISCUSSION: SUMMARY AND FUTURE RESEARCH DIRECTIONS"></a>11 DISCUSSION: SUMMARY AND FUTURE RESEARCH DIRECTIONS</h2><p>随着社交媒体渗透率的提高，关于开发谣言检测和验证工具的研究变得越来越受欢迎，它使普通用户和专业从业人员能够实时收集新闻和事实，但也带来了未经核实的信息传播的副作用。这篇调查文章总结了科学文献中关于发展谣言分类系统的研究，对社会媒体谣言进行了定义和定性，并描述了发展其四个主要组成部分的不同方法。(1) 谣言检测，(2) 谣言追踪，(3) 谣言立场分类，以及(4) 谣言真实性分类。在这样做的过程中，该调查为这些组件的开发提供了一个技术现状的指导。该调查特别关注在社交媒体上流传的谣言的分类。大多数一般方面，如谣言的定义和分类架构，都是可以推广到新闻文章等类型的。然而，为四个部分中的每一部分描述的具体方法通常是为社交媒体设计的，不一定直接适用于其他体裁。在下文中，我们将回顾迄今为止所取得的进展，现有系统的缺点，概述对未来研究的建议，并评论谣言分类系统对其他类型的误导性信息的适用性和通用性，这些信息也在社交媒体中传播。</p><p>自从社交媒体作为信息和新闻收集的平台激增以来，检测和解决谣言的研究有了很大进展。一系列的研究采取了非常不同的方法来理解和描述社会谣言，而这种多样性有助于阐明谣言分类系统的未来发展。在构成谣言分类系统的所有四个组成部分中，已经进行了重新搜索，尽管大多数都集中在管道的最后两个组成部分，即谣言立场分类和真实性分类。尽管如本调查所示，该研究领域取得了实质性进展，但我们也表明，这仍然是一个需要进一步研究的开放性研究问题。我们在下一节中研究主要的开放性研究挑战。</p><h3 id="11-1-Open-Challenges-and-Future-Research-Directions"><a href="#11-1-Open-Challenges-and-Future-Research-Directions" class="headerlink" title="11.1 Open Challenges and Future Research Directions"></a>11.1 Open Challenges and Future Research Directions</h3><p>近年来，谣言分类的研究主要集中在管道的后期阶段，即谣言的立场分类和真实性分类。这些都是至关重要的阶段；然而，如果不执行前面的检测谣言和跟踪与这些谣言相关的帖子的任务，它们就不能被使用。后者在以前的工作中通常被跳过，要么把这些组件的开发留给未来的工作，要么假设谣言和相关帖子是由人输入的。我们认为，未来的研究应该集中在谣言的检测和跟踪上，以避免完全依赖人在回路中的情况，从而减轻这些初始任务。在这个方向上的进一步研究将能够开发出完全自动化的谣言分类系统。</p><p>谣言检测的研究应该从在谣言的特定背景下测试最先进的事件检测技术开始。除了事件检测系统所做的，谣言检测系统还需要确定检测到的事件是否构成谣言。如果只使用其内容，确定一个单独的社交媒体帖子是否报告了一个谣言是具有挑战性的。最近的研究表明，使用上下文（Zubiaga等人，2017年）和互动（Zhao等人，2015年）可以提供帮助，这些都是值得详细探索的方向。</p><p>对谣言追踪系统的研究是有限的，而且研究人员经常假设用于收集与谣言有关的帖子的关键词是先验的。社交媒体的一个明显的问题是用户之间使用不一致的词汇，例如，用户可能不明确地使用杀戮或射击来指称同一事件。在扩大数据收集方面的研究仍处于起步阶段，通过技术（如伪相关性反馈）使用查询扩展方法，还有待详细探讨，但初步研究显示了其潜力</p><p>谣言分类系统发展的一个重要限制是缺乏公开可用的数据集。除了我们在本调查中列出的最近发表的数据集，我们鼓励研究人员发布他们自己的数据集，以便对不同的数据集进行进一步研究，从而使科学界能够相互比较他们的方法。</p><p>虽然许多人试图自动确定谣言的真实性价值，但鉴于分类器不可避免地会出现错误，仅仅输出真实性的最终决定的系统可能并不总是足够的。为了使真实性分类器的输出更加可靠，我们认为系统需要提供更丰富的输出，其中还包括决策的原因（Procter等人，2013b）。真实性分类器不仅输出自动确定的真实性分数，而且还链接到可以证实这一决定的来源，这将更加稳健，因为它将使用户能够评估分类器决定的可靠性，并且—如果发现想要忽略它。例如，可以通过使用立场分类器的输出来丰富真实性分类器的输出，选择一些支持和反对的观点，作为摘要呈现给用户。鉴于实现完全准确的真实性分类器是一个不太可能的目标，我们认为这个方向的研究应该特别关注寻找信息源，以促进终端用户对谣言的真实性做出自己的判断。</p><p>现有真实性分类系统的另一个注意事项是，它们侧重于确定真实性，而不考虑谣言是否得到解决。在谣言尚未解决的情况下，真实性分类任务就变成了预测任务，由于缺乏支持系统决策的证据，这对终端用户来说可能并不可靠。由于谣言具有未经证实的立场，确定其真实性很难，或者需要权威来源的参与，未来的研究应该研究谣言真实性确定的时间性，可能会尝试在找到证据后很快确定真实性。<br>谈到立场分类，最近的工作表明，利用社交媒体流和对话中的上下文来开发个人帖子立场的最先进分类器是有效的。然而，这个方向的研究仍处于起步阶段，还需要更多的研究来最好地利用这种背景来最大化立场分类器的性能。谣言分类的研究主要依赖于社交媒体帖子的内容，而从用户元数据和互动中提取的进一步信息可能有助于提高分类器的性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;谣言、虚假信息综述&quot;&gt;&lt;a href=&quot;#谣言、虚假信息综述&quot; class=&quot;headerlink&quot; title=&quot;谣言、虚假信息综述&quot;&gt;&lt;/a&gt;谣言、虚假信息综述&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;A-Survey-on-Natural-Language-Pro</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>Learn Continually, Generalize Rapidly, Lifelong Knowledge Accumulation for Few-shot Learning</title>
    <link href="http://example.com/2021/10/30/Learn-Continually-Generalize-Rapidly-Lifelong-Knowledge-Accumulation-for-Few-shot-Learning/"/>
    <id>http://example.com/2021/10/30/Learn-Continually-Generalize-Rapidly-Lifelong-Knowledge-Accumulation-for-Few-shot-Learning/</id>
    <published>2021-10-30T03:32:36.000Z</published>
    <updated>2021-10-30T15:35:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Learn-Continually-Generalize-Rapidly-Lifelong-Knowledge-Accumulation-for-Few-shot-Learning"><a href="#Learn-Continually-Generalize-Rapidly-Lifelong-Knowledge-Accumulation-for-Few-shot-Learning" class="headerlink" title="Learn Continually, Generalize Rapidly: Lifelong Knowledge Accumulation for Few-shot Learning"></a>Learn Continually, Generalize Rapidly: Lifelong Knowledge Accumulation for Few-shot Learning</h1><p>随着时间的推移不断扩展知识，并利用这些知识迅速归纳到新的任务中，这是人类语言智能的一个关键特征。</p><p>现有的追求快速泛化到新任务的模型（如few-shot learning），大多是在固定的数据集上进行单次训练，无法动态地扩展其知识；而持续学习算法则不是专门为快速泛化设计的。</p><p>作者提出了一个新的学习设置，即 “ Continual Learning of Few-Shot Learners”（CLIF），以在一个统一的设置中解决这两种学习设置的挑战。</p><p>CLIF假设一个模型从一连串不同的NLP任务中依次学习，积累知识以提高对新任务的概括能力，同时也保留了之前学习的任务的性能。</p><p>本文研究了在持续学习设置中泛化能力是如何受到影响的，评估了一些持续学习算法，并提出了一种新颖的<strong>带有正则化的Adapter的双级超网络</strong>。</p><p><img src="https://i.loli.net/2021/10/30/3o5X2RKGhSDivAP.png" alt=""></p><p>挑战：模型在一连串的NLP任务中学习（逐一到达；不重复访问），然后在以下方面进行评估：（1）对新的（few-shot learning）任务的泛化；以及（2）保留其在解决已见任务上的性能。</p><blockquote><p>作者认为此类任务与LifeLong的区别:</p><p>此任务研究了NLP模型是否可以在一连串的任务中不断积累可归纳的知识，并迅速学习归纳到新的任务。</p><p>相关的工作是希望从连续到达的任务中学习，被称为持续学习（CL），主要关注的是当模型在新任务中被持续更新时，保留在所见任务中的表现。在后续的分析中，发现，现有的大多数CL方法几乎不利于模型的泛化能力，即使它们被证明可以缓解灾难性遗忘。</p></blockquote><hr><h2 id="Problem-Formulation"><a href="#Problem-Formulation" class="headerlink" title="Problem Formulation"></a>Problem Formulation</h2><h3 id="The-CLIF-Problem"><a href="#The-CLIF-Problem" class="headerlink" title="The CLIF Problem"></a>The CLIF Problem</h3><p>我们假设有一个NLP模型 $f$ 随着时间的推移在不同的任务上不断地训练（即持续学习），然后通过少量的例子迅速概括到许多未见过的任务（即few-shot适应）</p><p>在持续学习阶段，模型遇到一个有序的 $N_u$ 上游任务列表 : $[T_u^1,…,T^{N_u}_u]$ ，其中每个任务有自己的训练集和测试集。</p><p>为了测试连续选了的模型 $f$ 的 few-shot 学习能力，在一组单独的 $N<em>v$ 少量任务 ${T_v^i}</em>{i=1}^{N_v} $ 上对其进行adapt ，其中每个未见的任务只有几个训练样本。</p><p>在CLIF中，除了传统的CL目标是保持在所见任务上的性能外，在CLIF中，保持可概括的知识以在训练结束时获得更好的few-shot learning性能也是至关重要的。 </p><h3 id="Evaluation-Protocol"><a href="#Evaluation-Protocol" class="headerlink" title="Evaluation Protocol"></a>Evaluation Protocol</h3><p>如图所示，针对CLIF设置评估方法有三个主要方面：few-shot性能、最终性能和即时性能。</p><p><img src="https://i.loli.net/2021/10/30/b2W3lNhOngXmQv9.png" alt=""></p><ul><li><em>Few-shot Performance</em>: 首先，在一组未见过的任务上苹果持续训练的模型 $f$,  在上游任务 $T^1<em>u,…,T_u^{N_u}$ 训练结束后，用几个标注的样本对每个任务 $T_v^i$ 进行微调。因此，我们可以评估 few-shot 的泛化能力。把一个任务 $T_v^i$ 的 few-shot accuracy 记为 $s</em>{FS}^i = F(Y<em>v^i, \hat Y_v^i)$, 其中 $\hat Y_v^i$ 是对任务 $T</em>{v}^i$ 的测试样本进行预测， $Y<em>v^i$ 是真实标签。$F$ 是度量函数如accuracy。 记录所有few-shot 任务，例如：$s</em>{FS}= \frac{1}{N<em>v} \sum</em>{i=1}^{N<em>v} s</em>{FS}^i$ 。 还计算了在每个 few-shot 任务上单独训练的模型的相对改进 $\Delta_{FS}$</li><li><em>Instant Performance</em> : 在模型完成对上游任务 $T<em>u^i$ 的学习后，立即评估其性能，在模型$f$ 将任务 $j$ 学习为 $\hat Y</em>{u}^{i,j}$ 之后，记录在任务 $T<em>u^i$ 的测试集上的预测。 Instant performance 在任务 $T_u^i$ 上被定义为 $s</em>{inst.}^i = F(Y<em>u^i,\hat Y_u^{i,i})$ 。例如，模型 $f$ 在 $T_u^1$ 和 $T_u^2 $ 的数据上训练之后，在 $T_u^3$ 上进一步训练之前评估 $f$ 在 $T_u^2$ 上的性能。因此，$f$ 在 $T_u^2 $ 上的表现可以告诉我们，模型将其知识从学习 $T_u^1 $ 转移到学习 $T_u^2 $  的情况 —— 使用 $f$ 仅只在 $T_u^2 $ 上训练时的表现作为参考。我们计算所有上游任务的 Instant performance，$s</em>{inst.} = \frac {1}{N<em>u} \sum</em>{i=1}^{N<em>u} s</em>{inst.}^i $  ，此外还计算了相对于在每个上游任务上单独训练的改进 $\Delta_{inst.}$， 以表明上学学习的好处。</li><li><em>Final Performance</em> ：评估 $f$ 在对上游任务的持续学习结束时的表现，以了解模型 $f$ 在学习解决更多任务后对任务知识的遗忘程度。一个任务 $T<em>u^i $ 的最终 accuracy 被定义为 $F(Y_u^i,\hat Y_u^{i,N_u})$ 。同样地，我们报告了所有任务的平均最终准确度，记为 $s</em>{final} = \frac{1}{N} \sum<em>{i=1}^{N_u} s</em>{final}^i$。遗忘可以被量化为 $s<em>{inst} - s</em>{final}$ 。</li></ul><h3 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h3><p>CLIF 的设置对现有的 few-shot learning 方法来首特别具有挑战，大多数 few-shot 学习方法假定所有任务的上游数据集总是可用的，并且没有按时序去学习。因此，上游的任务可以在多任务学习的环境下共同学习。然而，CLIF问题采用的是持续学习的设置，即任务是按顺序访问的，没有重新访问。因此，依靠从任务分布中随机抽样的方法并不适用。</p><h3 id="Tasks-and-Data-Streams"><a href="#Tasks-and-Data-Streams" class="headerlink" title="Tasks and Data Streams"></a>Tasks and Data Streams</h3><p>为了将CLIF挑战推向一个更实际的设置，考虑了一组多样化的NLP任务来进行CL和few-shot learning。我们考虑了两个数据集的组合，被称为CLIF-26和CLIF-55任务：</p><p><img src="https://i.loli.net/2021/10/30/kdeHY4IvltMXyBw.png" alt=""></p><p>将CLIF-26中每个GLUE任务中的训练样本数量限制在10,000个，以避免数据集过度失衡。对于CLIF-55，每类使用90个样本进行连续学习。</p><p>在CLIF-26和CLIF-55的 few-shot 学习任务中，如果没有指定的话，每类使用 k=16 个样本，并在实验中包括更多的 k 的设置。由于GLUE的测试标签没有公开，仅报告了验证集的性能。</p><hr><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>首先介绍我们研究中的 baseline。然后，我们介绍一些现有的持续学习和持续元学习的方法。最后，提出了一个新颖的正则化双级适配器生成框架，以更好地解决CLIF问题。</p><h3 id="Base-NLP-Models"><a href="#Base-NLP-Models" class="headerlink" title="Base NLP Models"></a>Base NLP Models</h3><h4 id="BART-and-BART-Adapter"><a href="#BART-and-BART-Adapter" class="headerlink" title="BART and BART-Adapter"></a>BART and BART-Adapter</h4><p>由于将CLIF问题中的NLP任务制定为统一的文本到文本格式，我们使用预先训练好的语言模型（LM）作为模型f的架构，并在训练期间对整个模型进行微调。</p><p>我们还包括Adapter训练，作为对整个BART模型进行微调的一种改变。这里，适配器是插在BART每层之后的两层MLPs。</p><p>给出 transformer的第 $l$ 层的输出 $h_l$ , adapter的输出被计算为 $h_l’ = h_l + f_l^a(h_l)$， 其中 $f_l^a$ 是在 $l$ 层的adapter。只有adapter在训练中被学习，BART模型被frozen。</p><h4 id="Hyper-Networks-for-Adapter-Generation"><a href="#Hyper-Networks-for-Adapter-Generation" class="headerlink" title="Hyper-Networks for Adapter Generation"></a>Hyper-Networks for Adapter Generation</h4><p>除了BART和BART适配器之外，还使用考虑HyperNetwork（HNet）架构。HyperNetwork 记为 $g$ ，将任务表示 $z$ 作为输入，并生成另一个预测模型的模型参数，记为 $f$ 来解决该任务。在 few-shot learning 中，$z$ 通常被计算为任务的训练实例的平均表示，即 任务的平均表示: $z = \frac{1}{|D<em>{tr}^i|} \sum</em>{(x<em>j,y_j)\in D</em>{tr}^i} f<em>e(x_j, y_j) $ ，其中 $D</em>{tr}^i$ 是任务 $T^i$ 的训练集，$f_e$ 是encoder。</p><p>我们使用一个BART编码器作为 $f_e$，并将 $x$ 和标签 $y$ 的文本格式串联起来，得到任务表示 $z$。</p><h3 id="Baseline-Learning-Algorithms"><a href="#Baseline-Learning-Algorithms" class="headerlink" title="Baseline Learning Algorithms"></a>Baseline Learning Algorithms</h3><h4 id="Single-Task-Learning"><a href="#Single-Task-Learning" class="headerlink" title="Single Task Learning"></a>Single Task Learning</h4><p>为了了解基础模型在没有任何知识转移的情况下对上游任务的参考性能，应用了单一任务学习（STL）方法，该方法在每个任务的数据集上单独地训练和测试模型 $f$。</p><p>在这种情况下，我们忽略了CLIF问题的顺序性，所以我们可以用这个STL的性能来评估不同的持续方法（下面介绍）的有效性。理想情况下，一个有效的 CL 算法应该具有比 STL 结果更好的几率准确性，这意味着它积累了并有效地迁移了知识，用于学习。</p><p>同样地，为了了解 few-shot 任务的参考性能，我们在没有任何上游训练的情况下，为每个 few-shot 任务学习一个模型 $f$ ，这样我们就可以用这种性能来评估CLIF方法对泛化能力的改善程度。</p><h4 id="Continual-Learning-Algorithms"><a href="#Continual-Learning-Algorithms" class="headerlink" title="Continual Learning Algorithms"></a>Continual Learning Algorithms</h4><p>作为一种简单的基线方法，我们使用 Vanilla 表示简单地在上游任务上按顺序训练模型 $f$。</p><p>具体来说，它在 $T_u^i$ 上训练模型 $f$，直到其性能收敛，然后在 $T_u^{i+1}$ 的数据上不断训练 $f$。</p><p>请注意，CL 中不允许访问先前任务的数据，还考虑在实验中考虑 CL 算法，例如 EWC、MbPA++和 meta-MbPA。</p><p>EWC 正则化了训练过程中重要模型参数的变化，MbPA++ 方法对存储在内存中的几个训练样本执行测试 test-time 调整。 meta-MbPA 方法包括快速适应元学习目标。</p><h4 id="Hyper-Networks-for-CL"><a href="#Hyper-Networks-for-CL" class="headerlink" title="Hyper-Networks for CL"></a>Hyper-Networks for CL</h4><p>《Continual learning with hypernetworks》 提出了 hypernetwork-based continual learning。其中减轻灾难性遗忘的高级想法是惩罚超网络在其学习新任务时为先前任务生成的模型权重的改变。虽然原始工作生成模型的整个参数，但我们仅通过生成适配器的权重来使其适应 PTLMs。 将这种方法记为 HNet-Reg。</p><p>具体来说，当模型刚刚完成学习任务 $T<em>{u}^{i-1}$ 并且在持续学习阶段学习任务 $T_u^i$ 之前，我们存储当前超网络为所有先前任务 $T_u^1…T_u^{i=1}$ 生成的适配器权重，记为 ${\hat\theta_1^{i-1},\hat\theta_2^{i-1},…,\hat\theta</em>{i-1}^{i-1}}$ ，其中生成是通过超网络 $h$ 应用于先前任务 $1,..,{i-1}$ 的存储任务表示来控制的，记为 $M = {z_h^1,…,z_h^{i-1}}$ 。在这里，任务 $T_u^i$ 的任务表示 $z_i$ 在学习任务之前随机初始化，并在学习任务时联合优化。</p><p>然后，在学习 $T_u^i$  的每一步中，我们随机抽样一个先验任务 $T_u^j \ \ (j &lt; i)$ 来规范超网络学习。 它惩罚在当前步骤 $\theta_j$ 生成的适配器权重与预先计算的权重之间的 $l_2$ 距离，例如 $||\theta_j-\hat \theta_j^{i-1}||_2^2$</p><p>因此，避免了超网络 g 在持续学习阶段过多地改变其先前任务的输出，从而更好地保证学习模型的知识积累。</p><h4 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h4><p>EWC 和 HNET-Reg 不是为 CLIF 问题精心设计的，CLIF还试图在持续学习后改进对未知任务的 few-shot 泛化。 虽然 MbPA 和 meta-MbPA 中的 test-time 适应可能有利于 few-shot learning，但这些工作并未研究这种能力。 此外，由于这两种算法存储了先前训练任务的真实数据，因此不适用于无法再访问来自早期任务的数据的隐私敏感应用，这是持续学习中的典型场景。</p><h3 id="Our-Extension-Bi-level-Hypernetworks-for-Adapters-with-Regularization"><a href="#Our-Extension-Bi-level-Hypernetworks-for-Adapters-with-Regularization" class="headerlink" title="Our Extension: Bi-level Hypernetworks for Adapters with Regularization"></a>Our Extension: Bi-level Hypernetworks for Adapters with Regularization</h3><p>受用于 few-shot 和 CL的超网络方法的启发，我们将基于超网络的CL方法扩展到CLIF。我们提出了一种新的方法，即带有正则化的双级超网络Adapters（BiHNet+Reg），该方法学习使用双级任务表示来生成Adapters权重，以便在一连串的任务中学习快速适应模型，同时通过正则化来减轻遗忘效应。</p><p>方法由三个组件组成：</p><p><img src="https://i.loli.net/2021/10/30/usniAeI3GEyHXL7.png" alt=""></p><ul><li>Context Predictor 上下文预测器，从训练实例中生成双级任务表征（即高资源和few-shot表征）</li><li>Adapter-Wise Hypernetworks 超网络，根据任务表征生成适配器的权重；</li><li>Regularization 正则化项，阻止所见任务的权重变化以避免遗忘</li></ul><h4 id="Context-Predictor"><a href="#Context-Predictor" class="headerlink" title="Context Predictor"></a>Context Predictor</h4><p>为每个任务 $t$ 生成两个任务表征，分别在高资源和 few-shot 的情况下为其建模，表示为 $z_h^t$ 和 $z_f^t$，用frozne BART编码器。高资源表征用于鼓励持续学习过程中的知识转移；few-shot 任务表征帮助我们在 few-shot learning 模仿 few-shot任务，以获得更好的泛化，类似于元学习。</p><p>然后，高资源任务表示被计算为任务 $t$ 中所有样本的上下文向量的平均值。 记为：$z<em>h^t = \frac{1}{|D_t|} \sum</em>{(x_i,y_i)\in D_t} R(x_i, y_i)$</p><p>然而，few-shot 任务表示 $z<em>f^t$ 使用有限数量 K 个采样样本 $z_f^t = \frac{1}{k} \sum</em>{(x<em>i,y_i)\in \Tau(D_t, K)} R(x_i, y_i)$， 其中$\Tau(D_t,K)$ 是在 $D_t$ 中采样K 个样本。请注意，在不断的学习过程中，上游任务的高资源表征被长期储存在一个记忆模块中，$M={z_h^t| t\in {\Tau_u^i}</em>{i=1}^{N_u}}$ 。在few-shot的学习阶段，我们设定 K为给定的样本的数量，因此对于任何任务，$z_h=z_f$。</p><h4 id="Adapter-Wise-Hypernetworks"><a href="#Adapter-Wise-Hypernetworks" class="headerlink" title="Adapter-Wise Hypernetworks"></a>Adapter-Wise Hypernetworks</h4><p>使用超网络 $g$ 来生成frozen BART模型 $f$ 的各层之间的适配器的权重。</p><p>在训练过程中，使用高资源和采样的任务表征 $z_h^t$ 和 $z_f^t$ 来产生适配器权重 分别记为 $\theta_t^h$ 和 $\theta_t^f$。我们对这两个适配器的预测损失进行了优化。</p><h4 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h4><p>HyperNetwork是模型中唯一可训练的部分，对生成的适配器施加正则化以减轻遗忘。</p><p>虽然 BiHNet 被训练为从高资源和低资源任务表示生成适配器，但发现仅存储和正则化来自高资源任务表示的输出就足够了。</p><h4 id="Summary-and-Highlights"><a href="#Summary-and-Highlights" class="headerlink" title="Summary and Highlights"></a>Summary and Highlights</h4><p>总而言之，提出的方法首先生成了双级任务表征，用于训练具有正则化项的适配超网络，以避免随时间推移而遗忘。</p><p>与基于重放记忆的CL方法（例如MbPA）不同，我们的方法不存储任何真实的训练实例。相反，它使用任务表示来存储记忆，因此允许该方法应用于对隐私敏感的场景中。</p><hr><h2 id="Results-and-Analysis"><a href="#Results-and-Analysis" class="headerlink" title="Results and Analysis"></a>Results and Analysis</h2><p>在本节中，将讨论两个主要研究问题：</p><ul><li>考虑到潜在的灾难性遗忘，与离线设置相比，模型如何在CL设置中长期积累可推广的知识？</li><li>持续学习的方法是否能减少对所见任务的表现和可归纳知识的灾难性遗忘。</li></ul><p>作者在试验了各种模型架构的组合和学习算法。通过其模型结构和应用的CL算法来说明一种方法，例如BART-Vanilla, BiHNet-EWC。</p><p><img src="https://i.loli.net/2021/10/30/M9NOlJoS64AYhGy.png" alt=""></p><h3 id="Examining-Knowledge-Accumulation"><a href="#Examining-Knowledge-Accumulation" class="headerlink" title="Examining Knowledge Accumulation"></a>Examining Knowledge Accumulation</h3><p>在这一节中，提出了对模型在离线和CL设置中获得可归纳知识的能力的分析。</p><p>我们注意到BiHNet方法，对应于学习生成适配器，应与BiHNet-Single和BART-Adapter-Single进行比较，后者是零知识基线，其学习生成或从随机初始化中学习适配器；</p><p>同样，BART方法应与BART-Single进行比较。重点是确定CLIF的挑战，并将方法论的讨论留在下一小节。</p><h4 id="问题1：来自上游任务的知识是否有助于模型在在线学习和持续学习设置中的few-shot泛化？"><a href="#问题1：来自上游任务的知识是否有助于模型在在线学习和持续学习设置中的few-shot泛化？" class="headerlink" title="问题1：来自上游任务的知识是否有助于模型在在线学习和持续学习设置中的few-shot泛化？"></a>问题1：来自上游任务的知识是否有助于模型在在线学习和持续学习设置中的few-shot泛化？</h4><p>看表2，在CLIF-26和CLIF-55数据集上，我们看到BiHNet-MTL在 few-shot 情况下的表现比零知识基线要好0.4%和1.0%，这意味着在标准的离线学习设置中，上游任务对few-shot 情况下的泛化有帮助。</p><p>对于BART模型，我们注意到BART-MTL在Clif-55数据集上比BART-Single提高了2.5%。然而，我们注意到CLIF-26的情况正好相反。鉴于在这些模型中整个BART参数都被优化了，我们假设BART-MTL可能受到了预训练的BART模型本身的知识遗忘的影响；而在适配器和BiHNet模型中，BART模型被冻结了。</p><p>因此，在本节的其余部分，我们更关注 侧重于BiHNet方法。</p><h4 id="问题2：模型的泛化能力是如何随时间变化的？"><a href="#问题2：模型的泛化能力是如何随时间变化的？" class="headerlink" title="问题2：模型的泛化能力是如何随时间变化的？"></a>问题2：模型的泛化能力是如何随时间变化的？</h4><p><img src="https://i.loli.net/2021/10/30/GJhbKFcu3sAHVYj.png" alt=""></p><h4 id="问题3：模型的灾难性遗忘是否阻碍了其知识积累？"><a href="#问题3：模型的灾难性遗忘是否阻碍了其知识积累？" class="headerlink" title="问题3：模型的灾难性遗忘是否阻碍了其知识积累？"></a>问题3：模型的灾难性遗忘是否阻碍了其知识积累？</h4><h3 id="Effect-of-Continual-Learning-Algorithms"><a href="#Effect-of-Continual-Learning-Algorithms" class="headerlink" title="Effect of Continual Learning Algorithms"></a>Effect of Continual Learning Algorithms</h3><h4 id="问题1：持续学习算法能缓解灾难性遗忘吗？"><a href="#问题1：持续学习算法能缓解灾难性遗忘吗？" class="headerlink" title="问题1：持续学习算法能缓解灾难性遗忘吗？"></a>问题1：持续学习算法能缓解灾难性遗忘吗？</h4><h4 id="问题2：缓解灾难性遗忘能更好地保留泛化能力吗？"><a href="#问题2：缓解灾难性遗忘能更好地保留泛化能力吗？" class="headerlink" title="问题2：缓解灾难性遗忘能更好地保留泛化能力吗？"></a>问题2：缓解灾难性遗忘能更好地保留泛化能力吗？</h4><h4 id="问题3：BiHNet-REG比HNet-REG有改进吗？"><a href="#问题3：BiHNet-REG比HNet-REG有改进吗？" class="headerlink" title="问题3：BiHNet-REG比HNet-REG有改进吗？"></a>问题3：BiHNet-REG比HNet-REG有改进吗？</h4><h4 id="问题4：敏感度分析：模型如何在不同数量的few-shot训练样本下执行。"><a href="#问题4：敏感度分析：模型如何在不同数量的few-shot训练样本下执行。" class="headerlink" title="问题4：敏感度分析：模型如何在不同数量的few-shot训练样本下执行。"></a>问题4：敏感度分析：模型如何在不同数量的few-shot训练样本下执行。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Learn-Continually-Generalize-Rapidly-Lifelong-Knowledge-Accumulation-for-Few-shot-Learning&quot;&gt;&lt;a href=&quot;#Learn-Continually-Generalize-R</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>Pattern Exploiting Training (PET)</title>
    <link href="http://example.com/2021/10/28/Pattern-Exploiting-Training-PET/"/>
    <id>http://example.com/2021/10/28/Pattern-Exploiting-Training-PET/</id>
    <published>2021-10-28T02:31:26.000Z</published>
    <updated>2021-10-30T03:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pattern-Exploiting-Training-PET"><a href="#Pattern-Exploiting-Training-PET" class="headerlink" title="Pattern Exploiting Training (PET)"></a>Pattern Exploiting Training (PET)</h1><p>介绍PET范式，可用于半监督或无监督训练。</p><p>这篇主要关注两篇相同作者的文章：</p><p>《Exploiting Cloze Questions for Few Shot Text Classification and Natural Language Inference》</p><p>《It’s Not Just Size That Matters：Small Language Models Are Also Few-Shot Learners》</p><p>首先看到一个问题比较好：<strong>BERT在预训练时学习到的知识或者说参数我们在fine-tunning的时候都有用到吗？</strong></p><p>答案是不是的。</p><p>BERT的预训练其中一个任务是MLM，就是去预测被 【MASK】掉的token，采用的是拿bert的最后一个encoder（base版本，就是第12层的encoder输出，下图左图蓝色框）作为输入，然后接全连接层，做一个全词表的softmax分类（这部分就是左图的红色框）。但在finetuing的时候，我们是把MLM任务的全连接层抛弃掉，在最后一层encoder后接的初始化层来做具体下游任务。</p><p><img src="https://i.loli.net/2021/10/28/c31HAsXB5QbPklt.png" alt=""></p><p>MLM目标是预测 输入时被挑选的15%的单词，所以在BERT的最后一层（如BERT-base版本就是第12层）的token的embedding后会接一个【embedding维度，词表大小】的全连接矩阵，做token的预测，这个全连接矩阵就是MLM层参数</p><p>问题是，<strong>能不能通过某些巧妙的设计，把MLM层学习到的参数也利用上？</strong></p><blockquote><p>注意，Prompt设计的这种完形填空和MLM任务是有区别的，二者虽然都是都是词分类，但是候选集不同，MLM的候选词是整个词库，prompt是verbalizer里的词。Prompt使用MLM层把其他的词给忽略掉。</p></blockquote><p>答案当然是可以的，请继续往下看。</p><p>现在举一个二分类的例子，输入一条汽车论坛的评论，输出这个评论是属于【积极】or【消极】。但问题是现在我每个类别只有10个labeled数据，1K条unlabeled数据。怎么训练model？</p><p>直接做有监督训练?样本量太少，会过拟合。应该优先采用半监督学习的方法，如UDA、MixText这种，而PET采用的是另外一种巧妙的设计思想。</p><p>对于”I love this movie”这句输入，可以在后面加上Prompt也就是Pattern：”the movie is <em>_</em>“，组成如下这样一句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love this movie, the movie is ___</span><br></pre></td></tr></table></figure><p>然后让预训练模型用表示情感的答案（例如”great”、”terrible”等）做完形填空，最后再将该答案转换为情感分类的标签。这里定义一个<strong>verblizer</strong>作为映射函数，把label【great】映射为+，把label【terrible】映射为- 。</p><p>这样一来，我们就可以通过构造合适的「模板」，控制模型的输出空间，从而训练一个完全无监督的预训练模型来解决各种各样的下游任务。<strong>BERT预训练时的MLM层的参数能利用上</strong>。而且，<strong>即使model没有进行fine tunning，这个model其实就会含有一定的准确率</strong>！</p><p>Pattern和verblizer，就是一个PVP（pattern-verbalizer pairs）。</p><h2 id="Prompt-Notation"><a href="#Prompt-Notation" class="headerlink" title="Prompt Notation"></a>Prompt Notation</h2><p>设 $M$ 是被mask的语言模型，$V$ 是它的词表，$[MASK]$ 也包含在词表中。令 $L$ 为目标分类任务 A 的一组标签。</p><p>我们把任务 A 的输入写成一串短语 $x=(s_1,…,s_k)$，其中 $s_i\in V$.</p><p>例如如果 $A$ 是文本推理（两个话虽然句子），$k=2$</p><p>我们将pattern定义为一个函数 $P$, 它以 $x$ 为输入，输出一个短语或句子 $P(x)\in V^*$, 其中正好包含一个MASK标记，也就是说，它的输出可以被看作是一个完形填空问题。</p><p>此外，将 verbalizer 定义为一个注入函数 $v:L\to V$, 它将每个标签映射到 $M$ 的词表中的一个词。</p><p>令 $p=(P,v)$  是 PVP（pattern-verbalizer pairs）</p><p>我们假设可以访问较小的训练集 $T$ 和 通常大得多的一组无标签数据 $D$ 。</p><p>对于每个恰好包含一个MASK标签和 $w\in V$ 的序列 $z\in V^*$, 用 $M(w|z)$ 表示语言模型在掩码位置赋予$w$ 的非标准化分数。给定某个输入 $x$，我们将标签 $l\in L$的得分定义为:</p><script type="math/tex; mode=display">s_p(l|x) = M(v(l) | P(x))</script><p>并使用Softmax获得标签上的概率分布 :</p><script type="math/tex; mode=display">q_p(l|x) = \frac{e^{s_p(l|x)}}{\sum_{l'\in L} e^{s_p(l'|x)}}</script><h2 id="Auxiliary-Language-Modeling"><a href="#Auxiliary-Language-Modeling" class="headerlink" title="Auxiliary Language Modeling"></a>Auxiliary Language Modeling</h2><p>只有几个训练示例可用，可能会发生灾难性的遗忘。</p><p>由于现在是用MLM做分类任务，所以可以引入无标注数据一起训练！</p><p>举个简单的例子，下图样例1是labeled数据，我们利用pattern把它改写后，对 __ 部分做完形填空预测（即MLM任务）。</p><p>样例2是一个unlabeled数据，我们就不对  __ 部分做预测，而是对被【MASK】做预测。这里的【MASK】可以采用BERT的方法，随机对句子的15%token进行【MASK】。</p><p><img src="https://i.loli.net/2021/10/28/daK2yEYcXFSoN9u.png" alt=""></p><p>训练时两个损失联合训练：</p><script type="math/tex; mode=display">L = (1-\alpha) \cdot L_{CE} + \alpha \cdot L_{MLM}</script><p>由于 $L<em>{MLM} $ 通常比 $L</em>{CE}$ 大得多，在初步实验中，发现$α=10^{-4}$的值能给出良好的结果</p><p>这样做的好处是，能让model更适应于当前的任务，有点像<strong>在预训练模型上继续根据任务的domain和task继续做预训练，然后再做fine-tunning呢？</strong></p><h2 id="Combining-PVPs"><a href="#Combining-PVPs" class="headerlink" title="Combining PVPs"></a>Combining PVPs</h2><p>引入一个问题，<strong>怎么评价我们的pattern定义得好不好？</strong></p><p>我们可以造两个pattern，又可以造两个verblizer。其实一共有4个PVP。我们怎么衡量哪一个PVP训练完后在测试集上的效果最好？</p><p>答案是我们也不知道，因为<strong>我们不能站在上帝视角从一开头就选出最佳的PVP，同样由于是小样本学习，也没有足够的验证集让我们挑选最佳的PVP</strong>。既然如此，解决方式就是<strong>知识蒸馏</strong>。</p><p>具体的，我们用20个labeled数据训练4个PVP模型，然后拿这四个PVP模型对1K条unlabeled数据进行预测，预测的结果用下式进行平均。</p><script type="math/tex; mode=display">s_M(l|x) = \frac{1}{Z} \sum_{p\in P} w(p) \cdot s_p(l|x)</script><p>其中 $Z$ 保持概率和为1， $s_p(l|x)$ 就是单个PVP模型对样本预测的概率分布，$w(p)$ 就是PVP的权重。</p><p>有uniform和weighted两种方式，uniform就是所有PVP的权重都为1，weighted就是把每个PVP的权重设置为它们在训练集上的准确率。最后还要对上式进行<strong>temperature=2</strong>的软化。</p><p>这就是在做知识的蒸馏。<strong>何谓知识的蒸馏？</strong>经过这样处理后，噪声减少了，利用多个PVP平均的思想把某些本来单个PVP预测偏差比较大的进行平均后修正。</p><p>这样子，利用训练好的PVPs所有1K条unlabeled数据打上soft label，再用这1K条打上软标签的数据进行传统的有监督训练，训练完的model应用于下游任务的model。</p><blockquote><p>注意哦，这里就可以用<strong>轻量的模型</strong>来做fine tuning了哦，因为从20条labeled数据扩充到1K条有带有soft label的数据，labeled数据量大大增加，这时候轻量级的模型也能取得不错的结果，而且轻量模型对轻量部署、高并发等场景更加友好。</p></blockquote><p>下图就是所有的流程，再总结一下步骤就是</p><p><img src="https://i.loli.net/2021/10/28/iyWJmp32kv8uQeU.png" alt=""></p><ul><li>第一步先定义PVPs，然后对每对PVP用labeled数据进行单独的训练，该步可以加入上面提到的Auxiliary Language Modeling一起训练</li><li>第二步：用训练好的PVPs，对unlabled数据进行预测，并知识蒸馏，得到大量的soft label；</li><li>第三步：用第二步得到的带有soft label的data，用传统的fine tuning方法训练model。</li></ul><h2 id="IPET"><a href="#IPET" class="headerlink" title="IPET"></a>IPET</h2><p>将所有单个模型的知识提炼到单个分类器C中意味着它们不能相互学习。由于一些 pattern 的表现(明显地)比其他模式差，因此最终模型的训练集 $T_C$可能包含许多标记错误的示例。</p><p>在每个PVP训练的过程中，互相之间是没有耦合的，就是没有互相交换信息，IPET的意思就是想通过迭代，不断扩充上面训练PVP的数据集。</p><p>这里简单举个例子，现在有20个labeled数据，1K个unlabeled数据，定义5个PVP，</p><p>第一轮，利用20个labeled数据分别训练PVP，第二轮，用第2~4个PVP来预测这1K unlabeled数据，然后选一些模型预测概率比较高的加入到第一个PVP的训练集上，同样用第1、3、4、5个PVP来训练这1K条，然后也将这部分加入到第2个PVP的训练集中，然后再训练一轮，训练后，重复，这样每一轮每个PVP的训练样本不断增多，而且PVP之间的信息也发生了交互。</p><p><img src="https://i.loli.net/2021/10/28/lzncwRWb5ovF93e.png" alt=""></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><img src="https://i.loli.net/2021/10/28/faoicY2BVnuyI9l.png" alt=""></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="Combining-PVPs-1"><a href="#Combining-PVPs-1" class="headerlink" title="Combining PVPs"></a>Combining PVPs</h3><p>作者发现不同PVP之间可能有很大的性能差别，如下图min就是最差的PVP，max就是最好的PVP，可以观察到它们之间的差别就很大。但是又不能站在上帝视角从一开始就选择最好的PVP，所以办法就是做commind PVPs，即上面所提到的知识蒸馏，而且发现蒸馏后会比采用单个最好的PVP效果还要好，并且发现uniform和weighted两个方法效果差不多。</p><p><img src="https://i.loli.net/2021/10/28/UkDHrpN1St9q8hR.png" alt=""></p><h3 id="Auxiliary-Language-Modeling-1"><a href="#Auxiliary-Language-Modeling-1" class="headerlink" title="Auxiliary Language Modeling"></a>Auxiliary Language Modeling</h3><p>labeled数据越少，auxiliary task的提升效果越明显。</p><p><img src="https://i.loli.net/2021/10/28/JtsafNYc1BxU9V2.png" alt=""></p><h3 id="Iterative-PER"><a href="#Iterative-PER" class="headerlink" title="Iterative PER"></a>Iterative PER</h3><p>iPET的效果，因为iPET是迭代多轮，每一轮每个PVP的训练集都会增大，从图可以看到每一轮的模型效果都是越来越好的。</p><p><img src="https://i.loli.net/2021/10/28/hVICaP1rKk62fdZ.png" alt=""></p><h3 id="In-Domain-Pretraining"><a href="#In-Domain-Pretraining" class="headerlink" title="In-Domain Pretraining"></a>In-Domain Pretraining</h3><p>这里讨论了一个问题：PET效果比有监督训练好，是不是因为PET在大量无标签上打上软标签，扩大了有标签数据集？</p><p>然后作者做了一个实验，有监督训练时，先在所有数据集上进行继续预训练（这一步作者认为相当于把无标签数据也加进来了），然后再fine funing。实验结果表明，即使这样，有监督效果也离PET有一定距离。</p><p><img src="https://i.loli.net/2021/10/28/Ftm58XIxSDTbj9Z.png" alt=""></p><h2 id="It’s-Not-Just-Size-That-Matters：Small-Language-Models-Are-Also-Few-Shot-Learners"><a href="#It’s-Not-Just-Size-That-Matters：Small-Language-Models-Are-Also-Few-Shot-Learners" class="headerlink" title="It’s Not Just Size That Matters：Small Language Models Are Also Few-Shot Learners"></a>It’s Not Just Size That Matters：Small Language Models Are Also Few-Shot Learners</h2><p>这篇论文是上篇论文的延伸，其实没有太多新的工作，主要是下面提到的处理多个token的mask，这篇论文主要PK GPT3，不断diss GPT3有多少的不环保。</p><h2 id="PET-with-Multiple-Masks"><a href="#PET-with-Multiple-Masks" class="headerlink" title="PET with Multiple Masks"></a>PET with Multiple Masks</h2><p>PET要定义pattern和verblizer，还拿那汽车评论场景举例，我们能不能定义一个verbilzer，它把不同label映射到长度不一的token，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义 Pattern: s。真__!  这里s代表原始输入。  </span><br><span class="line">定义Verbilzer,  v(积极)&#x3D;好,   V(消极)&#x3D;不好</span><br><span class="line">样例 x:   保养贵，配件贵，小毛病多，还有烧机油风险。(label为消极)</span><br><span class="line">pattern(x) &#x3D; 保养贵,配件贵,小毛病多,还有烧机油风险，真__!</span><br></pre></td></tr></table></figure><p>因为verbilzer把标签映射到长度不一致的token，那我们究竟定义长度为多少的下划线<em>_</em>，来让model进行完形填空。答案是用最长的那个，例如这里最长的是”不好”，长度为2，所以就挖空两个下划线来让模型做完形填空预测。</p><p>做Inference时，</p><ul><li>$p(\text{积极}|x) =$ 第一个下划线__ 模型预测到token为好的概率。</li><li>$p(\text{消极}|x)= $  就麻烦一些，先让模型对两个下划线，进行预测，看是第一个下划线预测token为不，还是第二个下划线预测token为好的概率高一些，把高的那个token先填上去，再重新预测剩下的。举个例子，假如模型预测第一个下划线token为不的概率是0.5，第二个下划线token为好的概率为0.4，即先把不填上第一个下划线，然后再用模型重新预测第二个token为好的概率，假如为0.8，即  $p(\text{消极}|x)= 0.5*0.8=0.4$  </li></ul><p>做train时，就不考虑这么细致了，具体的，取上面的例子为例，</p><ul><li>$p(\text{积极}|x) =$ 第一个下划线__，模型预测到token为好的概率，跟inference是一样的</li><li>$p(\text{消极}|x)= 0.5*0.4 = 0.2$ ，这里就不分成两步，一步KO，目的是一次前向计算就算完，避免训练过慢。  </li></ul><p>最后，采用的损失函数也跟第一篇的不一样，这里用的是hinge loss，详细的请看论文。</p><script type="math/tex; mode=display">\sum_{y'\in Y_x} max(0; 1-log\hat q_p (y|x) + log\hat q_p(y'|x))</script><h3 id="Unlabeled-Data-Usage"><a href="#Unlabeled-Data-Usage" class="headerlink" title="Unlabeled Data Usage"></a>Unlabeled Data Usage</h3><p>还是下面这幅图，这里讨论了unlabeled数据的利用。</p><p>在PET利用到unlabeled数据的有三个地方：</p><ul><li>第一处：PET的第二步，用PVPs对unlabeled数据进行知识蒸馏，给数据打上soft label，然后第三步利用这些软标签训练一个模型；</li><li>第二处：PET的第一步，假如用的是iPET的话，每一个generation都会把部分的无标签数据打上标签，加入到PVP的训练集；</li><li>第三处：PET的第一步，假如采用的是Auxiliary Language Modelling辅助训练，也会引入无标签数据。</li></ul><p>首先，讨论上面的第一点，究竟能不能直接用PET训练的第一步的PVPs来做预测，这样就不用给unlabeled数据打软标签了（因为虽然说unlabeled数据比labled数据容易获得，但某些场景下unlabeled数据也有可能是拿不到的），答案是可以的，大家看下表的倒数两列，发现不用PET训练的第二、第三步，直接采用第一步训练好的PVPs来做下游应用的预测，效果也是OK的。</p><p><strong>只不过，这样做的话，你应用于下游任务的时候就是一堆PVP模型，而不是单一个模型了，这样对轻量部署不是很友好</strong>。</p><p><img src="https://i.loli.net/2021/10/28/SwGde9gKBF5t1xb.png" alt=""></p><p>还讨论了上面的第二处，发现iPET训练过程中，每一个generation从unlabeled数据中挑选部分加入到PVP的训练集，能让PVP收敛更快，减少不稳定性。</p><p><img src="https://i.loli.net/2021/10/28/SeqEI7XiB2rgCVl.png" alt=""></p><h3 id="Model-Type"><a href="#Model-Type" class="headerlink" title="Model Type"></a>Model Type</h3><p>不同预训练模型的影响，像BERT这种双向的语言模型会比GPT这种单向的要好，因为假如采用的是单向的语言模型，那么pattern的下划线__部分只能放在句子末尾进行预测。</p><p><img src="https://i.loli.net/2021/10/28/73phCBVNdwszAtf.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pattern-Exploiting-Training-PET&quot;&gt;&lt;a href=&quot;#Pattern-Exploiting-Training-PET&quot; class=&quot;headerlink&quot; title=&quot;Pattern Exploiting Training (P</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>Parameter-Efficient Transfer Learning for NLP</title>
    <link href="http://example.com/2021/10/23/Parameter-Efficient-Transfer-Learning-for-NLP/"/>
    <id>http://example.com/2021/10/23/Parameter-Efficient-Transfer-Learning-for-NLP/</id>
    <published>2021-10-23T13:48:54.000Z</published>
    <updated>2021-10-24T06:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parameter-Efficient-Transfer-Learning-for-NLP"><a href="#Parameter-Efficient-Transfer-Learning-for-NLP" class="headerlink" title="Parameter-Efficient Transfer Learning for NLP"></a>Parameter-Efficient Transfer Learning for NLP</h1><p>微调大型预训练模型是 NLP 中一种有效的传输机制。 但是，在存在很多下游任务的情况下，微调参数效率低下：每项任务都需要一个全新的模型。</p><p>作为替代方案，作者建议使用Adapter进行迁移。原始网络的参数保持不变，实现了高度的参数共享。</p><p>Adapter提供紧凑且可扩展的模型；它们只为每个任务添加几个可训练的参数，并且可以添加新任务，而无需重新访问以前的任务。</p><ul><li><p>紧凑型模型：在每个任务中使用少量附加参数解决多个任务的模型。</p></li><li><p>可扩展模型：可以增量训练以解决新任务，而不会忘记以前的任务。</p></li></ul><p>自然语言处理中最常见的两种迁移学习技术是 feature-based 和 fine-tuning。</p><ul><li>feature-based的转移涉及预训练实值嵌入向量。 这些嵌入可能在单词、句子或段落级别。 然后将嵌入提供给自定义的下游模型。</li><li>fine-tuning 涉及从预先训练的网络复制权重并在下游任务上调整它们</li></ul><p>feature-based 和 fine-tuning 都需要为每个任务设置一组新的权重。 如果网络的较低层在任务之间共享，则fine-tuning参数效率更高。 然而，提出的adapter tuning方法的参数效率更高。</p><p><img src="https://i.loli.net/2021/10/24/rQJmoCbIKV8hFN3.png" alt=""></p><p>x 轴显示每个任务训练的参数数量； 这对应于解决每个额外任务所需的模型大小的边际增加。</p><p>adapter tuning 训练少两个数量级的参数来，同时获得与fine-tuning 相似的性能。</p><p>adapter 是在预训练网络层之间添加的新模块。 基于adapter tuning与 feature-based/fine-tuning在以下方面有所不同。</p><p>考虑参数为$w$ 的函数 $\phi_w(x)$ (神经网络)。</p><p>Feature-based 将 $\phi_w$ 与新函数组合 $X_v$ 在一起: $X_v(\phi_w(x))$ , 然后，仅训练新的、特定于任务的参数 $v$</p><p>Fine-tuning 为每个新任务调整原始参数 $w$ , 限制紧凑性。</p><p>对于adapter tuning，定义了新函数 $\psi<em>{w,v}(x)$，其中参数 $w$ 从预训练中复制过来。初始参数 $v_0$ 设置为使新函数类似于原始函数：$\psi</em>{w,v<em>0}\approx \phi_w(x) $ 。 在训练期间，只有 $v$ 被调整。 定义 $\psi</em>{w,v}$ 通常涉及向原始网络添加新层 $\phi_{w}$</p><p>如果选择  $|v|≪|w|$，结果模型需要 $∼|w|$ 多任务的参数。 由于 w 是固定的，模型可以扩展到新任务而不影响以前的任务。</p><p>adapter tuning 几乎与完全Fine-tuning 的BERT的性能相当，但仅使用3%的特定于任务的参数，而微调使用100%的特定于任务的参数。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>为了实现这些特性，提出了一个新的瓶颈适配器模块。 当执行深层网络的普通fine-tuning时，对网络的顶层进行修改。这是必需的，因为上游和下游任务的标签空间和损失不同。</p><p>Adapter模块执行更通用的架构修改，以将预先训练的网络重新用于下游任务。</p><p> 特别是，Adapter调整策略涉及将新层注入原始网络。 原始网络的权重不变，而新的Adapter层是随机初始化的。 在标准Fine-tuning中，新的顶层和原始权重是共同训练的。 相比之下，在适配器调整中，原始网络的参数被冻结，因此可能被许多任务共享。</p><p>适配器模块有两个主要功能：参数数量较少 和 near-identity 的初始化。</p><p>与原始网络的层相比，适配器模块很小。 这意味着当添加更多任务时，总模型大小增长相对缓慢。</p><p>Adapter模型的稳定训练需要 near-identity 的初始化；下图实验证明初始化很重要</p><p><img src="https://i.loli.net/2021/10/24/cifQn7Gb2vejPyM.png" alt=""></p><p>横坐标为初始化分布的标准差</p><h3 id="Instantiation-for-Transformer-Networks"><a href="#Instantiation-for-Transformer-Networks" class="headerlink" title="Instantiation for Transformer Networks"></a>Instantiation for Transformer Networks</h3><p><img src="https://i.loli.net/2021/10/24/R7zDTM84XbqAfuI.png" alt=""></p><p>为了限制参数的数量，提出了一种瓶颈结构。</p><p>Adapter首先将原始的d维特征投影到较小的维度 m，然后应用非线性再投影回d维。</p><p>每层添加的参数总数(包括偏置)为 $2md+d+m$ 。</p><p>通过设置 $m≪d$ ，限制每个任务添加的参数数量，使用的参数大约是原始模型参数的0.5−8%。</p><p>瓶颈维度 m 提供了一种在性能和参数效率之间进行权衡的简单方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Parameter-Efficient-Transfer-Learning-for-NLP&quot;&gt;&lt;a href=&quot;#Parameter-Efficient-Transfer-Learning-for-NLP&quot; class=&quot;headerlink&quot; title=&quot;Pa</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>二分查找基本思想：减而治之</title>
    <link href="http://example.com/2021/10/23/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3%EF%BC%9A%E5%87%8F%E8%80%8C%E6%B2%BB%E4%B9%8B/"/>
    <id>http://example.com/2021/10/23/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3%EF%BC%9A%E5%87%8F%E8%80%8C%E6%B2%BB%E4%B9%8B/</id>
    <published>2021-10-23T01:35:22.000Z</published>
    <updated>2021-11-01T02:23:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找基本思想：减而治之"><a href="#二分查找基本思想：减而治之" class="headerlink" title="二分查找基本思想：减而治之"></a>二分查找基本思想：减而治之</h1><p><img src="https://i.loli.net/2021/10/23/rHePAwZuEWGXUgh.jpg" alt=""></p><p>这里「减」是「减少问题」规模的意思，治是「解决」的意思。「减治思想」从另一个角度说，是「排除法」，意即：每一轮排除掉一定不存在目标元素的区间，在剩下 可能 存在目标元素的区间里继续查找。每一次我们通过一些判断和操作，使得问题的规模逐渐减少。又由于问题的规模是有限的，我们通过有限次的操作，一定可以解决这个问题。</p><p>可能有的朋友听说过「分治思想」，「分治思想」与「减治思想」的差别就在于，我们把一个问题拆分成若干个子问题以后，应用「减治思想」解决的问题就只在其中一个子问题里寻找答案。</p><h2 id="二分查找算法的应用范围"><a href="#二分查找算法的应用范围" class="headerlink" title="二分查找算法的应用范围"></a>二分查找算法的应用范围</h2><h3 id="在有序数组中进行查找一个数（二分下标）"><a href="#在有序数组中进行查找一个数（二分下标）" class="headerlink" title="在有序数组中进行查找一个数（二分下标）"></a>在有序数组中进行查找一个数（二分下标）</h3><p>这里「数组」和「有序」是很重要的，我们知道：数组具有 随机访问 的特性，由于数组在内存中 连续存放，因此我们可以通过数组的下标快速地访问到这个元素。如果数据存放在链表中，访问一个元素我们都得通过遍历，有遍历的功夫我们早就找到了这个元素，因此，在链表中不适合使用二分查找。</p><h3 id="在整数范围内查找一个整数（二分答案）"><a href="#在整数范围内查找一个整数（二分答案）" class="headerlink" title="在整数范围内查找一个整数（二分答案）"></a>在整数范围内查找一个整数（二分答案）</h3><p>如果我们要找的是一个整数，并且我们知道这个整数的范围，那么我们就可以使用二分查找算法，逐渐缩小整数的范围。这一点其实也不难理解，假设我们要找的数最小值为 0，最大值为 N，我们就可以把这个整数想象成数组 [0, 1, 2,…, N] 里的一个值，这个数组的下标和值是一样的，找数组的下标就等于找数组的值。这种二分法用于查找一个有范围的数，也被称为「二分答案」，或者「二分结果」，也就是在「答案区间」里或者是「结果区间」里逐渐缩小目标元素的范围；</p><p> 在我们做完一些问题以后，我们就会发现，其实二分查找不一定要求目标元素所在的区间是有序数组，也就是说「有序」这个条件可以放宽，半有序数组或者是山脉数组里都可以应用二分查找算法。</p><p>旋转数组和山脉数组有什么样的特点呢？可以通过当前元素附近的值推测出当前元素一侧的所有元素的性质，也就是说，旋转和山脉数组的值都有规律可循，元素的值不是随机出现的，在这个特点下，「减治思想」就可以应用在旋转数组和山脉数组里的一些问题上。我们可以把这两类数组统一归纳为部分有序数组。</p><h2 id="二分查找算法的两种思路"><a href="#二分查找算法的两种思路" class="headerlink" title="二分查找算法的两种思路"></a>二分查找算法的两种思路</h2><p>思路 1：在循环体中查找元素 （先介绍）；<br>思路 2：在循环体中排除目标元素一定不存在的区间。</p><ul><li>如果这个二分查找的问题比较简单，在输入数组里不同元素的个数只有 1 个，使用思路 1 ，在循环体内查找这个元素；</li><li>如果这个二分查找的问题比较复杂，要你找一个可能在数组里不存在，或者是找边界这样的问题，使用思路 2 ，在循环体内排除一定不存在目标元素的区间会更简单一些。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 「力扣」第 704 题：二分查找</span></span><br><span class="line">  <span class="comment">// 循环体中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 目标元素可能存在在区间 [left, right]</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 推荐的写法是 int mid = left + (right - left) / 2;</span></span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                <span class="comment">// 目标元素可能存在在区间 [mid + 1, right]</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 目标元素可能存在在区间 [left, mid - 1]</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 排除</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> len = nums.length;</span><br><span class="line">      <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 目标元素可能存在在区间 [left, right]</span></span><br><span class="line">      <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">          <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">              <span class="comment">// 下一轮搜索区间是 [mid+1, right]</span></span><br><span class="line">              left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="comment">// 下一轮搜索区间是 [left, mid]</span></span><br><span class="line">              right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (nums[left] == target)&#123;</span><br><span class="line">          <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找的细节（重点）"><a href="#二分查找的细节（重点）" class="headerlink" title="二分查找的细节（重点）"></a>二分查找的细节（重点）</h2><h3 id="细节-1：循环可以继续的条件"><a href="#细节-1：循环可以继续的条件" class="headerlink" title="细节 1：循环可以继续的条件"></a>细节 1：循环可以继续的条件</h3><p>while (left &lt;= right) 表示在区间里只剩下一个元素的时候，我们还需要继续查找，因此循环可以继续的条件是 left &lt;= right，这一行代码对应了二分查找算法的思路 1：在循环体中查找元素。</p><h3 id="细节-2：取中间数的代码"><a href="#细节-2：取中间数的代码" class="headerlink" title="细节 2：取中间数的代码"></a>细节 2：取中间数的代码</h3><p>取中间数的代码 int mid = (left + right) / 2; ，严格意义上是有 bug 的，这是因为在 left 和 right 很大的时候，left + right 有可能会发生整型溢出，这个时候推荐的写法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这里要向大家说明的是 /2 这个写法表示 下取整。这里可能有的朋友有疑问：这里取中间位置元素的时候，为什么是取中间靠左的这个位置，能不能取中间靠右那个位置呢？答案是完全可以的。先请大家自己思考一下这个问题，我们放在细节 3 说。</p><p>有些朋友可能会看到 int mid = (left + right) &gt;&gt; 1; 这样的写法，这是因为整数右移 1 位和除以 2（向下取整）是等价的，这样写的原因是因为位运算比整除运算要快一点。但事实上，高级的编程语言，对于 / 2 和除以 2 的方幂的时候，在底层都会转化成为位运算，我们作为程序员在编码的时候没有必要这么做，就写我们这个逻辑本来要表达的意思即可，这种位运算的写法，在 C++ 代码里可能还需要注意优先级的问题。</p><p>在 Java 和 JavaScript 里有一种很酷的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这种写法也是完全可以的，这是因为 &gt;&gt;&gt; 是无符号右移，在 left + right 发生整型溢出的时候，右移一位由于高位补 0 ，依然能够保证结果正确。如果是写 Java 和 JavaScript 的朋友，可以这样写。在 Python 语言里，在 32 位整型溢出的时候，会自动转成长整形，这些很细枝末节的地方，其实不是我们学习算法要关注的重点。</p><p>我个人认为这几种种写法差别不大，因为绝大多数的算法面试和在线测评系统给出的测试数据，数组的长度都不会很长，遇到 left + right 整型溢出的概率是很低的，我们推荐大家写 int mid = left + (right - left) / 2;，让面试官知道你注意了整型溢出这个知识点即可。</p><h3 id="细节-3：取中间数可不可以上取整"><a href="#细节-3：取中间数可不可以上取整" class="headerlink" title="细节 3：取中间数可不可以上取整"></a>细节 3：取中间数可不可以上取整</h3><p>我们在「细节 2」里介绍了 int mid = (left + right) / 2; 这个表达示里 / 2 这个除号表示的含义是下取整。很显然，在区间里有偶数个元素的时候位于中间的数有 22 个，这个表达式只能取到位于左边的那个数。一个很自然的想法是，可不可以取右边呢？遇到类似的问题，首先推荐的做法是：试一试就知道了，刚刚我们说了实证的精神，就把</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left + <span class="number">1</span>) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>因为我们的思路是根据中间那个位置的数值决定下一轮搜索在哪个区间，每一轮要看的那个数当然可以不必是位于中间的那个元素，靠左和靠右都是没有问题的。</p><p>甚至取到每个区间的三分之一、四分之一、五分之四，都是没有问题的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">int</span> mid = left + <span class="number">4</span> * (right - left) / <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>一般而言，取位于区间起点二分之一处，首先是因为这样写简单，还有一个更重要的原因是：取中间位置的那个元素在平均意义下效果最好。这一点怎么理解呢？</p><p>在没有任何「<strong>先验知识</strong>」的情况下，在搜索区间里猜中间位置是最好的。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 目标元素可能存在在区间 [left, right]</span></span><br><span class="line">        <span class="comment">// 区间里只剩下一个元素的时候，我们还需要继续查找</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分别处理如下四种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前  [0, -1]</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素  return mid;</span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置 [left, right]，return  right + 1</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况 [left, right]， return right + 1</span></span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[length - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/ <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><ul><li>不可以找到target后向两边扩散（线性查找），这样的话时间复杂度为 $O(N)$</li><li>应该使用两次二分查找，先找target第一次出现的位置，再找target最后一次出现的位置，注意分类讨论，并且把分类讨论的结果合并。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &gt; nums[right] || target&lt;nums[left])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> firstPosition = findFirstPosition(nums, target);</span><br><span class="line">        <span class="keyword">if</span>(firstPosition == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lastPosition = findLastPosition(nums, target);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;firstPosition, lastPosition&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findFirstPosition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 小于一定不是解</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索区间是 [mid+1, right]</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// nums[mid] &gt; target, 下一轮搜索区间是[left ,mid]</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findLastPosition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right-left+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索区间是[left, mid-1]</span></span><br><span class="line">                right = mid -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索区间是[mid, right]</span></span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>findFirstPosition() </p><p>情况 ① ：当 nums[mid] &lt; target 时</p><ul><li>mid 一定不是 target 第一次出现的位置；</li><li>由于数组有序，mid 的左边一定比 nums[mid] 还小，因此 mid 的左边一定不是 target 第一次出现的位置；</li><li>mid 的右边比 nums[mid] 还大，因此 mid 的右边有可能存在 target 第一次出现的位置。<br>因此下一轮搜索区间是 [mid + 1..right]，此时设置 left = mid + 1；</li></ul><p>情况 ② ：当 nums[mid] == target 时</p><ul><li>mid 有可能是 target 第一次出现的位置；</li><li>mid 的左边也有可能是 target 第一次出现的位置；</li><li>mid 的右边一定不是 target 第一次出现的位置。<br>因此下一轮搜索区间在 [left..mid]，此时设置 right = mid。</li></ul><p>情况 ③ ：当 nums[mid] &gt; target 时</p><ul><li>mid 一定不是 target 第一次出现的位置；</li><li>mid 的右边也一定不是 target 第一次出现的位置；</li><li>mid 的左边有可能是 target 第一次出现的位置，因此下一轮搜索区间在 [left..mid - 1]，此时设置 right = mid - 1。</li></ul><p>重点在这里：把情况 ② 和情况 ③ 合并，即当 nums[mid] &gt;= target 的时候，下一轮搜索区间是 [left..mid]，此时设置 right = mid - 1。这样做是因为：只有当区间分割是 [left..mid] 和 [mid + 1..right] 的时候，while(left &lt; right) 退出循环以后才有 left == right 成立。</p><p>findLastPosition() 也可以类似分析，这里省略。</p><p>在本题解中，while(left &lt; right) 只表示退出循环以后有 left == right 成立，不表示搜索区间为左闭右开区间，本题解以及我的其它题解中，对循环不变量的定义均为：在 nums[left..right] 中查找目标元素。</p><h2 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>旋转排序数组，几乎就是有序的数组，可以通过比较特定位置的元素的值判断达到减治的效果（逐渐缩小搜索区间）</p><p>很自然的，会看 <strong>中间数</strong> （位于待搜索区间中间位置的元素），由于不是有序数组，因此不能称之为中位数。</p><p>另外，待搜索区间头和尾的元素位置特殊的元素，有两个比较自然的思路是：</p><ul><li>思路1：看看当前搜索区间的 <strong>左边界</strong> 和 <strong>中间数</strong>，是不是可以缩小搜索区间的范围</li><li>思路2：看看当前搜索区间的 <strong>右边界</strong> 和 <strong>中间数</strong>，是不是可以缩小搜索区间的范围</li></ul><p>要想清楚不妨举几个例子：</p><p>例1：$[1,2,3,4,5]$</p><p>例2：$[2,3,4,5,1]$</p><p>这两个例子的 <strong>中间数</strong> 都比左边界大，但 旋转排序数组 的<strong>最小值</strong>  一个在中间数的左边，一个在右边，因此思路1不合适。</p><p>针对思路2，依然写两个例子，这两个例子分别是 <strong>中间数比右边界大</strong> 和 <strong>中间数比右边界小</strong>，看看能不能推导出一般化的结论。</p><p>例3：$[7,8,9,10,11,12,1,2,3]$</p><p>中间数 11 比右边界 3 大，因此中间数左边的数（包括中间数）都不是 旋转排序数组的最小值，因此下一轮搜索的区间是 $[mid+1, right]$ ，将下一轮搜索的左边界设置成中间数位置 +1，即 $left = mid+1$</p><p>例4：$[7,8,1,2,3]$</p><p>中间数 1 比右边界3小，说明中间数到右边界是递增的，那么中间数右边的（不包括中间数）一定不是 旋转数组的最小值，可以排除，但中间数有可能是整个数组中的最小值，就如本例，因此， 在下一轮搜索区间是 $[left,mid]$，于是把右边界设置为 $right=mid$</p><p>从例 3 和例 4 可以看出，不论中间数比右边界大，还是中间数比右边界小，我们都可以排除掉将近一半的元素，把原始问题转换成一个规模更小的子问题，这正是「减而治之」思想的体现，因此思路 2 可行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[right])&#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 因为题目说 可以假设数组中不存在重复元素</span></span><br><span class="line">                <span class="comment">// 此时一定有 nums[mid] &lt; nums[right]</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><p>分治法是将原问题划分成若干与原问题同结构且规模更小的子问题，等到这些子问题解决了以后，原问题也得到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">return</span> findMin(nums, <span class="number">0</span>, len-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left+<span class="number">1</span> == right)&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.min(nums[left], nums[right]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这一步是关键</span></span><br><span class="line">        <span class="keyword">if</span>(nums[left] &lt; nums[right])&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; nums[right])&#123;</span><br><span class="line">            <span class="comment">// 右边是顺序数组， [mid +1, right] 这个区间里的元素可以不看</span></span><br><span class="line">            <span class="keyword">return</span> findMin(nums, left, mid);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findMin(nums, mid+<span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="154-寻找旋转排序数组中的最小值-II"><a href="#154-寻找旋转排序数组中的最小值-II" class="headerlink" title="154. 寻找旋转排序数组中的最小值 II"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找旋转排序数组中的最小值 II</a></h2><p>有序数组可能存在重复值</p><h3 id="二分法-1"><a href="#二分法-1" class="headerlink" title="二分法"></a>二分法</h3><ul><li>当中间数比右边界表示的数大的时候，中间数一定不是目标数</li><li>当中间数比右边界表示的数小的时候，中间数就可能是目标数</li><li>当中间数比有边界表示的数相等时：此时只把右边界排除掉就好</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) /<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[right])&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[right])&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">assert</span> nums[mid] == nums[right];</span><br><span class="line">                right -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分治法-1"><a href="#分治法-1" class="headerlink" title="分治法"></a>分治法</h3><p>分治法将原问题划分成若干与原问题同结构且规模更小的子问题，等到这些子问题解决了以后，原问题也得到了解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">return</span> findMin(nums, <span class="number">0</span>, len-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[right];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left+<span class="number">1</span> == right)&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.min(nums[left] , nums[right]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(nums[left] &lt; nums[right])&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分治边界</span></span><br><span class="line">        <span class="keyword">int</span> mid = left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == nums[right])&#123;</span><br><span class="line">            <span class="keyword">return</span> findMin(nums, left, right-<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[right])&#123;</span><br><span class="line">            <span class="keyword">return</span> findMin(nums, left, mid);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findMin(nums, mid+<span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h2><p>题中数组不存在重复元素。</p><p>根据示例 [4, 5, 6, 7, 0, 1, 2] ，自己手写几个旋转数组。不难发现：将待搜索区间从中间一分为二，位于中间的元素 nums[mid] 一定会落在其中一个有序区间里。需要分类讨论。</p><p><img src="https://i.loli.net/2021/10/29/6HSdnsJcp7wYvtb.png" alt=""></p><p><strong>中间元素和右边界的关系</strong> 为例，其它情况类似。由于不存在重复元素，<strong>所以它们的关系不是大于就是小于</strong>。</p><p><strong>关键</strong>：把比较好些的判断（<code>target</code> 落在有序的那部分）放在 <code>if</code> 的开头考虑，把剩下的情况放在 <code>else</code> 里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="comment">// 根据分支的逻辑将中间数改成上取整</span></span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[right])&#123;</span><br><span class="line">                <span class="comment">// 此时 [mid..right] 有序</span></span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    <span class="comment">// 如果 target 的值落在这个区间里, 下一轮搜索区间是[mid..right],此时设置left = mid</span></span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 否则，下一轮搜索区间是 [left..mid-1] 此时设置 right = mid - 1</span></span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 此时 nums[mid] &gt;= nums[right] 注意此时 mid 可能与right重合</span></span><br><span class="line">                <span class="comment">// 数组前半个部分有序，即[left..mid] 有序， 为了与上一个分支的逻辑一致，认为[left .. mid-1]</span></span><br><span class="line">                <span class="keyword">if</span>(nums[left] &lt;= target &amp;&amp; target &lt;= nums[mid-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">// 如果target的值落在区间 [left..mid-1] 里，设置right = mid -1</span></span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 否则，下一轮搜索区间是 [mid..right] 此时设置 left = mid</span></span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h2><p>解题核心思想：</p><ul><li>使用二分查找确定两个有序数组的 【分割线】，中位数就由分割线左右两侧的元素决定；</li><li>分割线满足这样的性质：左右两边元素个数相等（这里忽略两个数组长度之和奇偶性的差异）</li><li>分割线左边所有元素 小于等于 分割线右边所有算是</li><li>由于分割线两边元素个数相等，移动分割线就会有【此消彼长】的现象，所以使用二分法去定位</li></ul><p>这条分割线的特点是：</p><ul><li>当数组的总长度为偶数的时候，分割线左右的数字个数总和相等；当是奇数时，分割线左边数字比右边仅仅多1</li><li>分割线左边的所有元素都小于等于分割线右边的所有元素</li></ul><p>如果找到这条分割线，那么中位数可以确定下来，同样得分奇偶性：</p><ul><li>当数组总长度为偶数时，中位数就是分割线左边最大值与分割线右边最小值的平均数</li><li>当是奇数时，中位数就是分割线左边的最大值，因此在数组长度为奇数时，中位数就是分割线左边的最大值。</li></ul><p>因为两个数组本别是有序数组，因此，我们只需要判定交叉的关系中，是否满足左边依然小于等于右边即可，即</p><ul><li>第1个数组分割线左边的第1个数小于等于第2个数组分割线右边的第一个数</li><li>第2个数组分割线左边的第1个数小于等于第1个数组右边的第1个数</li></ul><p>通过不断缩减搜索区间确定分割线的位置</p><ul><li>当数组总长度为偶数时，左边一共有 $\frac{len(nums1) + len(nums2)}{2}$ 个元素</li><li>当数组总长度为奇数时，左边一共有 $\frac{len(nums1) + len(nums2)}{2}+1$个元素</li></ul><p>奇数的时候是除以2向下取整，所以计算左边元素总数的时候就得 +1。也可以向上取整</p><script type="math/tex; mode=display">\frac{len(nums1) + len(nums2) +1}{2}</script><p>这里用到了一个小技巧，把下取整，修改为上取整的时候，只需要在被除数的部分，加上除数减 1 即可</p><p>这样问题就转化为，我们在其中一个数组找到 $i$ 个元素，则另一个数组的元素个数就一定是 $\frac{len(nums1) + len(nums2) +1}{2} - i$</p><p>于是怎么找到 $i$ 是要解决的问题。</p><p>找 i 个元素，我们通常的做法是找索引为 i的元素，因为下标是从 0 开始编号，因此编号为 i 的元素，就刚刚好前面有 i 个元素。因此，i 就是第 1 个数组分割线的右边的第 1 个元素。</p><p>下面我们来看怎么找 i，需要分类讨论。</p><p>情况1：如下图，此时分割线左边元素比右边多1，但是第一个数组分割线比右边第一个数6小于第二个数组分割线左边第一个数8，说明第一个数组左边的数少了，分割线要右移。</p><p><img src="https://i.loli.net/2021/11/01/mtGepBKROfFNsxH.png" alt=""></p><p>情况 2：如下图所示，此时分割线左边的元素总数比右边多 1，但是第 一 个数组分割线左边第 1 个数 8 大于第 二 个数组分割线左边第 1 个数 7。说明，第 1 个数组左边的数多了，分割线要左移。</p><p><img src="https://i.loli.net/2021/11/01/TpRnHvheiKLZW1o.png" alt=""></p><p>就是在这种不断缩小搜索范围的方法中，定位我们要找的 <code>i</code> 是多少。</p><p>极端情况</p><p>这里要注意一个问题，那就是我们要在一个短的数组上搜索 i 。在搜索的过程中，我们会比较分割线左边和右边的数，即 nums[i]、 nums[i - 1]、 nums[j]、 nums[j - 1]，因此 这几个数的下标不能越界。</p><p><img src="https://i.loli.net/2021/11/01/fAvgj7uar2Ksq8X.png" alt=""></p><p>此时，分割线在第 2 个数组的左边没有值，会导致 nums2[j - 1] 的访问越界。因此我们必须在短的数组上搜索 i 。i 的定义是分割线的右边，而它的左边一定有值。这样就能保证，分割线在第 2 个数组的左右两边一定有元素，即分割线一定可以在第 2 个数组的中间切一刀。</p><p>即使我在短数组上搜索边界 <code>i</code> ，还真就可能遇到 <code>i</code> 或者 <code>j</code> 的左边或者右边取不到元素的情况，它们一定出现在退出循环的时候。</p><p><img src="https://i.loli.net/2021/11/01/fMULmj9KbnyeWG2.png" alt=""></p><p>最后，我们把关心的「边界线」两旁的 44 个数的极端情况都考虑一下：</p><ul><li>考虑nums1:</li><li><ul><li>当 i=0 时，对应上图右边，此时数组 nums1 在红线左边为空，可以设置 num1_left_max = 负无穷，这样在最终比较的时候，因为左边粉红色部分要选择出最大值，它一定不会被选中</li><li>当 i=m 时，对应上图左边，此时数组 nums1 在红线右边为空，可设置 num1_right_min = 正无穷，这样在最终比较的时候，因为右边蓝色部分要选择出最小值，它一定不会被选中，于是能兼容其它情况。</li></ul></li><li>数组nums2 同理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1.length &gt; nums2.length)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = nums1;</span><br><span class="line">            nums1 = nums2;</span><br><span class="line">            nums2 = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分割线左边的所有元素需要满足的个数 m + (n-m+1)/2</span></span><br><span class="line">        <span class="keyword">int</span> totalLeft = (m+n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在nums1的区间[0,m]里查找恰当的分割线</span></span><br><span class="line">        <span class="comment">// 使得nums1[i-1] &lt;= nums2[j] &amp;&amp; nums2[j-1] &lt;= nums1[j]</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = m;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = left + (right - left +<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = totalLeft - i;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i-<span class="number">1</span>] &gt; nums2[j])&#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索 [left, i-1]</span></span><br><span class="line">                right = i - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索 [i, right]</span></span><br><span class="line">                left = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = totalLeft - i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nums1LeftMax = i==<span class="number">0</span>? Integer.MIN_VALUE:nums1[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> nums1RightMin = i==m? Integer.MAX_VALUE:nums1[i];</span><br><span class="line">        <span class="keyword">int</span> nums2LeftMax = j == <span class="number">0</span> ? Integer.MIN_VALUE : nums2[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> nums2RightMin = j == n ? Integer.MAX_VALUE : nums2[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( ((m+n) % <span class="number">2</span>) == <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(nums1LeftMax, nums2LeftMax);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)((Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin))) /<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分查找基本思想：减而治之&quot;&gt;&lt;a href=&quot;#二分查找基本思想：减而治之&quot; class=&quot;headerlink&quot; title=&quot;二分查找基本思想：减而治之&quot;&gt;&lt;/a&gt;二分查找基本思想：减而治之&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.n</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Adapting BERT for Continual Learning of a Sequence of Aspect Sentiment Classification Tasks</title>
    <link href="http://example.com/2021/10/18/Adapting-BERT-for-Continual-Learning-of-a-Sequence-of-Aspect-Sentiment-Classification-Tasks/"/>
    <id>http://example.com/2021/10/18/Adapting-BERT-for-Continual-Learning-of-a-Sequence-of-Aspect-Sentiment-Classification-Tasks/</id>
    <published>2021-10-18T04:12:49.000Z</published>
    <updated>2021-10-18T10:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Adapting-BERT-for-Continual-Learning-of-a-Sequence-of-Aspect-Sentiment-Classification-Tasks"><a href="#Adapting-BERT-for-Continual-Learning-of-a-Sequence-of-Aspect-Sentiment-Classification-Tasks" class="headerlink" title="Adapting BERT for Continual Learning of a Sequence of Aspect Sentiment Classification Tasks"></a>Adapting BERT for Continual Learning of a Sequence of Aspect Sentiment Classification Tasks</h1><p>增量学习ASC任务序列的CL系统应解决以下两个问题：</p><ul><li>将从以前的任务中学到的知识转移到新的任务中，帮助它学习更好的模型</li><li>维护以前任务的模型性能，以便不会忘记它们</li></ul><p>针对这些问题，本文提出了一种新的基于胶囊网络的模型B-CL  (<em>BERT-based Continual Learning</em>) ，受《Parameter-efficient transfer learning for NLP》的Adapter Bert启发。</p><p>B-CL通过前向和后向知识转移显著提高了ASC在新任务和旧任务上的效果。</p><p>ASC任务定义如下：给定一个方面(例如，相机评论中的图像质量)和在特定领域(例如，相机)中包含该方面的意义，分类句子对该方面表示正面、负面还是中性(无意见)。</p><p>利用胶囊和动态路由 来识别与新任务相似的先前任务，并利用它们的共享知识来帮助新任务学习，并使用任务掩码来保护任务特定的知识，以避免遗忘(CF)。</p><h2 id="Adapter-BERT"><a href="#Adapter-BERT" class="headerlink" title="Adapter-BERT"></a>Adapter-BERT</h2><p>一个 adapter 是具有残差连接的2层全连接网络。只有adapter(黄框)和layer norm(绿色框)层是可训练的。其他模块(灰色框)被冻结。提出的的B-CL，用CLA代替适配器。CLA有两个子模块：知识共享模块(KSM)和任务特定模块(TSM)</p><p><img src="https://i.loli.net/2021/10/18/7tVlqd2pLezUja4.png" alt=""></p><p>在结束任务的训练期间，只训练适配器和规格化层，不改变任何其他BERT参数，这对CL是好的，因为微调BERT本身会导致严重的遗忘。</p><h2 id="Capsule-Network"><a href="#Capsule-Network" class="headerlink" title="Capsule Network"></a>Capsule Network</h2><p>与CNN不同的是，CapsNet用矢量胶囊取代了标量特征检测器，可以保留图像中的位置和厚度等额外信息。典型的CapsNet有两层胶囊层。</p><p>初级图层存储低级特征映射，类别层生成分类概率，每个胶囊对应一个类。它使用动态路由算法使每个较低级别的封装能够将其输出发送到类似的(或“agreed”，由点积计算的)较高级别封装。这是用来识别和分组相似任务及其共享功能或知识的关键属性。</p><p>值得注意的是，所提出的B-CL不采用整个胶囊网络，因为只对胶囊层和动态路由感兴趣，而对最大边际损失和分类器不感兴趣。</p><h2 id="Continual-Learning-Adapter-CLA"><a href="#Continual-Learning-Adapter-CLA" class="headerlink" title="Continual Learning Adapter (CLA)"></a>Continual Learning Adapter (CLA)</h2><p>B-CL的目标是：</p><ul><li><p>通过知识共享实现相关旧任务与新任务之间的知识转移；</p></li><li><p>通过防止新任务学习覆盖先前任务的特定任务知识来获得回避。</p></li></ul><p>CLA的体系结构如图所示</p><ul><li>知识共享模块(KSM)，用于从相似的先前任务和新任务中识别和利用可共享的知识</li><li>任务特定模块(TSM)，用于学习任务特定神经元并保护它们不被新任务更新。</li></ul><p><img src="https://z3.ax1x.com/2021/10/18/5UAeUS.png" alt=""></p><p>CLA接受两个input：</p><ul><li>来自transformer层内部前馈层的隐藏状态 $h^{(t)}$</li><li>task ID $t$</li></ul><p>output是隐藏状态，具有适合第t个任务的特征。</p><p>KSM 利用胶囊层（见下文）和动态路由对相似的任务和可共享的知识进行分组，</p><p>而 TSM 利用任务掩码 (TM) 来保护特定任务的神经元并让其他神经元自由。 这些自由的神经元稍后被TSM用于一项新的任务。由于TM是可微的，所以整个系统B-CL可以被端到端地训练。下面将详细介绍每个模块。</p><h3 id="Knowledge-Sharing-Module-KSM"><a href="#Knowledge-Sharing-Module-KSM" class="headerlink" title="Knowledge Sharing Module (KSM)"></a>Knowledge Sharing Module (KSM)</h3><p>KSM 将相似的任务和共享的知识（特征）分组到它们之间，以实现相似任务之间的知识转移。 这是通过两个胶囊层（任务胶囊层和知识共享胶囊层）和胶囊网络的动态路由算法实现的。</p><h4 id="Task-Capsule-Layer-TCL"><a href="#Task-Capsule-Layer-TCL" class="headerlink" title="Task Capsule Layer (TCL)"></a>Task Capsule Layer (TCL)</h4><p>TCL中的每个胶囊代表一个任务，TCL准备从每个任务派生低级特征。因此，对于每个新任务，TCL都会添加一个胶囊。</p><p>这种增量生长是有效且容易的，因为这些胶囊是离散的并且不共享参数。而且，每个胶囊只是一个具有少量参数的2层完全连接的网络。</p><p>$h^{(t)} \in R^{d_t\times d_e}$ 为CLA的输入，$d_t$ 是tokens数量，$d_e$是维度。</p><p>令到目前为止学习的任务集为 $T<em>{prev}$（在学习新任务 t 之前）和 $|T</em>{prev}|= n$</p><p>在 TCL 中，我们有 n+1 个不同的胶囊代表所有过去的 n 个学习任务以及新任务 t。</p><p>第 $i(i≤n+1)$ 个任务的封装为:</p><script type="math/tex; mode=display">p_i^{(t)} = f_i (h^{(t)})</script><p>其中 $f_i(\cdot) = MLP_i(\cdot)$ 代表为2层全连接层。</p><h4 id="Knowledge-Sharing-Capsule-Layer-KCL"><a href="#Knowledge-Sharing-Capsule-Layer-KCL" class="headerlink" title="Knowledge Sharing Capsule Layer (KCL)"></a>Knowledge Sharing Capsule Layer (KCL)</h4><p>KCL 中的每个知识共享胶囊都捕获那些具有相似特征或共享知识的任务（即它们的任务胶囊 ${p_i^{(t)}}_1^{n+1}$ ）。</p><p>这是通过动态路由算法自动实现的。 召回动态路由鼓励每个较低级别的胶囊（在案例中为任务胶囊）将其输出发送到类似（或“agreed”）的更高级别的胶囊（在我们的案例中为知识共享胶囊）。</p><p>本质上，相似的任务胶囊（具有许多共享特征）通过较高的系数（决定任务胶囊可以进入下一层的程度）“聚集”在一起，而不同的任务（具有很少的共享特征）则通过低系数。</p><p>这种聚类识别来自多个任务封装的共享特征或知识，并且有助于在相似任务之间向后转移。</p><p>KCL首先将每个任务胶囊 $p<em>i^{(t)}$ 变成临时特征 $u</em>{j|i}^{(t)}$：</p><script type="math/tex; mode=display">u_{j|i}^{(t)} = W_{ij} p_i^{(t)}</script><p>临时特征与权重 $c^{(t)}_{ij}$ 相加以获得知识共享胶囊 $s^{(t)}_j$ 中的初始值：</p><script type="math/tex; mode=display">s_j^{(t)} = \sum_i c_{ij}^{(t)} u_{j|i}^{(t)}</script><p>其中 $c<em>{ij}^{(t)}$ 是耦合系数加和为1。请注意，方程 1 中每个任务的任务胶囊映射到方程 3 中的知识共享胶囊，$c</em>{ij}^{(t)}$ 表示第 i 个任务的表示对第 j 个知识共享胶囊的信息量。</p><p>因此，知识共享胶囊可以表示不同的可共享知识。这确保仅使用与新任务显着或相似的任务胶囊，而忽略（并因此保护）其他任务胶囊以学习更一般的可共享知识。</p><p>在反向传播时，用较小梯度更新具有低 $c^{(t)}<em>{ij }$ 的相异任务，然而相似的任务有较高的$c^{(t)}</em>{ij }$被更新较大的梯度。这鼓励在类似任务之间向后转移。</p><p>Dynamic Routing</p><p>$c_{ij}^{(t )}$ 是由“Routing Softmax”计算的：</p><script type="math/tex; mode=display">c_{ij}^{(t)} = \frac{exp(b_{ij}^{(t)})}{ \sum_o exp(b_{io}^{(t)})}</script><p>其中每个 $b_{ij}$ 是对数先验概率，显示任务胶囊 $i$ 与知识共享胶囊 $j$ 的显著性或相似性。</p><p>它被初始化为0，表示它们之间在开始时没有显著联系。应用动态路由算法来更新 $b_{ij}$：</p><script type="math/tex; mode=display">b_{ij}^{(t)} \leftarrow b_{ij}^{(t)} + a_{ij}^{(t)}</script><p>其中 $a<em>{ij}$ 是协议系数，直观上，这一步倾向于聚合知识共享胶囊上的相似（或“agreed”）任务，具有更高的一致性系数 $a</em>{ij}^{(t)}$，因此具有更高的 logit $b^{(t)}<em>{ij}$ 或耦合系数 $c</em>{ij}^{(t )}$ 。协议系数的计算公式为 :</p><script type="math/tex; mode=display">a_{ij}^{(t)} = u_{j|i} ^{(t)} \cdot v_{j}^{(t)}</script><p>其中 $v_{j}^{(t)}$ 是规范化的表示形式，通过非线性 squash</p><script type="math/tex; mode=display">v_{j}^{(t)} = \frac{ ||s_j^{(t)}||^2 }{1+||s^{(t)}_j||} \frac{s_j^{(t)}}{||s_j^{(t)}||}</script><p>对于第一个任务 $s<em>j^{(t)} =  u</em>{j|i}^{(t)} $ , 其中 $v^{(t)}_{j}$ 归一化为[0，1]到表示知识共享胶囊 j 的激活概率。</p><h3 id="Task-Specific-Module-TSM"><a href="#Task-Specific-Module-TSM" class="headerlink" title="Task Specific Module (TSM)"></a>Task Specific Module (TSM)</h3><p>虽然知识共享对ASC很重要，但为以前的任务保存特定于任务的知识以防止遗忘(CF)也同样重要。</p><p>为此，使用任务掩码。具体地说，首先检测每个旧任务使用的神经元，然后在学习新任务时关闭或屏蔽所有使用过的神经元。</p><p><img src="https://z3.ax1x.com/2021/10/18/5UY0HO.png" alt=""></p><p>每项任务的两行对应于TSM中的 $k^{(t)}_0$ 和 $k^{(t)}_1$。在训练前的细胞中，0的细胞是需要保护(掩蔽)的神经元，那些没有编号的细胞是游离的神经元(未使用)。</p><p>在学习第一个任务（任务 0）后，获得了用橙色标记的有用神经元，每个神经元中都标有 1，作为学习未来任务的掩码。 在学习任务 1 中，那些对任务 0 有用的神经元被屏蔽（左侧的橙色神经元或细胞中的 0 为 0）。 该过程还学习了任务 1 的有用神经元，用 1 标记为绿色。 当任务 2 到达时，任务 0 和 1 的所有重要神经元都被屏蔽，即其掩码条目设置为 0（训练前的橙色和绿色）。 在训练任务 2 之后，我们看到任务 2 和任务 1 有一个对它们都很重要的共享神经元。 共享神经元以红色和绿色标记。</p><p>在训练后的细胞中，那些带有1的细胞显示了对当前任务重要的神经元，这些神经元被用作未来的mask。具有一种以上颜色的单元格表示它们由多个任务共享。这0个没有颜色的单元格不会被任何任务使用。</p><h3 id="Task-Masks"><a href="#Task-Masks" class="headerlink" title="Task Masks"></a>Task Masks</h3><p>给定知识共享胶囊 $s^{(t)}_j$，TSM 通过全连接的网络将它们映射到输入 $k_l^{(t)} $，其中 $l$ 是 TSM 中的第 $l$ 层。</p><p>在训练任务的分类器期间，为TSM中每个层 $l$ 的每个任务 $t$ 训练任务掩码（“软”二元掩码）$m_l^{(t)}$，指示该层中对任务重要的神经元。</p><p>在这里借用了hard attention想法，并利用任务ID embedding来训练任务掩码。</p><p>对于task ID t，其嵌入 $e^{(t)}_l$ 由网络的其他部分一起学习的可微确定性参数组成。</p><script type="math/tex; mode=display">m_l^{(t)} = \sigma(se_l^{(t)})</script><p>给定 TSM 中每一层的输出 $k^{(t)}_l$，按元素相乘 $k^{(t)}_l ⊗ m_l^{(t)}$ 。最后一层 $k^{(t)}$ 的屏蔽输出通过跳跃连接馈送到下一层BERT。</p><p>在学习任务 $t$ 之后，保存最终 $m^{(t)}_l$ 并将其添加到集合 ${m^{(t)}_l}$。</p><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><p>对于每个过去的任务 $i<em>{prev} \in T</em>{prev}$，其掩码 $m^{(i<em>{prev})}_l$ 指示该任务使用的需要保护的神经元。在学习任务 t 中，$m_l^{(i</em>{prev})}$ 用于将 TSM 中第 $l$ 层所有使用的神经元上的梯度 $g_l^{(t)}$ 设置为 0。</p><p>在修改梯度之前，我们首先通过所有先前任务的掩码，累积所有使用的神经元。 由于 $m_l^{(iprev)}$ 是二进制的，我们使用最大池化来实现累计：</p><script type="math/tex; mode=display">m_l^{(t_{ac})} = MaxPool(\{m_l^{i_{prev}}\})</script><p>$m<em>l^{(t</em>{ac})}$ 被应用于梯度：</p><script type="math/tex; mode=display">g_l^{(t)} = g_l^{(t)} \otimes (1- m_l^{(t_{ac})})</script><p>对应于 $m^{(t<em>{ac})}_l$ 中的 1 个条目的那些梯度设置为 0，而其他保持不变。 通过这种方式，旧任务中的神经元受到保护。 请注意，我们扩展（复制）向量  $m^{(t</em>{ac})}_l$  以匹配 $g^{(t)}_l$ 的维度。</p><p>虽然这个想法是直观的，但 $e^{(t)}<em>l $ 并不容易训练。为了使 $e^{(t)}_l $  的学习更容易和更稳定，应用了退火策略。也就是说，s 在训练期间退火，引入梯度流，并在测试期间设置 $s=s</em>{max}$。</p><p>往上三个等式 将单位阶跃函数近似为掩码，当 s → ∞ 时，$m^{(t)}_l \to {0,1}$。一个训练 epoch 开始时，所有神经元都是同等活跃的，在这个 epoch 内逐渐极化。</p><p>具体地说，s 按如下方式退火：</p><script type="math/tex; mode=display">s = \frac{1}{s_{max}} + (s_{max} - \frac{1}{s_{max}}) \frac{b-1}{B-1}</script><p>其中 b 是批次索引，B 是epoch中的批次总数。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p><img src="https://z3.ax1x.com/2021/10/18/5UOc7R.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Adapting-BERT-for-Continual-Learning-of-a-Sequence-of-Aspect-Sentiment-Classification-Tasks&quot;&gt;&lt;a href=&quot;#Adapting-BERT-for-Continual-L</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>只用一行代码可以提高模型表现吗？</title>
    <link href="http://example.com/2021/10/10/%E5%8F%AA%E7%94%A8%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%8F%AF%E4%BB%A5%E6%8F%90%E9%AB%98%E6%A8%A1%E5%9E%8B%E8%A1%A8%E7%8E%B0%E5%90%97%EF%BC%9F/"/>
    <id>http://example.com/2021/10/10/%E5%8F%AA%E7%94%A8%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%8F%AF%E4%BB%A5%E6%8F%90%E9%AB%98%E6%A8%A1%E5%9E%8B%E8%A1%A8%E7%8E%B0%E5%90%97%EF%BC%9F/</id>
    <published>2021-10-10T14:59:59.000Z</published>
    <updated>2021-10-20T14:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="只用一行代码能提高模型表现吗"><a href="#只用一行代码能提高模型表现吗" class="headerlink" title="只用一行代码能提高模型表现吗?"></a>只用一行代码能提高模型表现吗?</h1><p>一行代码能做什么，有的人能发顶会，而有的人…</p><p>相信大家在训练模型的时候都会遇到一个现象，训练集损失降到一定的值之后，验证集的损失就开始上升了，在实验中一般奇怪的是准确率还跟着上升。这是为什么？如下图所示：</p><p><img src="https://z3.ax1x.com/2021/10/09/5kiiNV.png" alt=""></p><p>先看图(a)，是一个正常的训练过程，对于阶段A，随着training loss的降低，test loss也会 跟着降低;</p><p>但是到阶段B后，我们继续在训练集上训练，会让test loss上升。我们通常认为这是过拟合了，因为泛化误差变大了。</p><p>图 (b) 是ICML2020上《Do We Need Zero Training Loss After Achieving Zero Training Error》提出的flooding方法。这是一种使训练损失在一个小常量附近浮动的方法，以防止训练损失趋近于零 (这也是flooding的约束假设)。</p><p>为什么要防止训练损失趋近于0呢？</p><p>如果我们在模型已经记住了训练数据，完全没有错误的情况下仍继续训练，训练损失可以很容易地变得(接近)零，特别是对于过度参数化的模型。我们的模型其实就是个函数拟合器，在训练集上拟合的太好就容易发生过拟合。</p><p>经过推导（下文），flooding其实也和正则化的一些方法一样，通过各种方式避免训练过多。正则化方法可以被认为是间接控制训练损失的方法，通过引入额外的约束假设。</p><p>这里科普一下花书对于正则化的官方定义：</p><blockquote><p>凡是可以减少泛化误差(过拟合) 而不是减少训练误差的方法——正则化方法。</p></blockquote><p>其实对抗训练从理论上也是一种正则化方法，而正则化其实也可以理解成我们在求解最优化问题中的约束条件。我们通常希望将模型约束到一个较为”平坦“的损失，能够使得模型鲁棒性、泛化性更好。</p><p>从svm的角度来思考这个问题。对于一个线性可分的二分类问题，有无数条分类面能将其分开，而svm是去挑选能满足“最大间隔”的分类器。从另一个角度来理解是，越平坦的损失，是不是能越尽可能的将不同类给分开，因为样本进行些许扰动，损失的变化不会太大，相当于进行细微扰动后的样本也不会被分类到另一类去。</p><h2 id="flooding-方法分析"><a href="#flooding-方法分析" class="headerlink" title="flooding 方法分析"></a>flooding 方法分析</h2><p>论文其实就一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logits = model(x)</span><br><span class="line">loss = criterion(logits, y)</span><br><span class="line">loss = (loss - b).<span class="built_in">abs</span>() + b <span class="comment"># This is it!</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">loss.backward()</span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure><p>泛洪是直接解决训练损失变为(接近)零的问题。当训练损失达到合理的小值时，泛洪故意阻止训练损失的进一步减少。</p><p>设原来的损失函数为 $\mathcal{L}(\theta)$ ，改为 $\tilde{\mathcal{L}}(\theta)$:</p><script type="math/tex; mode=display">\tilde{\mathcal{L}}(\theta) =  |\mathcal{L}(\theta) - b| + b</script><p>其中 b 是超参数阈值</p><p>当 $\mathcal{L}(\theta) &gt; b$ 时， $ \tilde{\mathcal{L}}(\theta) =\mathcal{L}(\theta)$, 这个时候和正常他梯度下降无异；</p><p>当$\mathcal{L}(\theta) &lt;b$ 时， $ \tilde{\mathcal{L}}= 2b - \mathcal{L}(\theta)$ 变成了梯度上升了。</p><blockquote><p>当training loss大于一个阈值（flood level）时，进行正常的梯度下降；当training loss低于阈值时，会反过来进行梯度上升，让training loss保持在一个阈值附近，让模型持续进行“random walk”，并期望模型能被优化到一个平坦的损失区域，这样发现test loss进行了double decent！一个简单的理解是，这和early stop类的方法类似，防止参数被优化到一个不好的极小值出不来。</p></blockquote><p>这里借用 <a href="https://kexue.fm/archives/7643">我们真的需要把训练集的损失降低到零吗？</a> 的推导</p><p>当损失函数达到 b 之后，训练流程大概就是在交替执行梯度下降和梯度上升。直观想的话，感觉一步上升一步下降，似乎刚好抵消了。事实真的如此吗？我们来算一下看看。假设先下降一步后上升一步，学习率为 $\epsilon$，那么：</p><script type="math/tex; mode=display">\theta_n = \theta_{n-1} - \epsilon g(\theta_{n-1}) \ ,\ \ \theta_{n+1} = \theta_n + \epsilon g(\theta_n)</script><p>其中 $g(\theta) = \nabla_{\theta} \mathcal{L}(\theta)$ , 现在有：</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}\theta_{n+1} =&\, \theta_{n-1} - \varepsilon g(\theta_{n-1}) + \varepsilon g\big(\theta_{n-1} - \varepsilon g(\theta_{n-1})\big)\\ \approx&\,\theta_{n-1} - \varepsilon g(\theta_{n-1}) + \varepsilon \big(g(\theta_{n-1}) - \varepsilon \nabla_{\theta} g(\theta_{n-1}) g(\theta_{n-1})\big)\\ =&\,\theta_{n-1} - \frac{\varepsilon^2}{2}\nabla_{\theta}\Vert g(\theta_{n-1})\Vert^2 \end{aligned}\end{equation}</script><p>近似那一步是使用了泰勒展式对损失函数进行近似展开，最终的结果就是相当于损失函数为梯度惩罚 $\Vert g(\theta)\Vert^2=\Vert\nabla<em>{\theta}\mathcal{L}(\theta)\Vert^2$、学习率为 $\frac{\varepsilon^2}{2}$ 的梯度下降。更妙的是，改为“先上升再下降”，其表达式依然是一样的（这不禁让我想起“先升价10%再降价10%”和“先降价10%再升价10%”的故事）。因此，平均而言，Flooding对损失函数的改动，相当于在保证了损失函数足够小之后去最小化 $\Vert\nabla</em>{\theta}\mathcal{L}(\theta)\Vert^2$，也就是推动参数往更平稳的区域走，这通常能提供提高泛化性能（更好地抵抗扰动），因此一定程度上就能解释Flooding其作用的原因了。</p><p>本质上来讲，这跟往参数里边加入随机扰动、对抗训练等也没什么差别，只不过这里是保证了损失足够小后再加扰动。读者可以参考<a href="https://kexue.fm/archives/7466">《泛化性乱弹：从随机噪声、梯度惩罚到虚拟对抗训练》</a>了解相关内容，也可以参考“圣经”《深度学习》第二部分第七章的“正则化”一节。</p><h2 id="关于-b-的选择"><a href="#关于-b-的选择" class="headerlink" title="关于 b 的选择"></a>关于 b 的选择</h2><p> b 的选择，原论文说 b 的选择是一个暴力迭代的过程，需要多次尝试</p><blockquote><p> The flood level is chosen from $b\in {0, 0.01,0.02,…,0.50}$</p></blockquote><p>脑洞：b 无非就是决定什么时候开始交替训练罢了，那如果我们从一开始就用不同的学习率进行交替训练呢？也就是自始自终都执行</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}&\theta_n = \theta_{n-1} - \varepsilon_1 g(\theta_{n-1})\\ &\theta_{n+1} = \theta_n + \varepsilon_2 g(\theta_n) \end{aligned}\end{equation}</script><p>其中 $\varepsilon_1&gt; \varepsilon_2$，这样我们就把 b 去掉了（引入了 $ \varepsilon_1, \varepsilon_2$ 的选择，天下没有免费的午餐）。重复上述近似展开，我们就得到</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned} \theta_{n+1} =& \, \theta_{n-1} - \varepsilon_1g(\theta_{n-1})+\varepsilon_2g(\theta_{n-1} - \varepsilon_1g(\theta_{n-1}))\\\approx&\, \theta_{n-1} - \varepsilon_1g(\theta_{n-1}) + \varepsilon_2(g(\theta_{n-1}) - \varepsilon_1\nabla_\theta g(\theta_{n-1})g(\theta_{n-1}))\\=&\, \theta_{n-1} - (\varepsilon_1 - \varepsilon_2) g(\theta_{n-1}) - \frac{\varepsilon_1\varepsilon_2}{2}\nabla_{\theta}\Vert g(\theta_{n-1})\Vert^2\\ =&\,\theta_{n-1} - (\varepsilon_1 - \varepsilon_2)\nabla_{\theta}\left[\mathcal{L}(\theta_{n-1}) + \frac{\varepsilon_1\varepsilon_2}{2(\varepsilon_1 - \varepsilon_2)}\Vert \nabla_{\theta}\mathcal{L}(\theta_{n-1})\Vert^2\right] \end{aligned}\end{equation}</script><p>这就相当于自始自终都在用学习率 $\varepsilon<em>1-\varepsilon_2$ 来优化损失函数 $\mathcal {L}(\theta) + \frac {\varepsilon_1\varepsilon_2}{2 (\varepsilon_1 - \varepsilon_2)}\Vert\nabla</em>{\theta}\mathcal {L}(\theta)\Vert^2$ 也就是说一开始就把梯度惩罚给加了进去，这样能提升模型的泛化性能吗？<a href="http://www.danielpovey.com/files/2017_interspeech_backstitch.pdf">《Backstitch: Counteracting Finite-sample Bias via Negative Steps》</a>里边指出这种做法在语音识别上是有效的，请读者自行测试甄别。</p><p>这种做法在这篇博客上做了尝试，可能验证loss会降的更低一点，但具体得分情况还得自己尝试。<a href="https://wmathor.com/index.php/archives/1551/">我们真的需要把训练集的损失降到零吗？</a></p><h2 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h2><p>在第五届达观杯竞赛中使用的BERT模型，进行了实验。原论文的实验配合Eearly Stop 和 Weight decay 一起使用效果较好。重要的要花时间去调的是b的取值，初始的b值一般设为 验证集loss开始上扬的值的一半。</p><p>在我的实验中发现，在预训练后的bert模型加上dice loss之后，验证集loss上扬的情况就不存在了。但是预训练后的bert加上cross entropy还是会上扬。而未经过预训练的bert无论是在dice loss还是cross entropy上都会上扬。分析背后的原因可能有二：</p><ul><li>预训练后的bert模型表现更加稳定，对数据有一定的认识。</li><li>cross entropy对每个样本都一视同仁，不管当前样本是简单还是复杂。当简单样本有很多时，模型训练就会被这些简单的样本占据，使得模型难以从复杂样本中学习，而dice loss一旦模型正确分类当前样本（刚刚过0.5），就会使模型更少关注它，而不是像交叉熵那样，鼓励模型迫近0或1这两个点。这就能有效避免模型训练受到简单样本的支配，同时也防止了过拟合。</li></ul><h3 id="无flooding的情况下"><a href="#无flooding的情况下" class="headerlink" title="无flooding的情况下"></a>无flooding的情况下</h3><p>预训练后的bert+dice loss 的情况如下图所示。</p><p><img src="https://z3.ax1x.com/2021/10/10/5Ah6FP.png" alt=""></p><p>预训练后的bert + cross entropy，依旧上扬但相比下一个图未经预训练bert的情况要好一些。</p><p><img src="https://z3.ax1x.com/2021/10/10/5ETvN9.png" alt=""></p><p>未经预训练的bert+cross entropy</p><p><img src="https://z3.ax1x.com/2021/10/10/5EIsUA.png" alt=""></p><h3 id="经过flooding后"><a href="#经过flooding后" class="headerlink" title="经过flooding后"></a>经过flooding后</h3><p>No_pretrain bert/ cross entropy/  flooding b=0.5/ weight decy=0.01/ early patience=12 相比于上图验证集的loss已经不在无止境的上扬了。在下图的15到20step之间train的loss也不是和上图一样一路走低，而是出现了波动，这和论文的预期一致。</p><p><img src="https://z3.ax1x.com/2021/10/10/5ECkIP.png" alt=""></p><p>未经预训练后的bert b=0.5  dice loss</p><p><img src="https://z3.ax1x.com/2021/10/10/5EIvb4.png" alt=""></p><p>未经预训练后的bert，b=1.0 ,cross entropy</p><p><img src="https://i.loli.net/2021/10/10/DfcyQP3n5oqFLze.png" alt=""></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>flooding确实可以缓解验证集损失上扬的现象，而且本质还是个正则化的功能。至于具体效果有多大，是好是坏还是要根据具体任务去调试b的取值。</p><p>不过我的实验可以证明  预训练后的bert 和 dice loss 确实是可以让模型避免出现类似过拟合的现象。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://wmathor.com/index.php/archives/1551/">我们真的需要把训练集的损失降到零吗？</a></p><p><a href="https://zhuanlan.zhihu.com/p/163676138">【论文】一行代码发一篇ICML？</a></p><p><a href="https://kexue.fm/archives/7643">我们真的需要把训练集的损失降低到零吗？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;只用一行代码能提高模型表现吗&quot;&gt;&lt;a href=&quot;#只用一行代码能提高模型表现吗&quot; class=&quot;headerlink&quot; title=&quot;只用一行代码能提高模型表现吗?&quot;&gt;&lt;/a&gt;只用一行代码能提高模型表现吗?&lt;/h1&gt;&lt;p&gt;一行代码能做什么，有的人能发顶会，而有的</summary>
      
    
    
    
    
    <category term="ML&amp;DL" scheme="http://example.com/tags/ML-DL/"/>
    
  </entry>
  
  <entry>
    <title>79/130/200/733FloodFill/17/22/784字符串回溯</title>
    <link href="http://example.com/2021/10/10/79-130-200-733FloodFill-17-22-784%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%BA%AF/"/>
    <id>http://example.com/2021/10/10/79-130-200-733FloodFill-17-22-784%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%BA%AF/</id>
    <published>2021-10-10T01:37:48.000Z</published>
    <updated>2021-10-22T01:21:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="79-130-200-733FloodFill-17-22-784字符串回溯"><a href="#79-130-200-733FloodFill-17-22-784字符串回溯" class="headerlink" title="79/130/200/733FloodFill/17/22/784字符串回溯"></a>79/130/200/733FloodFill/17/22/784字符串回溯</h1><h2 id="Flood-Fill"><a href="#Flood-Fill" class="headerlink" title="Flood Fill"></a>Flood Fill</h2><p>提示：Flood 是「洪水」的意思，Flood Fill 直译是「泛洪填充」的意思，体现了洪水能够从一点开始，迅速填满当前位置附近的地势低的区域。类似的应用还有：PS 软件中的「点一下把这一片区域的颜色都替换掉」，扫雷游戏「点一下打开一大片没有雷的区域」。</p><p>下面这几个问题，思想不难，但是初学的时候代码很不容易写对，并且也很难调试。我们的建议是多写几遍，忘记了就再写一次，参考规范的编写实现（设置 visited 数组，设置方向数组，抽取私有方法），把代码写对。</p><h3 id="79-单词搜索"><a href="#79-单词搜索" class="headerlink" title="79. 单词搜索"></a><a href="https://leetcode-cn.com/problems/word-search/">79. 单词搜索</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] DIRECTIONS = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] visited;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] charArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[][] board;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        rows = board.length;</span><br><span class="line">        <span class="keyword">if</span> (rows==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cols = board[<span class="number">0</span>].length;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.len = word.length();</span><br><span class="line">        <span class="keyword">this</span>.charArray = word.toCharArray();</span><br><span class="line">        <span class="keyword">this</span>.board = board;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(i, j, <span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;rows &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;cols;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin == len-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> board[x][y] == charArray[begin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(board[x][y] == charArray[begin])&#123;</span><br><span class="line">            visited[x][y] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] direction:DIRECTIONS)&#123;</span><br><span class="line">                <span class="keyword">int</span> newX = x + direction[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = y + direction[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(inArea(newX,newY) &amp;&amp; !visited[newX][newY])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dfs(newX, newY, begin+<span class="number">1</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[x][y] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>偏移量数组在二维平面内是经常使用的，可以把它的设置当做一个技巧，并且在这个问题中，偏移量数组内的 4 个偏移的顺序无关紧要；<br>说明：类似使用这个技巧的问题还有：「力扣」第 130 题：被围绕的区域、「力扣」第 200 题：岛屿数量。</p><p>对于这种搜索算法，我认为理解 DFS 和状态重置并不难，代码编写也相对固定，难在代码的编写和细节的处理，建议多次编写，自己多总结多思考，把自己遇到的坑记下。</p><h2 id="130-被围绕的区域"><a href="#130-被围绕的区域" class="headerlink" title="130. 被围绕的区域"></a><a href="https://leetcode-cn.com/problems/surrounded-regions/">130. 被围绕的区域</a></h2><h4 id="法一：深度优先遍历"><a href="#法一：深度优先遍历" class="headerlink" title="法一：深度优先遍历"></a>法一：深度优先遍历</h4><p>关键：与边界相连 $O$ 不能被替换成 $X$</p><p>具体步骤：</p><ul><li>第一步：把四周有 $O$ 的地方都替换成 $-$，在四周进行 floodfill 算法（染色）</li><li>第二步：再从头到尾遍历一遍，把$O$ 换成 $X$，把 $-$ 换成 $O$</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] DIRECTIONS = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        rows = board.length;</span><br><span class="line">        <span class="keyword">if</span>(rows==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        cols = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(cols==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一步：把四周的 0 以及与 0 连通的 0 都设置成 -</span></span><br><span class="line">        <span class="comment">// 第一列和最后一列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rows; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                dfs(i, <span class="number">0</span>, board);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(board[i][cols-<span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                dfs(i, cols-<span class="number">1</span>, board);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一行和最后一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cols;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[<span class="number">0</span>][i] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                dfs(<span class="number">0</span>, i, board);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(board[rows-<span class="number">1</span>][i] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                dfs(rows-<span class="number">1</span>, i, board);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二行：遍历一次棋盘</span></span><br><span class="line">        <span class="comment">// 1. 剩下的O就是被包围的O</span></span><br><span class="line">        <span class="comment">// 2. - 是原来不能被包围的O，恢复成O</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rows;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;rows &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;cols;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">char</span>[][] board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inArea(i,j,rows,cols) &amp;&amp; board[i][j]==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">            board[i][j] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">4</span>; k++)&#123;</span><br><span class="line">                <span class="keyword">int</span> newX = i + DIRECTIONS[k][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = j + DIRECTIONS[k][<span class="number">1</span>];</span><br><span class="line">                dfs(newX, newY, board);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(rows * cols)$ ，其中 rows 和 cols 分别为矩阵的行数和列数， 深度优先遍历过程中，每一个单元格至多只会被标记一次</li><li>空间复杂度：$O(rows * cols)$ ，深度优先遍历最多使用的栈的开销为整个棋盘大小</li></ul><h3 id="法二：广度优先遍历"><a href="#法二：广度优先遍历" class="headerlink" title="法二：广度优先遍历"></a>法二：广度优先遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] DIRECTIONS = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        rows = board.length;</span><br><span class="line">        <span class="keyword">if</span>(rows==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        cols = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(cols==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一步：把四周的‘O’ 全部推入队列，通过广度优先遍历，把’O‘连通的地方全部编辑</span></span><br><span class="line">        Queue&lt;<span class="keyword">int</span> []&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rows; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, <span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(board[i][cols-<span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, cols-<span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cols; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[<span class="number">0</span>][i] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(board[rows-<span class="number">1</span>][i] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;rows-<span class="number">1</span>, i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] top = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> i = top[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> j = top[<span class="number">1</span>];</span><br><span class="line">            board[i][j] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] direction : DIRECTIONS)&#123;</span><br><span class="line">                <span class="keyword">int</span> newX = i + direction[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = j + direction[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(inArea(newX, newY, rows, cols) &amp;&amp; board[newX][newY]==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第 2 步：恢复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; cols;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法三：并查集"><a href="#法三：并查集" class="headerlink" title="法三：并查集"></a>法三：并查集</h3><ul><li>把四周的 $O$ 都和一个虚拟节点合并起来</li><li>在内部，只看两个方向，把 $O$ 都合并起来</li><li>最后再扫一次数组，不和 虚拟节点 链接的 $O$都标记成 $X$</li></ul><p>并查集的写法容易受到 floorfill的影响， 用并查集的时候，其实只用每一行的右边和下面都看一下，只针对 $O$， 能合并就合并一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                parent[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(x != parent[x])&#123;</span><br><span class="line">                parent[x] = parent[parent[x]];</span><br><span class="line">                x = parent[x];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> xRoot = find(x);</span><br><span class="line">            <span class="keyword">int</span> yRoot = find(y);</span><br><span class="line">            <span class="keyword">if</span>(xRoot == yRoot)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parent[xRoot] = yRoot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cols)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*cols +y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = board.length;</span><br><span class="line">        <span class="keyword">if</span>(rows == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cols = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(cols == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UnionFind unionFind = <span class="keyword">new</span> UnionFind(rows * cols + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> dummyNode = rows*cols;</span><br><span class="line">        <span class="comment">// 填写第一行和最后一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; cols; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[<span class="number">0</span>][j] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                unionFind.union(getIndex(<span class="number">0</span>, j, cols), dummyNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(board[rows-<span class="number">1</span>][j] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                unionFind.union(getIndex(rows-<span class="number">1</span>, j ,cols), dummyNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 填写第 1 列和最后一列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                unionFind.union(getIndex(i, <span class="number">0</span>, cols), dummyNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (board[i][cols - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                unionFind.union(getIndex(i, cols - <span class="number">1</span>, cols), dummyNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span>[] direction : directions)&#123;</span><br><span class="line">                        <span class="keyword">int</span> newX = i + direction[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">int</span> newY = j + direction[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(newX &lt; rows &amp;&amp; newY&lt;cols &amp;&amp; board[newX][newY] ==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                            unionFind.union(getIndex(i, j, cols), getIndex(newX, newY, cols));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!unionFind.isConnected(getIndex(i, j, cols), dummyNode)) &#123;</span><br><span class="line">                        board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/">200. 岛屿数量</a></h2><p>Flood法：从一个区域中提取若干个连通的点与其他相邻区域分开。</p><p>从一个点扩散开，找到与其连通的点，其实就是从一个点卡死，进行一次深度优先或广度优先遍历，发现一片连着的区域。把与之相连的所有的格子都标记上，视为发现了一个「岛屿」。</p><p>深度优先：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] visited;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] DIRECTIONS = &#123;&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,-<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[][] grid;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        rows = grid.length;</span><br><span class="line">        <span class="keyword">if</span>(rows==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        cols = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(cols==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">        <span class="keyword">this</span>.grid = grid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果是岛屿中的一个点，并且没有被访问过，就进行深度优先遍历</span></span><br><span class="line">                <span class="keyword">if</span> (!visited[i][j] &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    dfs(i, j);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;rows &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;cols;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line">            <span class="keyword">int</span> newX = i + DIRECTIONS[k][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> newY = j + DIRECTIONS[k][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果不越界，还是陆地，没有被访问过</span></span><br><span class="line">            <span class="keyword">if</span> (inArea(newX, newY) &amp;&amp; grid[newX][newY] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[newX][newY]) &#123;</span><br><span class="line">                dfs(newX, newY);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>广度优先：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] DIRECTIONS = &#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cols;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[][] grid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] visited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        rows = grid.length;</span><br><span class="line">        <span class="keyword">if</span> (rows == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cols = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">this</span>.grid = grid;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[i][j] &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    bfs(i, j);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(i * cols + j);</span><br><span class="line">        <span class="comment">// 注意：这里要标记上已经访问过</span></span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> curX = cur / cols;</span><br><span class="line">            <span class="keyword">int</span> curY = cur % cols;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> newX = curX + DIRECTIONS[k][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = curY + DIRECTIONS[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (inArea(newX, newY) &amp;&amp; grid[newX][newY] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[newX][newY]) &#123;</span><br><span class="line">                    queue.offer(newX * cols + newY);</span><br><span class="line">                    </span><br><span class="line">                    visited[newX][newY] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; cols;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并查集</p><p>关于连通性问题，并查集也是常用的数据结构</p><p>思路：并查集中维护连通分量的个数，在遍历的过程中：</p><ul><li>相邻的陆地（只需要向右看和向下看）合并，只要发生过合并，岛屿数量就减一</li><li>在遍历过程中，同时记录空地的数量</li><li>并查集中连通分量的个数 - 空地的个数 = 岛屿数</li></ul><h2 id="733-图像渲染"><a href="#733-图像渲染" class="headerlink" title="733. 图像渲染"></a><a href="https://leetcode-cn.com/problems/flood-fill/">733. 图像渲染</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] directions = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        m = image.length;</span><br><span class="line">        n = image[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> currColor = image[sr][sc];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currColor!=newColor)&#123;</span><br><span class="line">            dfs(sr, sc,currColor, newColor, image); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;m &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> color, <span class="keyword">int</span> newColor, <span class="keyword">int</span>[][] image)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == color)&#123;</span><br><span class="line">            image[sr][sc] = newColor;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] direct : directions)&#123;</span><br><span class="line">                <span class="keyword">int</span> newx = sr + direct[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newy = sc + direct[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(inArea(newx, newy))&#123;</span><br><span class="line">                    dfs(newx,newy, color, newColor, image);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h2><ul><li>由于字符追加到后面，是新创建一个对象，因此 <strong>没有显式回溯（状态重置）的过程 </strong>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        String[] digitsMap =  &#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        findCombinations(digits, digitsMap, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findCombinations</span><span class="params">(String digits, String[] digitsMap, <span class="keyword">int</span> start, String pre, List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == digits.length())&#123;</span><br><span class="line">            res.add(pre);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String nextStr = digitsMap[digits.charAt(start) - <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line">        <span class="keyword">int</span> len = nextStr.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            findCombinations(digits, digitsMap, start+<span class="number">1</span>, pre+nextStr.charAt(i), res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode-cn.com/problems/letter-case-permutation/">784. 字母大小写全排列</a></h2><p><img src="https://i.loli.net/2021/10/21/bfzBmC8V7c3gFhO.png" alt=""></p><p>大小写转换问题，使用异或运算转换。</p><p>ASCII表 A到Z，Z完了之后没有直接到a，中间间隔了6个字符</p><p><img src="https://i.loli.net/2021/10/21/5IeZNlnCD3J94kY.png" alt=""></p><p>发现大写字符与其对应的小写字符的ASCII的差为32，32这个值是 $2^5$ 可以表示为 $ 1&lt;&lt;5$</p><p>变换大小写这件事等价于：</p><ul><li>如果字符是小写字符，减去32得到大写字符</li><li>如果字符是大写字符，加上32得到小写字符</li></ul><p>而这两者合并起来，就是给这个字符做一次不进位的加法，即异或上 $1&lt;&lt;5$​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCasePermutation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        dfs(charArray, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[] charArray, <span class="keyword">int</span> index, List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == charArray.length)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> String(charArray));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(charArray, index+<span class="number">1</span>, res);</span><br><span class="line">        <span class="keyword">if</span>(Character.isLetter(charArray[index]))&#123;</span><br><span class="line">            charArray[index] ^= <span class="number">1</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">            dfs(charArray, index+<span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/">22. 括号生成</a></h2><h3 id="方法一：深度优先遍历"><a href="#方法一：深度优先遍历" class="headerlink" title="方法一：深度优先遍历"></a>方法一：深度优先遍历</h3><p>我们以 <code>n = 2</code> 为例，画树形结构图。方法是 「做减法」。</p><p><img src="https://i.loli.net/2021/10/22/O2Gqza81NJeYDMZ.jpg" alt=""></p><p>画出图后可分析出的结论：</p><ul><li>当前左右括号都有大于0个可以使用的时候，才可以产生分支。</li><li>产生左分支的时候，只看当前是否还有左括号可以使用</li><li>产生右分支的时候，还收到左分支的限制，右边剩余可以使用的括号数量一定得严格大于左边剩余的数量的时候，才可以阐释分支。</li><li>在左边和右边剩余的括号数都为0时结算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="string">&quot;&quot;</span>,n , n, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String curStr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 因为每一次尝试，都是使用新的字符串变量所有无须回溯</span></span><br><span class="line">        <span class="comment">// 在递归终止的时候，直接把它天道结果集即可</span></span><br><span class="line">        <span class="keyword">if</span>(left==<span class="number">0</span> &amp;&amp; right==<span class="number">0</span>)&#123;</span><br><span class="line">            res.add(curStr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪枝 （左括号可以使用的个数严格大于右括号可以使用的个数，才剪枝，注意这个细节）</span></span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            dfs(curStr + <span class="string">&quot;(&quot;</span> , left-<span class="number">1</span>, right, res);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(right&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            dfs(curStr + <span class="string">&quot;)&quot;</span>, left , right-<span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;79-130-200-733FloodFill-17-22-784字符串回溯&quot;&gt;&lt;a href=&quot;#79-130-200-733FloodFill-17-22-784字符串回溯&quot; class=&quot;headerlink&quot; title=&quot;79/130/200/733Fl</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Meta-Learning Representations for Continual Learning</title>
    <link href="http://example.com/2021/10/09/Meta-Learning-Representations-for-Continual-Learning/"/>
    <id>http://example.com/2021/10/09/Meta-Learning-Representations-for-Continual-Learning/</id>
    <published>2021-10-09T07:11:17.000Z</published>
    <updated>2021-10-10T03:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Meta-Learning-Representations-for-Continual-Learning"><a href="#Meta-Learning-Representations-for-Continual-Learning" class="headerlink" title="Meta-Learning Representations for Continual Learning"></a>Meta-Learning Representations for Continual Learning</h1><p>持续学习的代理应该能够在现有知识的基础上快速学习新数据，同时最大限度地减少遗忘。</p><p>目前基于神经网络函数逼近器的智能系统 很容易遗忘，而且很少经过训练来促进未来的学习。这种糟糕行为的一个原因是，他们从没有为这两个目标明确训练的表征中学习。</p><p>本文提出了OML，它的目标是通过学习表征来直接最小化灾难性的干扰，加速未来的学习，并且在连续学习中对在线更新下的遗忘具有健壮性。</p><p>证明了学习自然稀疏表示是可能的，这对于在线更新更有效。此外，该算法是对现有的连续学习策略(如MER和GEM)的补充。</p><blockquote><p>有经验的程序员学习一门新的编程语言比以前从未编程的人要快得多，而且不需要忘记旧的语言来学习新的语言。</p></blockquote><p>在这项工作中，显式地学习一种持续学习的表示法，以避免干扰并促进未来的学习。设计一个元目标，它使用灾难性干扰作为训练信号，通过在线更新直接优化。目标是学习一种表示，以便模型在 meta-test 时使用的随机在线更新总体上提高其预测的准确性。</p><h2 id="Problem-Formulation"><a href="#Problem-Formulation" class="headerlink" title="Problem Formulation"></a>Problem Formulation</h2><p>Continual Learning Prediction (CLP)问题由无休止的样本流组成</p><script type="math/tex; mode=display">T = (X_1,Y_1) ,(X_2,Y_2) ,..., (X_t,Y_t) ...</script><p>随机向量 $Y<em>t$ 根据未知分布 $p(Y|X_t)$抽样。我们假设过程 $X_1,X_2,..,X_t,…$有一个边际分布 $\mu ：X \to [0,\infty)$，它反映了每个输入被观察到的频率。这种假设允许各种相关序列。例如，可以从潜在依赖于过去变量 $X</em>{t-1}$ 和 $X_{t-2}$ 的分布中采样 $X_t$。然而目标 $Y_t$ 仅依赖于 $X_t$ , 而不依赖于过去的 $X_i$。</p><p>定义 $S<em>k = (X</em>{j+1}, Y<em>{j+1}),(X</em>{j+2}, Y<em>{j+2}) ,…,(X</em>{j+k}, Y_{j+k}) $ 为从CLP问题 $T$ 中抽样的长度为 $k$ 的随机轨迹。</p><p>最后，$p(S_k|T)$ 给出了可以从问题 $T$ 中抽样的所有长度为 $k$ 的轨迹上的分布。</p><p>对于给定的CLP问题，我们的目标是学习一个函数 $f_{W,\theta}$ 它可以预测给定 $X_t$ 的 $Y_t$。更具体地说，设 $l:Y\times Y \to R$ 是将预测 $\hat y \in Y$ 和目标 $y$ 之间的损失定义为 $l(\hat y,y)$的函数。</p><p>如果假设输入 $X$ 与某个密度 $\mu$ 成正比： $X \to [0,\infty)$, 那么我们希望最小化目标：</p><script type="math/tex; mode=display">L_{CLP}(W,\theta) = E[l(f_{W,\theta}(X), Y)] = \int \left[ \int l(f_{W,\theta}(x), y) p(y|x) dy  \right] \mu(x) dx</script><p>其中 $W,\theta$ 代表一系列参数，是更新和最小化的目标。</p><p>为了最小化 $L_{CLP}$，我们将自己限制在通过从 $p(S_k|T)$ 采样的单个 $k$ 长度轨迹上的在线更新来学习。</p><p>这改变了标准 iid 设置中的学习问题——模型看到长度为 k 的相关样本的单一轨迹，而不是直接从 $p(x, y) = p(y|x)\mu(x)$ 中采样。当简单地为IID设置应用标准算法时，此修改可能会引起重大问题。相反，我们需要设计考虑这种相关性的算法。</p><p>这个公式可以表示各种连续问题。 一个例子是在线回归问题，例如在给定当前位置的情况下预测机器人的下一个空间位置； 另一个是现有的增量分类基准。 CLP 公式还允许依赖于最近 m 次观测的历史记录的目标 $Y<em>t$。 这可以通过将每个 $X_t$ 定义为最后 m 个观测值来获得。 $X_t$ 和 $X</em>{t-1}$ 之间的重叠不违反对相关输入序列的假设。 最后，强化学习中的预测问题——从一个状态预测策略的值——可以通过将输入 $X_t$ 视为状态和要采样的目标返回或引导目标来表示。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>端到端训练的神经网络在使用从 $p(S_k|T)$ 采样的单个轨迹来最小化CLP loss 方面不是有效的，原因有两个。</p><p>首先，它们的样本效率极低，需要多个epoch的训练才能收敛到合理的解决方案。</p><p>其次，当在线学习相关数据流时，他们会受到灾难性的干扰。</p><p>元学习可以有效地提高神经网络的样本效率。但元学习模型初始化，这种归纳偏差不足以解决灾难性的干扰问题。</p><p>经验发现，学习编码器比只学习初始化的性能要好得多，此外，元学习优化问题在学习编码器时表现更好(对超参数不敏感，收敛速度更快)。这种差异的一种解释是，当在高度相关的数据流上学习时，全局且贪婪的更新算法(例如梯度下降)将贪婪地改变神经网络的初始层相对于当前样本的权重。初始层中的这种变化将干扰模型的过去知识。因此，初始化不是增量学习的有效归纳偏差。另一方面，当学习编码器 $\phi_{\theta}$ 时，神经网络可以学习使得更新不那么全局的高度稀疏表示(因为连接到零的特征的权重保持不变)。</p><p>为了将神经网络应用于问题的求解，作者提出了一种元学习函数 $\phi_{\theta} (X)$  ——一种由 θ 参数化的深度表示学习网络(RLN)—从$X \to R^{d}$中学习。然后学习另一个来自 $R^d\to Y$的函数 $g_W$，称为预测学习网络(PLN)。</p><p>两个函数的组合为 $f<em>{W,\theta }(x) = g</em>{W}(\phi_{\theta} (X))$</p><p><img src="https://z3.ax1x.com/2021/10/10/5APRG8.png" alt=""></p><p>将 $\theta$ 视为通过最小化元目标学习的元参数，然后在元测试时固定。在学习 $\theta $ 之后，我们从 $R^d\to Y $ 学习 $g_W $，用于从单个轨迹 $S $ 使用单次传递全在线的SGD更新解决CLP问题。</p><p>对于元训练，假设由 $p(T)$ 给出的CLP问题上的分布。</p><p>OML的目标函数为 ：</p><script type="math/tex; mode=display">min_{W,\theta} \sum_{T_i \sim p(T)} OML(W,\theta) = \sum_{T_i\sim P(T)} \sum_{S_k^j\sim p(S_k|T_i)} [ L_{CLP_i} (U(W,\theta, S_k^j))]</script><p>其中 $S<em>k^j = (X</em>{j+1}^i,Y<em>{j+1}^i),(X</em>{j+2}^i, Y<em>{j+2}^i),…,(X</em>{j+k}^i,Y_{j+k}^i)$ , </p><p>$U(W<em>t, \theta, S_k^j) =(W</em>{t+k},\theta)$ 表示一个更新 $W_{t+k}$ 是k步SGD后的权重向量</p><p>U 中第 $j$ 步更新 在样本 $(X<em>{t+j}^i, Y</em>{t+j}^i)$ 使用参数  $W<em>{t+j-1}, \theta$ , 得到 $(W</em>{t+j},\theta)$ </p><p>MAML-Rep和OML目标可以分别实现为算法1和算法2，两者之间的主要区别以蓝色突出显示:</p><p><img src="https://z3.ax1x.com/2021/10/10/5AkLJP.png" alt=""></p><p>注意，MAML-Rep使用完整批数据 $S_k$ 进行 $l$ 次内部更新(其中 $l $ 是超参数)，而OML使用 $S_k$ 中的一个数据点进行一次更新。这使得OML可以考虑在线持续学习的影响，例如灾难性的遗忘。</p><p>OML 目标的目的是学习适合在线持续学习的表示。 为了说明什么将构成持续学习的有效表示，假设我们有三个输入集群，它们具有显着不同的 $p(Y |x)$，对应于 $p<em>1$、$p_2$ 和 $p_3$。 对于固定的二维表示 $\phi</em>{\theta} : X \to R^2$，我们可以考虑由线性模型给出的解 $W\in R^2$ 的线性模型，该模型为每个 $p_i$ 提供等效准确的解。</p><p>这三个过程在图2中的 $W\in  R^2$参数空间中描述为三条不同颜色的线。</p><p><img src="https://z3.ax1x.com/2021/10/10/5AZfkd.png" alt=""></p><p>对于目标是由三个不同的分布 $p_1(Y|x)$ 、$p_2(Y|x)$ 和 $p_3(Y|x)$生成的问题，研究了表示对连续学习的影响。</p><p>目的是通过对来自三个分布的样本进行在线学习，找到一个对所有三个分布都有效的参数向量 W。 对于两种不同的表示，这些流形及其交集可能看起来非常不同。 直觉是，当流形平行（允许正泛化）或正交（避免干扰）时，来自 W 的在线更新更有效。 产生这种流形的表示不太可能自然出现。 相反，我们必须明确地找到它。 通过考虑在线持续学习的影响，OML 目标针对这种表示进行了优化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Meta-Learning-Representations-for-Continual-Learning&quot;&gt;&lt;a href=&quot;#Meta-Learning-Representations-for-Continual-Learning&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>Continual Lifelong Learning in Natural Language Processing: A Survey</title>
    <link href="http://example.com/2021/10/09/Continual-Lifelong-Learning-in-Natural-Language-Processing-A-Survey/"/>
    <id>http://example.com/2021/10/09/Continual-Lifelong-Learning-in-Natural-Language-Processing-A-Survey/</id>
    <published>2021-10-09T02:04:28.000Z</published>
    <updated>2021-10-09T05:17:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Continual-Lifelong-Learning-in-Natural-Language-Processing-A-Survey"><a href="#Continual-Lifelong-Learning-in-Natural-Language-Processing-A-Survey" class="headerlink" title="Continual Lifelong Learning in Natural Language Processing: A Survey"></a>Continual Lifelong Learning in Natural Language Processing: A Survey</h1><p>与计算机视觉或机器人技术相反，NLP领域中的CL仍处于初级阶段</p><p>持续学习 (CL) 旨在使信息系统能够跨时间从连续数据流中学习。然而，现有的深度学习体系结构很难在不遗忘以前获得的知识的情况下学习新任务。此外，由于自然语言是模棱两可的，CL对语言学习尤其具有挑战性：它是离散的，组合的，意思是上下文相关的。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>catastrophic forgetting (CF) or catastrophic interference</p><p>由于数据分布的变化，模型会随着时间的推移而变得不那么精确—这一现象称为概念漂移。现有的方法不能有效地保留以前学到的知识并同时适应新的信息。</p><p>最简单的，从头开始重新训练模型以适应新的任务(或新的数据分布)，是昂贵和耗时的，容量饱和和模型扩展问题也扩大了这个问题。</p><p>具体地说，参数模型在学习具有不同分布的数据样本或通过一系列任务进行处理时，最终到达不能存储更多知识的点-即其表示能力接近极限。在这一点上，要么扩展了模型的容量，要么应用了选择性遗忘（可能会导致性能下降）。后一种选择可能导致对新任务(或数据分布)的预测精度恶化或忘记以前获得的知识。</p><p>这一约束是由CL的一个定义特性支撑的，即所谓的稳定性-可塑性困境。具体地说，该现象考虑了模型试图在其稳定性(保留先前知识的能力)和可塑性(适应新知识的能力)之间取得平衡。</p><h2 id="Learning-Paradigms"><a href="#Learning-Paradigms" class="headerlink" title="Learning Paradigms"></a>Learning Paradigms</h2><p>目标是从大量任务 $T$ 中顺序学习模型 $f：X\times T\to Y$。</p><p>该模型在实例 $(x<em>i，y_i)$ 上训练，$x_i \in X</em>{t<em>i}$ 是输入特征向量，$y_i \in y</em>{t<em>i}$ 是目标向量，$t_i \in T$表示任务描述符(在最简单的情况下 $t_i=i$)，其中 $i\in Z$。目标是最大化任务 $T_i$  处的函数 $f$ (由 $θ\in R$ 参数化)，同时最小化任务 $T_1,…,T</em>{i-1}$ 的CF。</p><p>CL所需的性质 :</p><ul><li>Knowledge retention : 模型不容易发生灾难性的遗忘。</li><li>Forward transfer : 模型在重用从先前任务中获得的知识的同时学习新的任务。</li><li>Backward transfer :  模型在学习一项新任务后，在以前的任务上取得了更好的性能。</li><li>On-line learning : 模型从连续数据流中学习。</li><li>No task boundaries : 模型无需明确的任务或数据边界即可学习。</li><li>Fixed model capacity : 无论任务的数量和数据流的长度如何，内存大小都是恒定的。</li></ul><p>许多模型仅以有监督的方式使用大的标签数据集进行训练，因此它们不会暴露在涉及很few-shot、无监督或自监督学习的更具挑战性的情况下。</p><h3 id="Related-Machine-Learning-Paradigms"><a href="#Related-Machine-Learning-Paradigms" class="headerlink" title="Related Machine Learning Paradigms"></a>Related Machine Learning Paradigms</h3><div class="table-container"><table><thead><tr><th><em>Paradigm</em></th><th><em>Definition</em></th><th style="text-align:left"><em>Properties</em></th></tr></thead><tbody><tr><td>Transfer learning</td><td>将知识从源任务/域转移到目标任务/域<br/>以提高目标任务的性能。</td><td style="text-align:left">+ forward transfer<br/> – no backward transfer<br/> – no knowledge retention <br/> – task boundaries<br/> – off-line learning</td></tr><tr><td>Multi-task learning</td><td>联合学习多个相关任务，利用参数共享，<br/>提高所有任务的泛化能力。</td><td style="text-align:left">+ positive transfer <br/>– negative transfer <br/>– task boundaries <br/>– off-line learning</td></tr><tr><td>Meta-learning</td><td>Learning to learn学习一般知识，<br/>给出一小串训练样本和许多任务，并快速适应一项新任务。</td><td style="text-align:left">+ forward transfer<br/> – no backward transfer<br/> – no knowledge retention <br/>– off-line learning</td></tr><tr><td>Curriculum learning</td><td>从训练样本中学习按有意义的顺序排列-<br/>任务或数据难度逐渐增加。</td><td style="text-align:left">+ forward transfer<br/> + backward transfer<br/> + knowledge retention<br/> – task boundaries<br/> – off-line learning</td></tr><tr><td>On-line learning</td><td>通过按顺序提供的训练示例的连续流进行学习。<br/>体验由于非I.I.D.的数据造成的概念漂移。</td><td style="text-align:left">+ on-line learning<br/> + forward transfer<br/> – no backward transfer<br/> – no knowledge retention<br/>– single task/domain</td></tr><tr><td>On-the-job learning</td><td>发现新任务，学习并适应。<br/>On-the-job learning 是在一个开放的环境中进行的，<br/>它涉及到与人和环境的互动。这要归功于CL方法家族。</td><td style="text-align:left">+ on-line learning<br/> + forward transfer<br/> + backward transfer<br/> + knowledge retention <br/>+ no task boundaries <br/>+ open-world learning<br/> – interactive learning</td></tr></tbody></table></div><h3 id="Approaches-to-Continual-Learning"><a href="#Approaches-to-Continual-Learning" class="headerlink" title="Approaches to Continual Learning"></a>Approaches to Continual Learning</h3><p>Rehearsal 、regularization、architectural methods</p><p>纯来自NLP领域的模型数量相当有限。</p><h4 id="Rehearsal"><a href="#Rehearsal" class="headerlink" title="Rehearsal"></a>Rehearsal</h4><p>依靠保留以前任务中的一些训练样本，以便稍后可以将它们显示给手头的任务。</p><p>iCaRL 由于每个任务都保留训练样本，并在学习模型时定期重放，因此模型的计算和内存需求随着任务数量的增加而成比例增加。为了减少存储，建议使用 latent replay(Pellegrini等人，2019年)或 pseudo-rehearsal(Robins，1995)方法。</p><p>Pseudo-rehearsal methods 不使用memory中的训练样本，而是通过知道先前任务样本的概率分布来生成样本。方法包括生成性自动编码器和基于生成性对抗网络的模型。</p><h4 id="regularization"><a href="#regularization" class="headerlink" title="regularization"></a>regularization</h4><p>是依赖于固定模型容量和附加损失项的单模型方法，这有助于在学习后续任务或数据分布的同时巩固知识。例如，Elastic Weight Consolidation(EWC)通过损失正则化来减少遗忘；换句话说，它减缓了对之前任务重要的参数的学习。</p><p>Memory method 是正则化方法的特例，可分为两组：synaptic regularization 和 episodic memory (A-GEM、MER、MbPA++) 前一种方法集中于通过以防止改变先前学习的模型参数的方式调整学习率来减少对巩固知识的干扰。而后者存储来自先前看到的数据的训练样本，这些样本稍后被排练以允许学习新的类别。重要的是，梯度情节记忆(GEM)允许正向后转移，并防止过去任务的损失增加。</p><p>MBPA++进行稀疏经验回放和局部适应。学者们声称，MBPA++的训练速度比A-GEM快，训练它的时间并不比编解码器模型长。虽然这是可能的，因为稀疏的体验回放，但MBPA++需要额外的内存。</p><p>Knowledge distillation methods 与情景记忆方法非常相似，但与GEM不同的是，它们使过去任务中的预测保持不变。具体地说，它是一类通过依赖从大型网络模型(教师)到新的、较小的网络(学生)的知识转移来缓解CF的方法。其基本思想是，学生模型学习生成对教师模型的预测。</p><h4 id="architectural"><a href="#architectural" class="headerlink" title="architectural"></a>architectural</h4><p>通过将模块化更改应用于网络架构并引入特定于任务的参数来防止遗忘。通常，以前的任务参数保持固定或屏蔽。此外，新的层通常是动态注入的，以使用附加模块来扩充模型，以适应新的任务。</p><p>Progressive Networks (PNN）以及它们的改进版本 Dynamically Expandable Network (DEN）Reinforced Continual Learning (RCL）这些都是突出的例子。这些策略的主要缺点是参数数量大幅增加。</p><p>与PNN类似，BatchEnsemble(2020)也不受CF的影响，此外，由于只训练快速权重，它支持任务的并行排列，并且比PNN消耗更少的内存。</p><p>同样，适配器模块旨在克服大量参数的问题。 它们充当具有少量参数的附加网络层，可即时重新配置原始网络 对于目标任务，同时保持原始网络的参数不变并在不同任务之间共享。</p><h2 id="Continual-Learning-in-NLP-Tasks"><a href="#Continual-Learning-in-NLP-Tasks" class="headerlink" title="Continual Learning in NLP Tasks"></a>Continual Learning in NLP Tasks</h2><h3 id="Word-and-Sentence-Representations"><a href="#Word-and-Sentence-Representations" class="headerlink" title="Word and Sentence Representations"></a>Word and Sentence Representations</h3><p>分布式词向量表示是许多NLP应用程序的基础。</p><p>通常，词嵌入是在大型通用语料库上训练的，因为领域内语料库的大小在大多数情况下是不够的。这是有代价的，因为在通用语料库上训练的嵌入通常不适合特定于领域的下游任务，因此，整体性能会受到影响。</p><p>在CL设置中，这也意味着词汇可以相对于两个维度改变：时间和领域。一个公认的共识是，由于复杂的语言和社会过程，单词的意义会随着时间的推移而变化。因此，重要的是检测和适应意义和数据分布的变化，同时防止先前从 CF 中学习到的表示。</p><p>为了解决这个问题 ， Lifelong domain word embedding via meta-learning提出了一种元学习方法，该方法利用过去多领域语料库中的知识生成改进的新领域嵌入。</p><p>Continual Learning for Sentence Representations Using Conceptors 引入了一种随时间更新的句子编码器，使用矩阵概念不断学习依赖于语料库的特征。</p><p>重要的是，王等人。(2019b)认为，当一个神经网络模型被训练到一个新的任务上时，嵌入的向量空间会发生不希望的变化，从而导致嵌入对于以前的任务是不可行的。为了缓解嵌入空间失真的问题，他们建议使用锚定对齐句子嵌入。最近出现了一个词嵌入和语言建模交叉点的研究线，称为上下文嵌入，并展示了许多NLP任务的最新成果。</p><h2 id="Research-Gaps-and-Future-Directions"><a href="#Research-Gaps-and-Future-Directions" class="headerlink" title="Research Gaps and Future Directions"></a>Research Gaps and Future Directions</h2><p>在现实世界中，我们经常处理部分信息数据。此外，数据来自非 i.i.d。分布，并受代理的干预或环境变化的影响。尽管存在一些尝试，模型从一系列示例中学习而不知道它们来自哪个数据集和分布（例如 d’Autume 等，2019），但这种方法很少见。此外，学习很少的例子（例如通过少样本转移学习）（Liu，2020）是当前模型的主要挑战，尤其是执行分布外泛化（Bengio，2019）。特别是，广泛用于 NLP 的序列到序列模型仍然难以系统泛化（Lake 和 Baroni，2018 年；Bahdanau 等人，2019 年），无法学习高级语言概念的一般规则和推理。例如，Feder 等人最近在反事实语言表示方面的工作。 (2020) 是朝着这个方向迈出的有希望的一步。非平稳学习问题可以通过从数据中理解和推断因果关系来缓解（例如 Osawa 等人，2019 年）——这是一个突出的挑战（Pearl，2009 年）——并提出不太可能的组合存在于训练分布中（Bengio，2019）。也就是说，语言是组合的；因此，该模型可以动态操纵语义概念，这些语义概念可以在新情况下重新组合（Lake 等人，2015 年），后来得到基于语言的溯因推理（例如 Bhagavatula 等人，2020 年）的支持。</p><p>在模型级别，CL 与贝叶斯原理的结合应该可以更好地识别神经网络每个参数的重要性，并有助于参数修剪和量化（例如 Ebrahimi 等人，2020 年；Golkar 等人，2019 年）。我们认为，不仅参数信息量应该是不确定性引导的，而且先前记忆的周期性重放也应该通过因果关系来告知。此外，重点关注降低模型容量和计算要求也很重要。尽管神经网络的过度参数化很普遍（Neyshabur 等人，2018 年），但许多当前的 CL 方法促进了参数空间的扩展。我们设想进一步的研究工作集中在压缩方法上，例如知识蒸馏、低秩分解和模型修剪。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Continual-Lifelong-Learning-in-Natural-Language-Processing-A-Survey&quot;&gt;&lt;a href=&quot;#Continual-Lifelong-Learning-in-Natural-Language-Proce</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>Optimizing Reusable Knowledge for Continual Learning via Metalearning</title>
    <link href="http://example.com/2021/10/05/Optimizing-Reusable-Knowledge-for-Continual-Learning-via-Metalearning/"/>
    <id>http://example.com/2021/10/05/Optimizing-Reusable-Knowledge-for-Continual-Learning-via-Metalearning/</id>
    <published>2021-10-05T01:41:33.000Z</published>
    <updated>2021-10-05T11:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Optimizing-Reusable-Knowledge-for-Continual-Learning-via-Metalearning"><a href="#Optimizing-Reusable-Knowledge-for-Continual-Learning-via-Metalearning" class="headerlink" title="Optimizing Reusable Knowledge for Continual Learning via Metalearning"></a>Optimizing Reusable Knowledge for Continual Learning via Metalearning</h1><p>当网络的权重在新任务的训练过程中被覆盖，从而导致忘记旧信息时，就会发生灾难性遗忘。</p><p>为了解决这个问题，作者提出了MetA Reusable Knowledge: MARK, 它提高了权重的可重用性，而不是在学习新任务时被覆盖。</p><p>MARK在任务之间保留一组共享权重，将这些共享的权重设想为一个公共知识库(KB)，它不仅用于学习新任务，而且在模型学习新任务时还会丰富新知识。</p><p>关键组成部分有两个方面：</p><ul><li>1.元学习方法提供了用新知识逐步丰富知识库的关键机制，并促进了任务之间的权重可重用性。</li><li>2.一组可训练掩码提供了从知识库相关权重中有选择地选择来解决每个任务的关键机制。</li></ul><p>以往预防灾难性遗忘（CF）的工作主要遵循两种策略：</p><ul><li>1.避免修改对解决先前任务至关重要的参数。具体地说，当面对新的任务时，正则化项确保了关键参数的修改尽可能少。一般而言，该方法在任务较少的问题上表现出令人满意的性能，但是当任务数量增加时，诸如权值的累积漂移和它们之间的干扰等问题使得该方法难以扩展。</li><li>2.模型的体系结构更改。这包括保留部分网络容量来学习每个任务的方法，以及使用特殊记忆单元来回忆以前任务中的关键训练样本的方法。这些方法的主要问题是额外的模型复杂性并且需要一种有效的方法来回忆以前任务中的关键信息。</li></ul><p>与这些先前的策略相反，当学习新任务时，人类会不断地将先前的经验与新情况联系起来，增强先前的记忆，这有助于缓解CF问题。</p><p>MASK 一种基于学习策略的新模型，它不是减轻权重覆盖或学习不同任务的独立权重，而是使用元学习方法来促进任务之间的权重可重用性。特别地，将这些共享的权重设想为一个公共知识库(KB)，它不仅用于学习新任务，而且在模型学习新任务时还会丰富新知识。从这个意义上说，MASK背后的KB不是由以向量编码信息的外部存储器给出的，而是由以其权重编码共享信息的可训练模型给出的。作为查询该KB的补充机制，MASK还包括一组可训练掩码，其负责实施选择性寻址方案来查询KB。</p><p>因此，为了构建和查询其共享知识库，MARK 使用了两种互补的学习策略。 </p><ul><li>1、元学习技术提供了实现两个目标的关键机制：</li><li><ul><li>鼓励对多个任务有用的权重更新</li><li>在模型学习新任务时用新知识丰富知识库。 </li></ul></li><li>2、一组可训练的掩码提供了从知识库相关权重中选择性地选择来解决每个任务的关键机制。</li></ul><p>MARK的工作方式是，首先通过检测知识库中学习的每个模式的重要性的函数强制模型重用当前知识，然后如果过去的知识不足以成功执行任务，则扩展其知识。</p><h2 id="Continual-Learning-Scenario"><a href="#Continual-Learning-Scenario" class="headerlink" title="Continual Learning Scenario"></a>Continual Learning Scenario</h2><p>每个任务 $t$ 由新的数据分布 $D^t = (X^t, Y^t,T^t)$ 组成，其中 $X^t$  是输入样例，$Y^t$ 是任务标签， $T^t$ 是任务ID。</p><p>目标是学习一个分类模型 $f : X\to Y$ 使用来自T个任务序列的数据：$D = {D^1,…,D^T}$</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>两个主要挑战：</p><ul><li>如何增量地构建此知识库？（一种称为情景训练的元学习策略）</li><li>如何查询此知识库以访问相关的知识片段？（为每个任务训练掩码生成函数）</li></ul><h3 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h3><p><img src="https://z3.ax1x.com/2021/10/05/4v9aff.png" alt=""></p><p>给定来自任务 $T$ 的输入 $X_i$，使用特征提取器 $F^t$ 来获得 $F_i^t$。 </p><p>然后将 $F_i^t$ 传递给mask函数 $M^t$ 以生成mask $M_i^t$。</p><p>之后，相同的输入 $X_i$ 进入 KB，它具有由 $M_i^t$ 调制的中间激活</p><p>最终，调制的特征经过任务相关的分类器 $C^t$，该分类器执行对 $X_i$ 的类别预测。</p><p>模型的主要模块：</p><ul><li><p>Feature Extractor ($F^t$) : 该模块负责为每个输入 $X_i$ 提供初始嵌入，即 $F^t$ 取输入$X_i$ 并输出向量表示$F_i^t$。重要的是要注意，模型 $F^t$ 可以在任务之间共享，也可以特定于每个任务。</p></li><li><p>Knowledge Base (KB) : 这是MASK背后的主要模块。当模型面临新的任务时，它负责积累相关知识。实现时使用了带B blocks的卷积架构。模型的这一部分在任务之间共享。</p></li><li>Mask-Generating functions ( $M^t$): 将特征向量 $F_i^t$ 作为输入，并为 KB 的每个 block 生成一个实例和依赖于任务的掩码 $M_i^t$。 每个掩码由一组标量组成，每个标量用于KB的卷积块中的每个通道，其乘以每个通道的激活。这些掩码对于选择与每个实例和任务相关的知识至关重要。在实施中，作者使用全连接层。</li><li>Classifier ( $C^t$) : 这些模块对应于依赖于任务的分类头。 它输入$ F^t_{i,KB}$ , 是通过对 KB 的最后一个 block 的输出进行展平操作而给出的。 给定输入 $X_i$ 的任务 ID，相应的 head 输出模型预测。 实现中使用全连接层。</li></ul><h3 id="MARK-Training"><a href="#MARK-Training" class="headerlink" title="MARK Training"></a>MARK Training</h3><p>首先是通过在第一个任务中端到端地训练知识库来初始化知识库，而不使用元学习和掩码函数。</p><p>对于分类任务，首先使用卷积神经网络的规则训练过程来执行知识库初始化。之后，我们交替三个主要步骤对Mark进行每个任务的顺序训练：</p><ul><li>KB Querying : 训练任务相关的掩码生成函数，这些函数用于使用向量 $F_i^t$ 来查询知识库。另外，我们同时训练当前任务的任务分类器。请注意，撇开知识库初始化不谈，在此步骤中，每个新任务仅使用以前任务积累的知识进行训练。</li><li>KB Update: 使用元学习策略来更新知识库中的权重。该方案允许促进知识库更新，有利于获取可重用的知识以面对新任务。</li><li>KB Querying : 在使用来自当前任务的知识更新知识库之后，我们重复查询过程，使用这些新知识来优化掩码生成函数和任务分类器。注意，在此步骤中，KB保持固定。</li></ul><p>前面三个步骤的应用背后的直觉如下:</p><blockquote><p>最初使用从先前任务中积累的知识来查询知识库。 这迫使掩码函数和分类器重用可用知识。 当该知识耗尽时，我们继续将当前任务中的知识添加到知识库中。 最后，我们利用这个新更新的知识库来获得给定任务的最终掩码函数和分类器。</p></blockquote><p><img src="https://z3.ax1x.com/2021/10/05/4vkqS0.png" alt=""></p><h3 id="KB-Querying"><a href="#KB-Querying" class="headerlink" title="KB Querying"></a>KB Querying</h3><p>一旦我们通过使用特征提取器 $F^t$ 获得特征向量，模型就可以了解知识库中哪些模块能够最好地解决当前任务。在这个训练阶段，模型训练函数学习如何使用知识库中可用的知识，只关注重用以前任务中的知识，而不修改KB。特别是在这一步中，我们只训练 $M^t$ 和 $C^t$。两者都经过端到端训练，同时保持KB权重冻结。</p><p>当我们为模型的每个中间激活生成掩码时，严格地说，我们总共有B个掩码生成函数。然而，为了便于表示，我们将所有此类函数都包含在 $M^t$下，并将其输出视为这些 $B$ 函数结果的拼接。</p><p>下式表明函数$M^t$，其中在给定来自任务 $t$ 的输入$X_i$的情况下获得掩码 $M_i^t$:</p><script type="math/tex; mode=display">M_i^t = M^t (F_i^t) = \rho((W^{t,M})^T F_i^t)</script><p>在此过程中生成的遮罩具有两种效果：</p><ul><li>给出KB中特定模块对当前输入的重要性的信号</li><li>确保梯度更新在真正重要的地方进行。</li></ul><p>如果激活映射与某个任务无关，则相应掩码的值将为零，从而使与该激活相关联的梯度更新也为零。</p><h3 id="KB-Update"><a href="#KB-Update" class="headerlink" title="KB Update"></a>KB Update</h3><p>这个训练步骤的目的是将当前任务中的新知识添加到KB。为了实现这一点，使用元学习作为一种方式，迫使模型捕获可以重用的知识，以面对新的任务。下图，训练Mark的元学习过程的示意图。这个过程是 Reptile的改编</p><p><img src="https://z3.ax1x.com/2021/10/05/4v3dZn.png" alt=""></p><p>给定任务t，随机生成一组K个小任务，其中每个小任务由来自原始任务的类的子集组成。</p><p>对于每个小任务，我们为固定数量的epoch训练当前知识库的独立副本，从而生成K个模型。</p><p>然后，使用一组保持训练样本计算每个模型的损失函数的梯度。</p><p>最后，使用这些梯度的加权平均值来更新KB。</p><p>具体地说，创建了一组K个小任务，其中每个小任务包括从当前任务中随机抽样一组H个类和每个类的h个训练实例。</p><p>这允许我们创建一个与主任务不同的小任务，找到不特定于它的权重。使用 $E_{inner}$ epochs的每个小任务训练模型的一个副本。将为e个epochs 训练的副本 k 称为 $KB^{k}_e$。对于每个小任务，使用一个临时分类器 $C^k$，该分类器由 $C^t$参数初始化。在内部循环的最终迭代之后，丢弃这个分类器。</p><p>与MAML一样模型训练包括两个嵌套循环，一个内循环一个外循环。内循环负责为当前小任务训练我们的知识库副本，而外循环负责按照梯度方向更新知识库权重，从而快速适应新的小任务。</p><p>在每个内循环期间，$KB^k$ 和 $C^k$ 被端到端地训练以用于 $E_{inner}$ epochs。</p><p>下式模拟外循环并更新 KB，具体地说，对于每个k，平均 $KB^k_0$之前的 KB 参数的差异:</p><script type="math/tex; mode=display">KB = KB - \alpha \nabla KB  \ \ \ \ \ \  \nabla KB = \frac{1}{E_{inner}}\sum_{k}^K \gamma_k (KB^k_{E_{inner}} - KB_0^k)</script><p>和Reptile 一样梯度更新为每个模型 $KB^k$ 的累积梯度之和的平均值。其中权重 $\gamma_k$  为：</p><script type="math/tex; mode=display">\gamma_k = \frac{acc}{\sum_{j}^K acc_j}</script><p>其中自同一任务 $t$ 的验证批次上的每个模型的精度作为参考。</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p><img src="https://z3.ax1x.com/2021/10/05/4vGBgU.png" alt=""></p><ul><li>MARK-Task :  为每个任务训练 $F^t$，在它上面添加一个使用 $D^T$训练的分类器。训练完 $ F^t $后，该分类器被丢弃。</li><li>MARK-Random:  $F^t $由一组随机权重组成。所有任务共享相同的 $F^t$。</li><li>MARK-Resnet :  所有任务共享在Imagenet上预先训练的Resnet-18作为特征提取器。</li></ul><p><img src="https://i.loli.net/2021/10/05/Ez3rPXkuyfm1lTg.png" alt=""></p><p>随着训练的任务越多，权重更新的数量就会迅速减少，几乎降到零。此外，在这两个基准中，相对于基线的更新次数都有显著减少。这些结果表明，当使用Mark训练模型时，干扰较少，我们将其归因于其存储可重用知识的知识库。</p><p><img src="https://i.loli.net/2021/10/05/UXRnuh4dDtSKkeB.png" alt=""></p><ul><li>Baseline :简单的顺序学习，没有元学习或掩码生成函数。我们使用与知识库相同的架构。</li><li>Baseline + ML : 添加元学习，即知识库更新来改进基线。</li><li>Baseline + Mask :  添加特定于任务的掩码函数来改进基线。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Optimizing-Reusable-Knowledge-for-Continual-Learning-via-Metalearning&quot;&gt;&lt;a href=&quot;#Optimizing-Reusable-Knowledge-for-Continual-Learnin</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>39/40/46/47/77/78/90/60/93排列、组合、子集相关问题</title>
    <link href="http://example.com/2021/10/04/39-40-46-47-77-78-90-60-93%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/10/04/39-40-46-47-77-78-90-60-93%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E5%AD%90%E9%9B%86%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-04T01:06:33.000Z</published>
    <updated>2021-10-09T01:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="39-40-46-47-77-78-90-60-93排列、组合、子集相关问题"><a href="#39-40-46-47-77-78-90-60-93排列、组合、子集相关问题" class="headerlink" title="39/40/46/47/77/78/90/60/93排列、组合、子集相关问题"></a>39/40/46/47/77/78/90/60/93排列、组合、子集相关问题</h1><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39 组合总和"></a>39 组合总和</h2><h4 id="39-组合总和-1"><a href="#39-组合总和-1" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/">39. 组合总和</a></h4><p>思路分析：根据示例 1：输入: candidates = [2, 3, 6, 7]，target = 7。</p><p>候选数组里有 2，如果找到了组合总和为 7 - 2 = 5 的所有组合，再在之前加上 2 ，就是 7 的所有组合；<br>同理考虑 3，如果找到了组合总和为 7 - 3 = 4 的所有组合，再在之前加上 3 ，就是 7 的所有组合，依次这样找下去。</p><p><img src="https://z3.ax1x.com/2021/10/04/4Oev7Q.png" alt=""></p><ul><li>以 target = 7 为根节点，创建一个分支的时候做减法。</li><li>每一个箭头表示：从父亲节点的数值减去边上的数值，得到孩子节点的数值。边的值就是题目中给出的 candidate 数组的每个元素的值。</li><li>减到0或负数的时候停止，即：节点0和负数节点成为叶子节点。</li><li>所有从根节点到节点0的路径（只能从上往下，没有回路）就是题目要找的一个结果</li></ul><p>这棵树有 4 个叶子结点的值 0，对应的路径列表是 [[2, 2, 3], [2, 3, 2], [3, 2, 2], [7]]，而示例中给出的输出只有 [[7], [2, 2, 3]]。即：题目中要求每一个符合要求的解是 不计算顺序 的。下面我们分析为什么会产生重复。</p><h3 id="针对具体例子分析重复路径产生的原因（难点）"><a href="#针对具体例子分析重复路径产生的原因（难点）" class="headerlink" title="针对具体例子分析重复路径产生的原因（难点）"></a>针对具体例子分析重复路径产生的原因（难点）</h3><p>产生重复的原因是：在每一个结点，做减法，展开分支的时候，由于题目中说，每一个元素可以重复使用，我们考虑了所有的候选数，因此出现了重复的列表。</p><p>一种简单的去重方案是借助哈希表的天然去重功能，但实际操作没那么容易。</p><p>另一种可以再搜索的时候去重，遇到这一类相同元素不计算顺序的问题，我们在搜索的时候就需要按某种顺序搜索。具体做法是：每一次搜索的时候设置下一轮搜索的起点 begin ：</p><p><img src="https://z3.ax1x.com/2021/10/04/4OmrDS.png" alt=""></p><p>即：从每一层的第2个节点开始，都不能再搜索产生同一层节点使用过的 candidate 里的元素。</p><ul><li>Python3 的 [1, 2] + [3] 语法生成了新的列表，一层一层传到根结点以后，直接 res.append(path) 就可以了；</li><li>基本类型变量在传参的时候，是复制，因此变量值的变化在参数里体现就行，所以 Python3 的代码看起来没有「回溯」这个步骤。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span>(<span class="params">self, candidates, target</span>):</span></span><br><span class="line">      size = <span class="built_in">len</span>(candidates)</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> []</span><br><span class="line">        path = []</span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">candidates, begin, size, res, target</span>):</span></span><br><span class="line">          <span class="keyword">if</span> target &lt; <span class="number">0</span>:</span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">              res.append(path)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span>  index <span class="keyword">in</span> <span class="built_in">range</span>(begin, size):</span><br><span class="line">              dfs(candidates, index, size, path+[candidates[index]], res, target - candidate[index])</span><br><span class="line">        dfs(candidates, <span class="number">0</span>, size, path, res, target)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(candidates, <span class="number">0</span>, len, target, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> begin, <span class="keyword">int</span> len, <span class="keyword">int</span> target, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// target 为负数和 0 的时候不再产生新的孩子结点</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重点理解这里从 begin 开始搜索的语意</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; len; i++) &#123;</span><br><span class="line">            path.addLast(candidates[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意：由于每一个元素可以重复使用，下一轮搜索的起点依然是 i，这里非常容易弄错</span></span><br><span class="line">            dfs(candidates, i, len, target - candidates[i], path, res);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 状态重置</span></span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剪枝提速"><a href="#剪枝提速" class="headerlink" title="剪枝提速"></a>剪枝提速</h3><ul><li>根据上面画树形图的经验，如果 target 减去一个数得到负数，那么减去一个更大的树依然是负数，同样搜索不到结果。基于这个想法，我们可以对输入数组进行排序，添加相关逻辑达到进一步剪枝的目的；</li><li>排序是为了提高搜索速度，对于解决这个问题来说非必要。但是搜索问题一般复杂度较高，能剪枝就尽量剪枝。实际工作中如果遇到两种方案拿捏不准的情况，都试一下。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序是剪枝的前提</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(candidates, <span class="number">0</span>, len, target, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> begin, <span class="keyword">int</span> len, <span class="keyword">int</span> target, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 由于进入更深层的时候，小于 0 的部分被剪枝，因此递归终止条件值只判断等于 0 的情况</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 重点理解这里剪枝，前提是候选数组已经有序，</span></span><br><span class="line">            <span class="keyword">if</span> (target - candidates[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            path.addLast(candidates[i]);</span><br><span class="line">            dfs(candidates, i, len, target - candidates[i], path, res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么时候使用-used-数组，什么时候使用-begin-变量"><a href="#什么时候使用-used-数组，什么时候使用-begin-变量" class="headerlink" title="什么时候使用 used 数组，什么时候使用 begin 变量"></a>什么时候使用 <code>used</code> 数组，什么时候使用 <code>begin</code> 变量</h3><ul><li>排列问题，讲究顺序（即 <code>[2, 2, 3]</code> 与 <code>[2, 3, 2]</code> 视为不同列表时），需要记录哪些数字已经使用过，此时用 <code>used</code> 数组；</li><li>组合问题，不讲究顺序（即 <code>[2, 2, 3]</code> 与 <code>[2, 3, 2]</code> 视为相同列表时），需要按照某种顺序搜索，此时使用 <code>begin</code> 变量。</li></ul><h2 id="40-组合总和-2"><a href="#40-组合总和-2" class="headerlink" title="40 组合总和 2"></a>40 组合总和 2</h2><h4 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40. 组合总和 II</a></h4><p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p><p>为了使得解集不包含重复的组合，有两种方案：</p><ul><li>使用哈希表，编码复杂</li><li>需要按顺序搜索，在搜索的过程中检测分支是否会出现重复结果。注意：这里的顺序不仅仅指数组candidate有序，还指按照一定顺序搜索结果。</li></ul><p><img src="https://z3.ax1x.com/2021/10/04/4OnqeS.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(candidates.length==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n  = candidates.length;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line"></span><br><span class="line">        dfs(candidates, <span class="number">0</span>, n, path, target,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> begin, <span class="keyword">int</span> n, Deque&lt;Integer&gt; path, <span class="keyword">int</span> target, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小剪枝：同一层相同数值的节点，从第2个开始，候选数更少，结果一定发生重复，因此跳过</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;n;i++)&#123;</span><br><span class="line">           <span class="comment">// 大剪枝：减去 candidates[i] 小于0 ，减去后面的candidates[i+1], candidates[i+2] 肯定也小于0</span></span><br><span class="line">           <span class="keyword">if</span>(target - candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 小剪枝：同一层相同数值的节点，从第2个开始，候选数更少，结果一定发生重复，因此跳过</span></span><br><span class="line">           <span class="keyword">if</span>(i &gt; begin &amp;&amp; candidates[i] == candidates[i-<span class="number">1</span>])&#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           path.addLast(candidates[i]);</span><br><span class="line">           dfs(candidates, i+<span class="number">1</span>, n, path, target - candidates[i], res);</span><br><span class="line">           path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77 组合"></a>77 组合</h2><h4 id="77-组合-1"><a href="#77-组合-1" class="headerlink" title="77. 组合"></a><a href="https://leetcode-cn.com/problems/combinations/">77. 组合</a></h4><p>法一：根据搜索起点画出二叉树</p><ul><li>如果组合里有 1， 那么需要再 $[2,3,4]$ 里再找一个数</li><li>如果组合里有 2， 那么需要再 $[3,4]$ 里再找一个数，注意：这里不能再考虑 1，因为包含 1 的组合，在第一种情况以及包含。</li></ul><p><img src="https://z3.ax1x.com/2021/10/05/4jEZSP.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || n &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从 1 开始是题目的设定</span></span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> begin, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 递归终止条件是：path 的长度等于 k</span></span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历可能的搜索起点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 向路径变量里添加一个数</span></span><br><span class="line">            path.addLast(i);</span><br><span class="line">            <span class="comment">// 下一轮搜索，设置的搜索起点要加 1，因为组合数理不允许出现重复的元素</span></span><br><span class="line">            dfs(n, k, i + <span class="number">1</span>, path, res);</span><br><span class="line">            <span class="comment">// 重点理解这里：深度优先遍历有回头的过程，因此递归之前做了什么，递归之后需要做相同操作的逆向操作</span></span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>剪枝</p><p>上面的代码，搜索起点遍历到 n，即：递归函数中有下面的代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从当前搜索起点 begin 遍历到 n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= n; i++) &#123;</span><br><span class="line">    path.addLast(i);</span><br><span class="line">    dfs(n, k, i + <span class="number">1</span>, path, res);</span><br><span class="line">    path.removeLast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，如果 n=7, k=4 ，从5开始搜索就已经没有意义了， 这是因为：即使把5选上，后面的数只有，6，7一共三个候选数，凑不出4个数的组合。因此搜索起点有上界，这个上界是多少，可以举例分析。</p><p>分析搜索起点的上界，其实是在深度优先遍历的过程中剪枝，剪枝可以避免不必要的遍历，剪枝剪得好，可以大幅度节约算法的执行时间。</p><p>下面的图片绿色部分是减掉的枝叶，当n很大的时候，能少遍历很多节点，节约了时间</p><p><img src="https://z3.ax1x.com/2021/10/05/4jEvkj.png" alt=""></p><p>容易知道：搜索起点和当前还需要选几个数有关，而当前还需要选几个数与已经选了几个数有关，即与path 的长度相关。举例分析：</p><p>例如： n=6, k=4</p><p><code>path.size() == 1</code> 的时候，接下来要选择 3 个数，搜索起点最大是 4，最后一个被选的组合是 <code>[4, 5, 6]</code>；</p><p><code>path.size() == 2</code> 的时候，接下来要选择 2 个数，搜索起点最大是 5，最后一个被选的组合是 <code>[5, 6]</code>；</p><p><code>path.size() == 3</code> 的时候，接下来要选择 1 个数，搜索起点最大是 6，最后一个被选的组合是 <code>[6]</code>；</p><p>再如：<code>n = 15</code> ，<code>k = 4</code>。</p><p><code>path.size() == 1</code> 的时候，接下来要选择 3 个数，搜索起点最大是 13，最后一个被选的是 <code>[13, 14, 15]</code>；</p><p><code>path.size() == 2</code> 的时候，接下来要选择 2 个数，搜索起点最大是 14，最后一个被选的是 <code>[14, 15]</code>；</p><p><code>path.size() == 3</code> 的时候，接下来要选择 1 个数，搜索起点最大是 15，最后一个被选的是 <code>[15]</code>；</p><p>可以归纳出：</p><p>搜索起点的上界 + 接下来要选择的元素个数 - 1 = n</p><p>其中，接下来要选择的元素个数 <code>= k - path.size()</code>，整理得到：</p><p>搜索起点的上界 = n - (k - path.size()) + 1</p><p>所以，我们的剪枝过程就是：把 <code>i &lt;= n</code> 改成 <code>i &lt;= n - (k - path.size()) + 1</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有这里 i &lt;= n - (k - path.size()) + 1 与参考代码 1 不同</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            dfs(n, k, i + <span class="number">1</span>, path, res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>方法二：按照每一个数选与不选画出二叉树</p><p><img src="https://z3.ax1x.com/2021/10/05/4jV1BD.png" alt=""></p><p>画一个表格更容易看出边界条件。</p><p><img src="https://z3.ax1x.com/2021/10/05/4jVJNd.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || n &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了防止底层动态数组扩容，初始化的时候传入最大长度</span></span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;(k);</span><br><span class="line">        dfs(<span class="number">1</span>, n, k, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> n, <span class="keyword">int</span> k, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础版本的递归终止条件：if (begin == n + 1) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (begin &gt; n - k + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不选当前考虑的数 begin，直接递归到下一层</span></span><br><span class="line">        dfs(begin + <span class="number">1</span>, n, k, path, res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选当前考虑的数 begin，递归到下一层的时候 k - 1，这里 k 表示还需要选多少个数</span></span><br><span class="line">        path.addLast(begin);</span><br><span class="line">        dfs(begin + <span class="number">1</span>, n, k - <span class="number">1</span>, path, res);</span><br><span class="line">        <span class="comment">// 深度优先遍历有回头的过程，因此需要撤销选择</span></span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78 子集"></a>78 子集</h2><h4 id="78-子集-1"><a href="#78-子集-1" class="headerlink" title="78. 子集"></a><a href="https://leetcode-cn.com/problems/subsets/">78. 子集</a></h4><ul><li>组合问题，需要按顺序读字符，就不需要设置used 数组</li><li>在根节点、非叶子节点和叶子节点都需要结算，因此 res.add(path)需要放中间</li></ul><h3 id="法一：-回溯搜索"><a href="#法一：-回溯搜索" class="headerlink" title="法一： 回溯搜索"></a>法一： 回溯搜索</h3><p>执行一次深度优先遍历，一路走到底，走不通的时候，返回回来，继续执行，一直这样下去，知道回到起点。</p><p><img src="https://z3.ax1x.com/2021/10/06/4xkH81.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>, n, nums, path, res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> n, <span class="keyword">int</span>[] nums, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin == n)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前数可选 也可以不选</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选 直接进入下一层</span></span><br><span class="line">        dfs(begin+<span class="number">1</span>, n, nums, path, res);</span><br><span class="line">        <span class="comment">// 选了，进入下一层</span></span><br><span class="line">        path.add(nums[begin]);</span><br><span class="line">        dfs(begin+<span class="number">1</span>, n, nums, path, res);</span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把选这个数作为左分支，把不选这个数作为右分支</p><p><img src="https://z3.ax1x.com/2021/10/06/4xAyZD.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        dfs(nums, <span class="number">0</span>, len, stack, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">                     Stack&lt;Integer&gt; stack, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == len) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前数可选，也可以不选</span></span><br><span class="line">        <span class="comment">// 选了有，进入下一层</span></span><br><span class="line">        stack.add(nums[index]);</span><br><span class="line">        dfs(nums, index + <span class="number">1</span>, len, stack, res);</span><br><span class="line">        stack.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选，直接进入下一层</span></span><br><span class="line">        dfs(nums, index + <span class="number">1</span>, len, stack, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; subsets = solution.subsets(nums);</span><br><span class="line">        System.out.println(subsets);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法二：使用位运算技巧"><a href="#方法二：使用位运算技巧" class="headerlink" title="方法二：使用位运算技巧"></a>方法二：使用位运算技巧</h3><p>数组的每个元素，可以有两个状态：</p><ul><li>不在子数组中（用0表示）</li><li>在子数组中（用1表示）</li></ul><p>从0到2 的数组个数次幂（不包括）的整数的二进制表示就能表示所有状态的集合</p><p>子集数量为 $2^n$  ，也就是1 &lt;&lt; n<br>用二进制0表示不选，1表示选，遍历从0到 $2^n$ 的所有二进制数<br>对每个二进制数也就是每种子集情况都要遍历一边nums数组，<br>将二进制数中为1的位置在nums中对应的数加入到当前子集中</p><p><img src="https://z3.ax1x.com/2021/10/06/4xEaTg.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.length;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span> &lt;&lt; size;</span><br><span class="line">        </span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; cur = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( ((i&gt;&gt;j) &amp; <span class="number">1</span>) ==<span class="number">1</span>)&#123;</span><br><span class="line">                    cur.add(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a><a href="https://leetcode-cn.com/problems/subsets-ii/">90. 子集 II</a></h2><h4 id="90-子集-II-1"><a href="#90-子集-II-1" class="headerlink" title="90. 子集 II"></a><a href="https://leetcode-cn.com/problems/subsets-ii/">90. 子集 II</a></h4><p>解集 <strong>不能</strong> 包含重复的子集</p><p>考虑数组 $[1,2,2]$ ，选择前两个数，或者第一、三个数，都会得到相同的子集。</p><p>也就是说，对于当前选择的数 $x$ ，若前面有与其相同的数y，且没有选择 y，此时包含的 x 的子集，必然会出现在包含 y 的所有子集中。</p><p>我们可以通过判断这种情况，来避免生成重复的子集。代码实现时，可以先将数组排序；迭代时，若发现没有选择上一个数，且当前数字与上一个数相同，则可以跳过当前生成的子集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="keyword">false</span>, n, path, nums, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> begin,<span class="keyword">boolean</span> choose, <span class="keyword">int</span> n, Deque&lt;Integer&gt; path, <span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin==n)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(begin+<span class="number">1</span>, <span class="keyword">false</span>, n,path, nums, res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(begin&gt;<span class="number">0</span> &amp;&amp; nums[begin]==nums[begin-<span class="number">1</span>] &amp;&amp; !choose)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.add(nums[begin]);</span><br><span class="line">        dfs(begin+<span class="number">1</span>, <span class="keyword">true</span>, n, path, nums, res);</span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：</p><p>$O(n \times 2^n)$ 其中 n 是数组nums 的长度。排序时间复杂度为 $O(nlogn)$ 。最坏情况下nums中无重复元素，需要枚举其所有 $ 2^n$ 个子集，每个子集加入答案时需要拷贝一份，耗时 $O(n)$, 一共需要 $O(n \times 2^n) + O(n) = O(n\times 2^n)$ 的实际来构造子集。</p><p>空间： $O(n)$ , 临时数组t的空间代价是O(n)， 递归时栈空间的代价为 $O(n)$</p><h2 id="60-排列序列"><a href="#60-排列序列" class="headerlink" title="60. 排列序列"></a><a href="https://leetcode-cn.com/problems/permutation-sequence/">60. 排列序列</a></h2><p>一句话题解：以下给出两种方法，思路其实是一样的：通过 计算剩余数字个数的阶乘，一位一位选出第 k 个排列的位数。</p><p>基于以下几点考虑，</p><p>所求排列一定在叶子节点处得到，可以根据已经选定的数的个数，进而计算还未选定的数的个数，然后计算阶乘，就知道这一个分支的叶子节点的个数。</p><ul><li>如果 k 大于这一个分支将要产生的叶子节点数，直接跳过这个分支，这个操作叫剪枝。</li><li>如果 k 小于等于 这个分支将要产生的叶子节点数，那说明所求的全排列一定在这个分支将要产生的叶子节点里，需要递归求解</li></ul><p><img src="https://i.loli.net/2021/10/08/GvmfoYzpLq3yanM.png" alt=""></p><p><img src="https://i.loli.net/2021/10/08/6nCmOXqcV7ND8KG.png" alt=""></p><p><img src="https://i.loli.net/2021/10/08/JPbKsoE6WkFvq7H.png" alt=""></p><p><img src="https://i.loli.net/2021/10/08/wGPRyatZ4oMgXA8.png" alt=""></p><p><img src="https://i.loli.net/2021/10/08/pZrdiPentQKCafI.png" alt=""></p><p><img src="https://i.loli.net/2021/10/08/nUOdm7P2skCzGr8.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        StringBuilder path = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span>[] factorial = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>]; <span class="comment">// 阶乘数组</span></span><br><span class="line">        factorial[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n ;i++)&#123;</span><br><span class="line">            factorial[i] = factorial[i-<span class="number">1</span>] * i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>, n ,k, path, used, factorial);</span><br><span class="line">        <span class="keyword">return</span> path.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index 在这一步之前已经选择了几个数字，其值恰好是等于这一步需要确定的下标位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> n,<span class="keyword">int</span> k, StringBuilder path, <span class="keyword">boolean</span>[] used, <span class="keyword">int</span>[] factorial)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算还未确定的数字的全排列的个数，第一次进入的时候是 n-1</span></span><br><span class="line">        <span class="keyword">int</span> cnt = factorial[n-<span class="number">1</span>-index];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt; k)&#123;</span><br><span class="line">                k -= cnt;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.append(i);</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            dfs(index+<span class="number">1</span>, n, k, path, used, factorial);</span><br><span class="line">            <span class="comment">// 注意：不可以回溯（重置变量），算法设计是【一下子来到叶子结点】，没有回头的过程</span></span><br><span class="line">            <span class="comment">// 这里加return，后面的数没有必要遍历去尝试了</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93. 复原 IP 地址"></a><a href="https://leetcode-cn.com/problems/restore-ip-addresses/">93. 复原 IP 地址</a></h2><p><img src="https://i.loli.net/2021/10/09/gPWyb8XIRqJ3ABr.png" alt=""></p><p>分析剪枝条件：</p><ul><li>一开始，字符串的长度小于4 或者 大于 12， 一定不能拼凑出合法的ip</li><li>每一个节点可以选择截取的法法只有三种，截1位，截2位，截3位，因此灭一个节点可以生长出的分支最多有3条，根据截取出来的字符串判断是否是合理ip，先截取，再转成int判断。</li><li>由于ip段最多就4段，因此这颗三叉树最多4层，这个条件作为递归终止条件之一。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        List&lt;String&gt; res =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">4</span> || n&gt;<span class="number">12</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;String&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>, n, path, s, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> splitTimes, <span class="keyword">int</span> n, Deque&lt;String&gt; path, String s, List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(splitTimes == <span class="number">4</span>)&#123;</span><br><span class="line">                res.add(String.join(<span class="string">&quot;.&quot;</span>,path));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 看到剩下的不够就退出，n-begin 表示剩余的还未分割的字符串的位数</span></span><br><span class="line">        <span class="keyword">if</span>(n - begin &lt; (<span class="number">4</span>-splitTimes) || n - begin &gt; <span class="number">3</span>*(<span class="number">4</span>-splitTimes))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(begin + i &gt;= n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ipSegment = judgeIFIpSegemnt(s, begin, begin+i);</span><br><span class="line">            <span class="keyword">if</span>(ipSegment != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 在判断是ip段的情况下，采取截取</span></span><br><span class="line">                path.addLast(String.valueOf(ipSegment));</span><br><span class="line">                dfs(begin+i+<span class="number">1</span>, splitTimes+<span class="number">1</span>, n, path, s, res);</span><br><span class="line">                path.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断s的子区间 [left, right] 是否能构成一个 ip段</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">judgeIFIpSegemnt</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = right - left + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 大于1 位的时候，不能以0开头</span></span><br><span class="line">        <span class="keyword">if</span>(len&gt;<span class="number">1</span> &amp;&amp; s.charAt(left) == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转成int 类型</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=left; i&lt;=right; i++)&#123;</span><br><span class="line">            res = res*<span class="number">10</span> + s.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res &gt; <span class="number">255</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;39-40-46-47-77-78-90-60-93排列、组合、子集相关问题&quot;&gt;&lt;a href=&quot;#39-40-46-47-77-78-90-60-93排列、组合、子集相关问题&quot; class=&quot;headerlink&quot; title=&quot;39/40/46/47/77/7</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Large-scale Extensible User Intent Classification for Dialogue Systems with Meta Lifelong Learning</title>
    <link href="http://example.com/2021/10/02/MeLL-Large-scale-Extensible-User-Intent-Classification-for-Dialogue-Systems-with-Meta-Lifelong-Learning/"/>
    <id>http://example.com/2021/10/02/MeLL-Large-scale-Extensible-User-Intent-Classification-for-Dialogue-Systems-with-Meta-Lifelong-Learning/</id>
    <published>2021-10-02T01:42:29.000Z</published>
    <updated>2021-10-06T14:18:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MeLL-Large-scale-Extensible-User-Intent-Classification-for-Dialogue-Systems-with-Meta-Lifelong-Learning"><a href="#MeLL-Large-scale-Extensible-User-Intent-Classification-for-Dialogue-Systems-with-Meta-Lifelong-Learning" class="headerlink" title="MeLL: Large-scale Extensible User Intent Classification for Dialogue Systems with Meta Lifelong Learning"></a>MeLL: Large-scale Extensible User Intent Classification for Dialogue Systems with Meta Lifelong Learning</h1><p>用户意图检测（UIC）对于理解他们在对话系统中的需求至关重要。(文本分类)</p><p>这是因为不同域中的用户输入可能具有不同的文本分布和目标意图集。随着底层应用程序的发展，新的UIC任务不断涌现。因此，为大规模可扩展UIC开发一个框架至关重要，该框架能够持续适应新任务，并以可接受的参数增长率避免灾难性遗忘。</p><p>作者引入Meta Lifelong Learning (MeLL) framework  解决此问题。</p><p>在MELL中，基于BERT的文本编码器被用来学习跨任务的健壮文本表示，其被缓慢更新以用于终身学习。</p><p>全局和局部记忆网络用来捕获不同类的跨任务原型表示，将其视为元学习者快速适应不同的任务。</p><p>此外，应用最近最少使用的替换策略来管理全局记忆，以使模型大小不会随时间爆炸。</p><p>最后，每个UIC任务都有自己的特定于任务的输出层，并仔细总结了各种特性。</p><h2 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h2><h3 id="task-wise-UIC-models-的缺陷"><a href="#task-wise-UIC-models-的缺陷" class="headerlink" title="task-wise UIC models 的缺陷"></a>task-wise UIC models 的缺陷</h3><p>一个天真的方法是训练task-wise UIC模型。这种方法不适合工业规模的应用，有三个原因:</p><ul><li>模型参数总数不断增加，与任务数成线性关系。考虑到当前预先训练的语言模型具有数十亿个参数，为UIC训练这样的模型很容易涉及数万亿个参数，从而导致参数爆炸问题。</li><li>由于跨域的UIC任务有一些相似之处，单任务方法无法从其他任务中学习可转移的知识，这对提高UIC的性能至关重要。(前向后向迁移)</li><li>当需要维护越来越多的模型时，这些方法不可避免地带来了工程负担。</li></ul><p>另一种流行的方法是跨任务的多任务训练，其中利用共享编码器来捕获共同知识，并且每个任务具有其自己的预测头。当一个新的UIC任务出现时，我们可能需要为以前的任务重新训练模型，这不仅计算量大，而且很难保持现有UIC任务的性能稳定。</p><h3 id="Liflong-learning-amp-Meta-learning"><a href="#Liflong-learning-amp-Meta-learning" class="headerlink" title="Liflong learning &amp; Meta learning"></a>Liflong learning &amp; Meta learning</h3><p>近年来，终身学习受到了研究界的广泛关注。它是一种学习范式，它不断积累过去学到的知识，并用它来帮助未来的任务学习。当终身学习应用于大规模EUIC时，当新任务不断到达时，我们只需要维护相对较少的模型参数，从而缓解了参数爆炸效应。</p><p>在终身学习中，解决灾难性的遗忘问题是具有挑战性的，即模型在学习新任务时“忘记”如何解决现有任务。这是特别不可取的，因为我们希望在学习新的UIC任务时保持现有任务的性能稳定。</p><p>元学习，旨在获得跨任务的元学习者，这样它就可以用很少的数据样本快速适应新任务。通过获取元学习者，可以获取跨不同UIC任务的可迁移知识，并将其传递给新任务。主要的缺点是元学习者(在本文的情况下是BERT模型) 应该分别适应每项任务，无法避免参数爆炸。</p><p>因此，一个自然的问题就产生了：是否有可能为大规模EUIC设计一个持续学习框架，使其既能在模型适用于新的UIC任务时保持现有UIC任务的性能，又能在新的UIC任务数量增加时具有可接受的参数增长率？</p><h3 id="MeLL"><a href="#MeLL" class="headerlink" title="MeLL"></a>MeLL</h3><p><img src="https://z3.ax1x.com/2021/10/02/4Hyvin.png" alt=""></p><p>它有一个共享的网络结构，用于学习不断增长的UIC任务，由三个部分组成：文本编码器、全局记忆网络和局部记忆网络。</p><p>文本编码器是基于BERT构建的，以生成健壮的文本表示(无论是针对用户的查询还是响应)。对于终身表示学习，这些参数被缓慢更新，这确保由新任务调用的更新操作不会对现有任务产生显著的负面影响。</p><p>受基于原型的元学习的启发，全局网络存储不同类别的跨任务原型表示</p><p>记忆单元的更新速度很快，捕捉到了可跨任务转移的知识，使我们的模型可以很容易地适应新的任务。随着所有任务的不同类别的数量不断增加，使用LRU(最近最少使用)替换策略来管理全局内存，这样大小就不会随着时间的推移而爆炸。</p><p>通过注意力机制将文本编码器产生的特征与全局记忆网络进行融合，并利用它们来学习最终的任务特定的UIC分类器。</p><p>学习过程完成后，我们将与任务相关的原型表示复制到任务自己的本地内存网络中，并冻结参数。在推理过程中，我们使用文本编码器和任务自身的局部记忆网络进行特征生成。</p><p>编码器被认为是不断消化可传递的表示学习知识并将其传递给特定任务的慢速学习者。</p><p>全局记忆网络是快速学习器，能够快速编码给定任务的特定知识。</p><p>LRU替换策略和从全局存储网络到局部存储网络的复制机制在不增加过多参数的情况下缓解了灾难性遗忘。</p><h2 id="RELATED-WORK"><a href="#RELATED-WORK" class="headerlink" title="RELATED WORK"></a>RELATED WORK</h2><h3 id="User-Intent-Classification"><a href="#User-Intent-Classification" class="headerlink" title="User Intent Classification"></a>User Intent Classification</h3><p>UIC的技术最初应用于搜索引擎中的信息搜索，帮助搜索引擎理解用户发送的搜索查询。 由于对话系统通常通过系统和用户之间的交互提供更好的用户体验，对话系统的 UIC 越来越受欢迎。</p><p>UIC 也可以表述为一个排名问题。 Intent-Aware Ranking with Transformers (IART) 模型，基于注意力机制考虑查询意图来选择合适的答案。 MeLL 与这些方法的不同之处在于，它考虑在终身学习环境中解决大量 UIC 任务，这对于工业应用至关重要。</p><h3 id="Lifelong-Learning"><a href="#Lifelong-Learning" class="headerlink" title="Lifelong Learning"></a>Lifelong Learning</h3><p>终身学习或持续学习是一种机器学习范式，它侧重于借助先前学习的任务来解决无限的任务序列。开发终身学习算法的一个关键挑战是提高未来任务的性能，同时避免对现有任务的灾难性遗忘。典型的方法包括经验回放[16，20，40]，知识提炼[6，26]，迁移学习[5，19，39]等。在实际的工业应用中，将经验回放应用于大量的历史任务或存储这些训练好的模型进行知识提取代价很高。</p><p>在MEL中，同时使用慢速和快速学习器(即文本编码器和全局记忆网络)来将知识从现有任务转移到新任务。</p><h3 id="Meta-learning"><a href="#Meta-learning" class="headerlink" title="Meta-learning"></a>Meta-learning</h3><p>元学习的目标是培养能够在训练数据较少的情况下适应各种任务的元学习者。元学习在计算机视觉中得到了广泛的应用，它被认为是一种K-way N-shot few-shot learning problem。典型的应用包括 few-shot 图像分类[25]、目标检测[12]和许多其他应用。元学习在自然语言处理中的应用研究不多，有文献[31，32，34]。</p><p>与前人的工作相比，MELL框架不是一个典型的K-way N-shot算法，而是利用元学习的思想来学习文本编码器，该编码器捕获跨任务可转移的知识。全局存储器中使用的快速更新机制和原型表示类似于几个元学习神经网 络[30，43]。</p><h3 id="Pre-trained-Language-Models"><a href="#Pre-trained-Language-Models" class="headerlink" title="Pre-trained Language Models."></a>Pre-trained Language Models.</h3><p>尽管它们很有效，但现代语言模型的巨大规模给在工业应用程序中的部署带来了巨大的挑战，因为工业应用程序中有许多任务需要解决。在MEL中，通过使用缓慢和快速更新的元学习器来解决这个问题，这些元学习器能够处理越来越多的任务，而不会在模型中引入太多新参数。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>$T<em>n$ 代表第 $n$ 个UIC 任务， $D_n={(x</em>{n,i}, y<em>{n,i})}$ 是 $T_n$ 的训练集，其中 $x</em>{n,i}$ 是第$D<em>n$ 中的第 $i$个输入样本（ 即输入文本，根据应用程序是用户查询或响应的场景），而 $y</em>{n,i}$ 是$x_{n,i}$ 的标签。</p><p>在大规模的EUIC设置中，考虑了我们面临无线序列的UIC任务 $T_1,T_2,…$ 的情况。在实际应用程序中，最开始我们通常有少量UIC任务可用。</p><p>因此让 $T<em>1,T_2,…T_N$ 是 $N$ 现有的基本UIC任务， $T</em>{N+1},T<em>{N+2},..$ 是新UIC任务的无限序列。我们的目标是构建一个学习系统 $F = {f_1,f_2,…,f_N,f</em>{N+1}, f<em>{N+2},…}$ 不断支持为新的UIC任务获取分类器 $f</em>{N+1},f_{N+2}$ 同时保持现有分类器 $(f_1,f_2,…,f_N)$ 的性能。</p><p>更具体的说，在初始阶段，我们给定了$N$ 训练集 $D<em>1,D_2,…,D_N$ ，N个基础任务来训练多任务UIC模型。之后模型可以自动扩展到无线数量的新任务 $T</em>{N+1},T_{N+2},…$ 新任务依次到达。</p><p>为了缓解灾难性遗忘和参数爆炸的问题， MeLL 的模型结构在训练和推理过程中具有不同的计算图。 总的来说，它有四个主要组成部分：</p><ul><li>Text Encoder</li><li>Global Memory Network</li><li>Local Memory Network</li><li>Task-specific Network</li></ul><p><img src="https://z3.ax1x.com/2021/10/02/4bS4BT.png" alt=""></p><p>UIC的特征是由缓慢更新的 TextEncoder 和快速更新的 Global Memory Network 生成的。</p><p>在特定任务的训练过程之后，相应的类表示从全局内存复制到特定任务的 Local Memory Network。在推理过程中，用文本编码器的特定于任务的 Local Memory来生成用于预测的特征。</p><h3 id="Text-Encoder"><a href="#Text-Encoder" class="headerlink" title="Text Encoder"></a>Text Encoder</h3><p>使用 Bert作为 作为模型的主干来学习跨任务的输入文本的通用、深度表示。在这里将 $x<em>{n,i}$ 表示为 $Q(x</em>{n,i})$。  随着新的 UIC 任务不断到来，BERT参数会缓慢更新以消化多个任务的可迁移知识。</p><p>请注意，在终身学习阶段，应将编码器参数的学习率设置为较小的值，以避免灾难性地忘记先前学习的任务。</p><h3 id="Global-and-Local-Memory-Networks"><a href="#Global-and-Local-Memory-Networks" class="headerlink" title="Global and Local Memory Networks"></a>Global and Local Memory Networks</h3><p>全局记忆网络存储 $K$ 个类别表示的 “ slots “ 槽。令 $y<em>N$ 为跨 $N$ 任务类的集合。即 $y_N = \cup</em>{n=1}^N y_n$ ， $K \ge |y_N|$</p><p>在初始学习阶段，我们设置 global memory G 如下：</p><p>对于类别标签 $y^{(m)}\in y_{N}$， 设 $T^{(m)}$ 是涉及 $y^{(m)}$ 的任务的集合。即 $T^{m} = {T_n | n\in {1,…,N} \ ,\  y^{(m)} \in y_n }$</p><p>$D<em>n^{(m)}$ 是 $D_n$ 的子集，$D^{(m)}_n = {(x</em>{n,i},y<em>{n,i}) \in D_n |y</em>{n,i} = y^{(m)}} $</p><p>类标签 $y^{(m)}$ 的原型表示向量 $G_N^{(m)}$ 为：</p><script type="math/tex; mode=display">G_N^{(m)} = \frac{1}{|T^{(m)}|} \sum_{T_n\in T^{(m)}} \frac{1}{|D_n^{(m)}|}\sum_{(x_{n,i},y_{n,i})\in D_n^{(m)}} Q(x_{n,i})</script><p>$G_N^{(m)}$ 是所有任务 $T^{(m)}$ 的原型向量的平均池化结果。通过聚合所有 $y_N$ 类表示 $G_N^{(m)}$，完成了 $G$ 的初始计算，将其视为多有$N$ 任务的高级表示。</p><p>我们进一步考虑终身学习的情况，一般而言，我们假设模型已经训练了 $j-1$ 个任务 $T<em>1,…,T</em>{j-1}$ 其中 $j&gt;N$ ,并且有一个新任务 $T_j$ 到达。</p><p>对于类 $y^{(m)} \in y<em>j$ , 如果对应的类表示 $G</em>{j-1}^{(m)}$ 存在于 $G$ 中，更新规则如下：</p><script type="math/tex; mode=display">G_j^{(m)} = (1-\gamma) G^{(m)}_{j-1} + \frac{\gamma}{|D_j^{(m)}|} \sum_{(x_{n,i},y_{n,i})\in D_j^{(m)}}  Q(x_{n,i})</script><p>其中 $\gamma \in (0,1)$ 是预定义的超参数，平衡已有的任务和新任务的相关重要性。</p><p>Global memory 的大小有 $K$ 的限制。当它满时，删除 $G$ 中最近最少访问的一项。</p><p>新插入$G$ 的类别表示计算为 ：</p><script type="math/tex; mode=display">G_j^{(m)} = \frac{1}{|D_j^{(m)}|} \sum_{(x_{n,i}, y_{n,i})\in D_j^{(m)}} Q(x_{n,i})</script><p>应用LRU替换策略，因为任务的主题趋势可能会随着时间的推移而漂移。最近更新的类表示在不久的将来很有可能再次使用。示例如下图：</p><p><img src="https://z3.ax1x.com/2021/10/02/4bkzQJ.png" alt=""></p><p>在任务感知学习过程结束时，对于当前任务 $T_n$，复制 $G$ 对应类的表示  $y_n$ 到它自己的本地内存 $L_n$ 用于推理，所有参数都被冻结。因此当全局记忆网络快速更新时，对 $G$ 的更改不会影响对现有任务的推理。</p><h3 id="Feature-Fusion-and-Model-Output"><a href="#Feature-Fusion-and-Model-Output" class="headerlink" title="Feature Fusion and Model Output"></a>Feature Fusion and Model Output</h3><p>在介绍了 $Q(x_{n,i})$ 和 $G$ 的生成后，现在讨论 MeLL中的前向传播。</p><p>假设我们正在学习任务 $T<em>n$， 当前训练实例为$(x</em>{n,i}, y_{n,i})\in D_n$。我们使用类标签集 $y_n$ 查询 $G$, 为每个类 $y^{(m)}\in y_n$ 生成当前类表示 $G_n^{(m)}$ 。 </p><p>注意力分数  $ \alpha ^{(m)}(x<em>{n,i}) = softmax(Q(x</em>{n,i})^T \cdot G_n^{(m)})$</p><p>请注意，注意力分数的计算与标准做法略有不同。 发送到task-specific output layer $Att(x_{n,i})$的最终注意力特征集计算如下：</p><script type="math/tex; mode=display">Att(x_{n,i}) = Q(x_{n,i}) + \sum_{y^{(m)}\in y_n} \alpha^{(m)} (x_{n,i}) \cdot G_n^{(m)}</script><p>其中$Q(x<em>{n,i})$ 被视为残差。预测结果由 $\hat y</em>{n,i} = f<em>n(Att(x</em>{n,i}))$ 给出。</p><p>由于输出层、 text encoder 和 global memory 中参数的梯度完全不同，我们通过反向传播更新这些参数。 local memory networks中的参数在反向传播期间不会更新。</p><h3 id="Algorithmic-Analysis"><a href="#Algorithmic-Analysis" class="headerlink" title="Algorithmic Analysis"></a>Algorithmic Analysis</h3><p><img src="https://z3.ax1x.com/2021/10/02/4bZRmj.png" alt=""></p><p>进一步对 MeLL 进行了更深入的分析，重点关注终身学习如何影响计算复杂性。 </p><p>假设我们正在学习一个新任务 $T_j (j&gt;N)$。设 $M$ 是BERT编码器中的参数总数， $d$ 是token嵌入的维数。</p><p>推导出全局记忆 、$T_j$ 的全局记忆、注意力融合层和 $T_j$ 的输出赠分别具有 参数 $K\cdot d$ 、 $|y_j|\cdot d$ 、0 和 $(d+1)|y_j|$ 参数</p><p>与所有第一个 𝑗 任务相关的参数总数为 $M+K\cdot d + (2d+1)\cdot |\cup<em>{n=1}^j y_j|$ ，其中 $M+(d+1)\cdot |\cup</em>{n=1}^j y_j|$ 个参数在反向传播期间是可训练的。</p><p>由于 BERT 编码器具有最多的参数，因此越来越多的任务对模型大小的影响很小。 因此，MeLL 成功解决了参数爆炸问题。此外，与具有重放策略的终身学习算法不同 ，我们的方法不需要任何重放操作。 相反，我们采用复制机制和文本编码器的缓慢更新来避免灾难性的遗忘。</p><h2 id="EXPERIMENTS"><a href="#EXPERIMENTS" class="headerlink" title="EXPERIMENTS"></a>EXPERIMENTS</h2><p><img src="https://z3.ax1x.com/2021/10/02/4b7QSS.png" alt=""></p><h3 id="Baselines"><a href="#Baselines" class="headerlink" title="Baselines"></a>Baselines</h3><ul><li>MTL：对所有任务使用多任务微调方法。在此设置中，我们假设所有任务的数据集都可供我们使用，并且不应用终身学习设置。该模型可以产生我们工作中的上界模型性能。</li><li>Single：为每个任务训练一个BERT分类器。当任务数较大时，不可避免地会出现参数爆炸问题。</li><li>Lifelong-freeze：首先在𝑁基本任务上使用多任务微调方法。接下来，它冻结BERT编码器，并且只调优每个新任务的特定于任务的输出层。</li><li>Lifelong-seq: 与“Lifelong-freeze”类似，不同之处在于当新任务到达时，BERT编码器也将以顺序方式进行调优。因此，它可能会遭受灾难性的遗忘问题。</li><li>Lifelong-replay: 是“Lifelong-seq”的扩展，它使用从先前任务中随机抽样的数据作为经验回放来重新训练先前任务的模型。</li></ul><p><img src="https://z3.ax1x.com/2021/10/02/4bHu7R.png" alt=""></p><p><img src="https://z3.ax1x.com/2021/10/02/4bL2HH.png" alt=""></p><p><img src="https://z3.ax1x.com/2021/10/02/4bO1VH.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MeLL-Large-scale-Extensible-User-Intent-Classification-for-Dialogue-Systems-with-Meta-Lifelong-Learning&quot;&gt;&lt;a href=&quot;#MeLL-Large-scale-</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>第五届达观杯——风险事件标签识别比赛复盘</title>
    <link href="http://example.com/2021/10/01/%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%94%E2%80%94%E9%A3%8E%E9%99%A9%E4%BA%8B%E4%BB%B6%E6%A0%87%E7%AD%BE%E8%AF%86%E5%88%AB%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2021/10/01/%E7%AC%AC%E4%BA%94%E5%B1%8A%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%94%E2%80%94%E9%A3%8E%E9%99%A9%E4%BA%8B%E4%BB%B6%E6%A0%87%E7%AD%BE%E8%AF%86%E5%88%AB%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%9B%98/</id>
    <published>2021-10-01T07:25:41.000Z</published>
    <updated>2021-10-03T14:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五届达观杯Rank4——风险事件标签识别比赛复盘"><a href="#第五届达观杯Rank4——风险事件标签识别比赛复盘" class="headerlink" title="第五届达观杯Rank4——风险事件标签识别比赛复盘"></a>第五届达观杯Rank4——风险事件标签识别比赛复盘</h1><p>成绩：A榜第5，B榜第4，最终分数分别为：0.62411600、0.58140504</p><p>比赛链接：<a href="https://www.datafountain.cn/competitions/512">https://www.datafountain.cn/competitions/512</a></p><p>代码：<a href="https://github.com/Coding-Zuo/DaguanFengxian">https://github.com/Coding-Zuo/DaguanFengxian</a></p><h2 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h2><p>这个比赛的全名是叫：基于大规模预训练模型的风险事件标签识别，在技术层面上可以提取为两个任务，一个是预训练一个是文本分类。</p><p>针对预训练赛题方给了一个70g的无标注预训练文本，训练集有14009条，测试集6004条（包含AB榜数据）</p><p>赛题全部为脱敏数据（所有文字都转换成了数字表达）脱敏前的数据样例为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">资讯文本</th><th style="text-align:center">风险事件标签</th></tr></thead><tbody><tr><td style="text-align:center">新冠肺炎疫情给美国劳动力市场造成巨大冲击，首次申请失业救济人数已经连续19周超过100万人，约为疫情暴发前平均水平的6倍</td><td style="text-align:center">宏观_经济数据下滑</td></tr><tr><td style="text-align:center">石化公司双苯厂发生爆炸事故，造成大量苯类污染物进入江河水体，造成重大环境污染</td><td style="text-align:center">事故_生产设施</td></tr><tr><td style="text-align:center">市场监管局执法人员对5家品牌奶茶店进行了检查，发现多家门店存在工作人员健康证不齐全、原材料管理不善等问题</td><td style="text-align:center">卫生_食品安全</td></tr><tr><td style="text-align:center">脱敏后</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">210 21048 4210 751252 10 21048 4210 75 125210 21048 4210 75125…..</td><td style="text-align:center">1-3</td></tr></tbody></table></div><p>在标签列可以看到样本有一级和二级标签之分，共有10个一级，35个二级标签。评价指标为macro F1。</p><p>我们尝试过一级标签和二级标签的联合预测，效果不好。</p><p>标签类别很多而且不平衡，多的类别上千条，少的类别只有十几个：</p><p><img src="https://z3.ax1x.com/2021/10/01/47Mv7j.png" alt=""></p><p>接下来我将分别从预训练模型、模型结构、提分技巧、模型融合复盘整个比赛过程。</p><h2 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h2><p>预训练模型百度网盘地址：链接：<a href="https://pan.baidu.com/s/1GCs1m6HiXenurGbjUBetFw">https://pan.baidu.com/s/1GCs1m6HiXenurGbjUBetFw</a> 提取码：fxth</p><p>对应代码部分：<a href="https://github.com/Coding-Zuo/DaguanFengxian/tree/main/bert_model/pretrain">https://github.com/Coding-Zuo/DaguanFengxian/tree/main/bert_model/pretrain</a></p><p>运行过程 处理数据 process_data —&gt; 构建词表 build_vocab —&gt; run pretrain</p><p>我们在无标注数据中根据cosine距离选择了四万条和训练集中样本相似的数据进行预训练。</p><p>分别预训练了bert-base模型 nezha-base模型，nezha与bert的区别主要是</p><p>nezha相比于google开源中文bert使用了更大的预训练语料，还使用了相对位置编码是一种有效的位置编码方案，全字掩蔽策略，混合精度训练和LAMB优化器。</p><p>nezha首次将函数型的相对位置编码加入了模型中。好处：主要是因为它可以使模型外推到比训练中遇到的序列长的序列长度。Bert针对每个位置合并了绝对位置编码，该绝对位置编码是嵌入向量，并且直接添加到token embedding。</p><p>我们对每种模型保存不同训练步数的checkpoint，可以用于后面的模型融合。</p><p>其实预训练策略可以做很多花样的文章，但由于机器有限，我们将主要的精力放在了微调方面。预训练策略只是遵循mlm和nsp。</p><p>我们主要使用过的预训练模型有：</p><ul><li>Bert-base-wwm-ext : 哈工大开源版本</li><li>Nezha-wwm-base: 哪吒官方开源版本</li><li>Bert120k: 预训练12万step</li><li>Bert150k: 预训练15万step</li><li>Bert80k: 预训练8万step</li><li>Nezha80k：预训练8万step</li><li>Nezha110k：预训练11万step</li><li>Nezha150k：预训练15万step</li></ul><p>最一开始是使用了word2vec在语料库上进行训练，代码：<a href="https://github.com/Coding-Zuo/DaguanFengxian/tree/main/baseline/src/classic_models/word2vec">https://github.com/Coding-Zuo/DaguanFengxian/tree/main/baseline/src/classic_models/word2vec</a> 线上第一次提交是 48点多分 排了七十多名。</p><p>然后开始使用bert等开源的权重，那么问题来了脱敏数据里词都是那样的，bert词表用不了怎么办？</p><ul><li>统计脱敏数据的词频，将对应词频与开源词表上的词频进行对换 (最开始使用的是这种) 线上可达50分左右</li><li>将word2vec训练好的embedding替换到bert上</li></ul><p>虽然无法还原句子，但频率估计可以还原一部分词，两个频率高的文本，在同一种语境下出现的概率更大，从语义相关性角度来说，可能会有一些语义相关性，改用明文后就可以随便用预训练语言模型了。</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p>我们最终的模型结构大致是：</p><p>Bert  —&gt;  BiLSTM 1层 —&gt; BiGRU 1层 —&gt; bert_pooler + 胶囊网络 —&gt; Multi-Sample Dropout预测输出</p><p>同时加BiLSTM和BiGRU大概有接近一个点的提高。胶囊网络有的预训练模型有一点点提高，但有的有负效果。</p><p>还尝试过 用 max_pooling + avg_pooling + 胶囊网络 + bert_pooling等组合，效果均不如直接使用bert_pooler和胶囊网络。</p><h2 id="提分技巧"><a href="#提分技巧" class="headerlink" title="提分技巧"></a>提分技巧</h2><h3 id="面对不均衡-dice-loss-amp-focal-loss-amp-cross-entropy-loss"><a href="#面对不均衡-dice-loss-amp-focal-loss-amp-cross-entropy-loss" class="headerlink" title="面对不均衡 dice loss &amp; focal loss &amp; cross entropy loss"></a>面对不均衡 dice loss &amp; focal loss &amp; cross entropy loss</h3><p>代码位置：<a href="https://github.com/Coding-Zuo/DaguanFengxian/tree/main/bert_model/training">https://github.com/Coding-Zuo/DaguanFengxian/tree/main/bert_model/training</a></p><p>样本不均衡会带来什么问题呢？</p><p>模型训练的本质是最小化损失函数，当某个类别的样本数量非常庞大，损失函数的值大部分被样本数量较大的类别所影响，导致的结果就是模型分类会倾向于样本量较大的类别。</p><p>通过类别加权Loss解决, 下图截自香侬科技的论文《Dice Loss for Data-imbalanced NLP Tasks》，分别列举了加权loss，Focal loss（FL）和他们提出的dice loss。我们的实验效果是：FL &lt; Weigth CE &lt; dice loss。所以主要采用了weight ce和dice loss。</p><p><img src="https://i.loli.net/2021/09/01/YkHOMIlVSPjG5aw.png" alt=""></p><p>Weight CE通过基于类别的加权的方式可以从不同类别的样本数量角度来控制Loss值，从而一定程度上解决了样本不均衡的问题。</p><p>基于类别加权Loss虽然在一定程度上解决了样本不均衡的问题，但是实际的情况是不仅样本不均衡会影响Loss，而且样本的难易区分程度也会影响Loss。</p><p>何恺明在论文《Focal Loss for Dense Object Detection》中提出了的Focal Loss，上图第三个公式。对于模型预测为正例的样本也就是p&gt;0.5的样本来说，如果样本越容易区分那么(1-p)的部分就会越小，相当于乘了一个系数很小的值使得Loss被缩小，也就是说对于那些比较容易区分的样本Loss会被抑制，同理对于那些比较难区分的样本Loss会被放大，这就是Focal Loss的核心：<strong>通过一个合适的函数来度量简单样本和困难样本对总的损失函数的贡献。</strong></p><p>dice loss香侬科技的这篇论文可以参考：<a href="https://coding-zuo.github.io/2021/09/01/Dice-Loss-for-Data-imbalanced-NLP-Tasks/">Dice Loss for Data-imbalanced NLP Tasks</a></p><p>交叉熵“平等”地看待每一个样本，无论正负，都尽力把它们推向1（正例）或0（负例）。但实际上，对分类而言，将一个样本分类为负只需要它的概率＜0.5即可，完全没有必要将它推向0。Dice Loss的自适应损失——DSC，在训练时推动模型更加关注困难的样本，降低简单负例的学习度，从而在整体上提高基于F1值的效果。</p><h3 id="对比学习"><a href="#对比学习" class="headerlink" title="对比学习"></a>对比学习</h3><p>代码位置：<a href="https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/models/modeling_nezha1.py">https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/models/modeling_nezha1.py</a></p><p>对比损失可以关注判别更困难的样本。</p><p>Feature学习是各类深度学习模型的一个基础、重要的功能。好的feature，将有助于文本任务性能的提升。</p><p>表示学习的目标是为输入x 学习一个表示 z，那么如何衡量一个表示z 的好坏可以通过互信息的形式；</p><p>互信息：代表我们知道了 z 之后 x的信息量减少了多少，</p><p>InfoNCE （又称ntxent loss）</p><script type="math/tex; mode=display">L_q = - log\frac{exp(q\cdot k_+ /\tau)}{\sum_{i=0}^K exp(q\cdot k_i / \tau)}</script><p>实质：核心是通过计算样本表示的距离，拉近正样本，拉远负样本</p><p>自监督的时候可以自行构造正负样本，那么有监督的时候就可以根据不同的样本标签来构建正负样本。</p><p><img src="https://z3.ax1x.com/2021/10/03/4LineI.png" alt=""></p><p>最大化相同标签的样本相似度，让不同样本标签的相似度比较小。</p><p>参考论文 《Supervised Contrastive Learning》、《SUPERVISED CONTRASTIVE LEARNING FOR PRE-TRAINED LANGUAGE MODEL FINE-TUNING》</p><h3 id="对抗训练"><a href="#对抗训练" class="headerlink" title="对抗训练"></a>对抗训练</h3><p>代码位置：<a href="https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/training/Adversarial.py">https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/training/Adversarial.py</a></p><p>很多人反映对抗训练没有效果，我最一开始的结果也是这样的。在开源版的nezha和bert上都会降分。</p><p>但随着预训练模型越来越多，模型越来越稳定，对抗训练就可以提分了。在预训练后的nezha上基本上是pgd比较好，但比较耗时，在bert上fgm有时会好一点。每个预训练模型的使用效果都不太一样。</p><p>我们还尝试了，不仅在bert的word_embedding上做扰动，还在encoder的第0层做扰动，同时随机在某个batch上不扰动，效果相差不多。</p><p>在验证集的效果对比：</p><ul><li>Nezha110k_noAdv: 0.5598</li><li>Nezha110k_fgm: 0.5639</li><li>Nezha110k_pgd: 0.5687</li><li>Bert80k_noAdv: 0.5542</li><li>Bert80k_fgm:0.5557</li><li>Bert80k_pgd:0.5650</li><li>Bert80k_fgm_advEncoder_random:0.5585</li><li>Bert80k_pgd_advEncoder_random:0.5684</li></ul><h3 id="Multi-Exit"><a href="#Multi-Exit" class="headerlink" title="Multi-Exit"></a>Multi-Exit</h3><p>代码位置：<a href="https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/models/modeling_bert_pabee.py">https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/models/modeling_bert_pabee.py</a></p><p>Bert 究竟在哪一层做输出会比较好呢？下图是在nezha80k上进行的实验，普遍发现在第layer9，也就是第10层的输出下普遍较好。其实实验下来发现整体效果不好就放弃了，但后来想想可能是因为12层输出联合训练导致的F1值偏低。其实发现第10层可能比较好，就干脆只用第十层的输出计算loss就好。但后来没有继续尝试。</p><p><img src="https://z3.ax1x.com/2021/10/03/4qBq9x.png" alt=""></p><h3 id="flooding洪泛法"><a href="#flooding洪泛法" class="headerlink" title="flooding洪泛法"></a>flooding洪泛法</h3><p>在最开始使用开源未经预训练的bert进行探索的过程中发现，验证集loss上升，acc也上升。但随着预训练模型的越来越稳定，这种现象就不存在了。</p><p><img src="https://z3.ax1x.com/2021/10/03/4qwGKe.png" alt=""></p><p>这种现象很常见，原因是过拟合或者训练验证数据分布不一致导致，即在训练后期，预测的结果趋向于极端，使少数预测错的样本主导了loss，但同时少数样本不影响整体的验证acc情况。ICML2020发表了一篇文章：《<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2002.08709.pdf">Do We Need Zero Training Loss After Achieving Zero Training Error?</a>》，描述了上述现象出现的原因，同时提出了一种flooding策略，通过超参数b控制训练loss不要过小，阻止进一步过拟合，在此情况下，使model”random walk”至一个泛化能力更好的结果，参考 <a href="https://wmathor.com/index.php/archives/1551/">我们真的需要把训练集的损失降到零吗？</a> 。上图左是加洪泛之前， 上图右是加洪泛之后的，训练集验证集每轮的loss。超参数b的值大概0.2左右小一些。对于模型效果来说，整体影响不大，训练的稍微稳定一点，比赛后期没有再用。</p><h3 id="Multi-sample-Dropout"><a href="#Multi-sample-Dropout" class="headerlink" title="Multi-sample Dropout"></a>Multi-sample Dropout</h3><p>代码位置：<a href="https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/models/layers.py">https://github.com/Coding-Zuo/DaguanFengxian/blob/main/bert_model/models/layers.py</a></p><p>dropout目前是NLP任务中很流行的数据扩充手段。Multi-Sample Dropout是对Dropout方法的一种改进，是2019年的一篇工作。Multi-Sample Dropout相比于dropout加快了模型训练过程的收敛速度和提高了泛化能力。</p><p><img src="https://z3.ax1x.com/2021/10/03/4L7NfP.png" alt=""></p><p>假设样本经过网络的编码层部分进行编码后得到一个向量表征。这时候，传统的Dropout会对向量表征作用一次，然后输入到分类层进行预测。而Multi-sample Dropout由多个Dropout操作完成。对一个向量表征进行多次dropout后，相当于形成了向量表征的多个版本的。这些不同版本的向量表征通过分类器得到标签的不同概率预测，最终的预测概率分布通过求和或者平均得到。</p><p>在比赛的实验中发现，dropout的数量为4，聚合的方式以加和的形式比average效果要好。dropout_rate最开始设为0.4。但后来慢慢发现有时，模型训着训着F1直接变成0了，而且只在bert模型上出现这种问题。找了几天原因发现dropout_rate不能设的太大，改成了0.2。</p><h3 id="伪标签"><a href="#伪标签" class="headerlink" title="伪标签"></a>伪标签</h3><p>关于伪标签，我个人认为总体指标达不到八十以上的比赛可能不太好管用。尤其这个赛题还是样本极其不均匀的就更不适合。因为第一，模型预测的把握度不大，根据我们线上59分的模型，预测概率为百分之40以上的测试集数据不到1500条，这在伪标签准确度上带来了不确定性。第二样本不均匀，如果直接把这1500条插入到训练集，可能会破坏训练集的一些分布，造成模型不稳定，学跑偏了。</p><p>测试结果：线上58.7的模型，在伪标签上重新训练后是58.3分。</p><h2 id="模型融合"><a href="#模型融合" class="headerlink" title="模型融合"></a>模型融合</h2><p>代码位置： <a href="https://github.com/Coding-Zuo/DaguanFengxian/tree/main/bert_model/ensemble">https://github.com/Coding-Zuo/DaguanFengxian/tree/main/bert_model/ensemble</a></p><h3 id="stacking"><a href="#stacking" class="headerlink" title="stacking"></a>stacking</h3><p><img src="https://z3.ax1x.com/2021/10/03/4qrZz6.png" alt=""></p><p>跑了四折的四种预训练模型的stacking。最后的第二层预测使用的是xgboost，整体效果没有达到预期，线上得分仅0.5707</p><p>四折的四种模型效果如下：</p><p><img src="https://z3.ax1x.com/2021/10/03/4qrqOO.png" alt=""></p><p>效果不佳的原因可能和拆分四折的数据分布有关，导致单模分数不是很高。由于样本不均衡，原先的拆分方法是针对不同类别有放回的随机取样做五折，随机性比较大，不容易过拟合。</p><p>为了让模型凑齐所有训练集的预测特征，且不让数据有重复，我使用了无放回的采样，针对不同类别的样本，按顺序分段提取每折样本，并且根据数据id去了一遍重。 在实验的时候发现不同折的数据分布对模型效果影响还蛮大的。</p><h3 id="投票-rank-概率平均"><a href="#投票-rank-概率平均" class="headerlink" title="投票+rank/概率平均"></a>投票+rank/概率平均</h3><p>投票在这次比赛效果非常好。</p><p>第一次融七个模型，模型平均分大概五十四五。</p><ul><li>投票线上结果：0.5809</li><li>投票，针对票数相同的结果，选择结果在每个模型的预测rank最靠前的作为结果：0.5852</li><li>投票，针对票数相同的结果，选择每个预测结果的概率平均值最大的作为结果：0.5850</li><li>根据七个模型的logits选最大的作为预测结果：0.5549</li><li>根据预测的概率加和取平均的线上结果：0.5618</li></ul><p>模型平均分大概57.5分左右</p><ul><li>投票+rank ：0.6201</li></ul><p>最后将所有线上得分超过60分的测试集结果再放到一起，再进行投票得到最后的最终成绩：0.6241</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://kexue.fm/archives/8213">短文本匹配Baseline：脱敏数据使用预训练模型的尝试</a></p><p><a href="https://github.com/823316627bandeng/2021-Daguan-Cup">https://github.com/823316627bandeng/2021-Daguan-Cup</a></p><p><a href="https://zhuanlan.zhihu.com/p/412897603/">【2021 第五届“达观杯” 基于大规模预训练模型的风险事件标签识别】1 初赛Rank12的总结与分析</a></p><p><a href="https://blog.csdn.net/u011630575/article/details/81302994">模型融合—— stacking详细讲解</a></p><p><a href="https://zhuanlan.zhihu.com/p/141172794?ivk_sa=1024320u">对比学习（Contrastive Learning）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第五届达观杯Rank4——风险事件标签识别比赛复盘&quot;&gt;&lt;a href=&quot;#第五届达观杯Rank4——风险事件标签识别比赛复盘&quot; class=&quot;headerlink&quot; title=&quot;第五届达观杯Rank4——风险事件标签识别比赛复盘&quot;&gt;&lt;/a&gt;第五届达观杯Rank4</summary>
      
    
    
    
    
    <category term="DataGame" scheme="http://example.com/tags/DataGame/"/>
    
  </entry>
  
  <entry>
    <title>22-括号生成(回溯&amp;深搜)</title>
    <link href="http://example.com/2021/09/30/22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90-%E5%9B%9E%E6%BA%AF-%E6%B7%B1%E6%90%9C/"/>
    <id>http://example.com/2021/09/30/22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90-%E5%9B%9E%E6%BA%AF-%E6%B7%B1%E6%90%9C/</id>
    <published>2021-09-30T01:24:20.000Z</published>
    <updated>2021-10-02T01:06:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-括号生成-回溯-amp-深搜"><a href="#22-括号生成-回溯-amp-深搜" class="headerlink" title="22-括号生成(回溯&amp;深搜)"></a>22-括号生成(回溯&amp;深搜)</h1><h4 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/">22. 括号生成</a></h4><p>这一类问题是在一棵隐式的树上求解，可以用深度优先遍历，也可以用广度优先遍历。<br>一般用深度优先遍历。原因是：</p><ul><li>代码好写，使用递归的方法，直接借助系统栈完成状态的转移；</li><li>广度优先遍历得自己编写结点类和借助队列。</li></ul><p>这里的「状态」是指程序执行到 隐式树 的某个结点的语言描述，在程序中用不同的 变量 加以区分。</p><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>减法</p><p><img src="https://z3.ax1x.com/2021/09/30/4IKLu9.png" alt=""></p><p>画图以后，可以分析出的结论：</p><ul><li>当前左右括号都有大于 0 个可以使用的时候，才产生分支；</li><li>产生左分支的时候，只看当前是否还有左括号可以使用；</li><li>产生右分支的时候，还受到左分支的限制，右边剩余可以使用的括号数量一定得在严格大于左边剩余的数量的时候，才可以产生分支；</li><li>在左边和右边剩余的括号数都等于 0 的时候结算。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做减法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 特判</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行深度优先遍历，搜索可能的结果</span></span><br><span class="line">        dfs(<span class="string">&quot;&quot;</span>, n, n, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curStr 当前递归得到的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left   左括号还有几个可以使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right  右括号还有几个可以使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res    结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String curStr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, List&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因为每一次尝试，都使用新的字符串变量，所以无需回溯</span></span><br><span class="line">        <span class="comment">// 在递归终止的时候，直接把它添加到结果集即可，注意与「力扣」第 46 题、第 39 题区分</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(curStr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪枝（如图，左括号可以使用的个数严格大于右括号可以使用的个数，才剪枝，注意这个细节）</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dfs(curStr + <span class="string">&quot;(&quot;</span>, left - <span class="number">1</span>, right, res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dfs(curStr + <span class="string">&quot;)&quot;</span>, left, right - <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不用减法，使用加法，即 <code>left</code> 表示「左括号使用了几个」，<code>right</code> 表示「右括号使用了几个」，可以画出另一棵递归树。</p><p><img src="https://z3.ax1x.com/2021/09/30/4IMFud.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做加法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 特判</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curStr 当前递归得到的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left   左括号已经用了几个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right  右括号已经用了几个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n      左括号、右括号一共得用几个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res    结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String curStr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> n, List&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == n &amp;&amp; right == n) &#123;</span><br><span class="line">            res.add(curStr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪枝</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">            dfs(curStr + <span class="string">&quot;(&quot;</span>, left + <span class="number">1</span>, right, n, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; n) &#123;</span><br><span class="line">            dfs(curStr + <span class="string">&quot;)&quot;</span>, left, right + <span class="number">1</span>, n, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="回溯算法与深度优先遍历"><a href="#回溯算法与深度优先遍历" class="headerlink" title="回溯算法与深度优先遍历"></a>回溯算法与深度优先遍历</h2><p>回溯法 采用试错的思想，它尝试分步去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其他的可能的分布解答再次尝试寻找问题的答案。回溯法 通常用递归方法来实现，在反复重复上述的步骤之后可能出现两种情况：</p><ul><li>找到一个可能存在的答案</li><li>在尝试了所有可能的分步方法后宣告该问题没有答案</li></ul><p><strong>深度优先搜索</strong> 算法（Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点v的所在边都已被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点位置。如果还存咋未发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行指导所有节点都被访问为止。</p><p>「回溯算法」与「深度优先遍历」都有「不撞南墙不回头」的意思。「回溯算法」强调了「深度优先遍历」思想的用途，用一个 <strong>不断变化</strong> 的变量，在尝试各种可能的过程中，搜索需要的结果。强调了 回退操作 对于搜索的合理性。而「深度优先遍历」强调一种遍历的思想，与之对应的遍历思想是「广度优先遍历」。至于广度优先遍历为什么没有成为强大的搜索算法，我们在题解后面会提。</p><p>在「力扣」第 51 题的题解《<a href="https://leetcode-cn.com/problems/n-queens/solution/gen-ju-di-46-ti-quan-pai-lie-de-hui-su-suan-fa-si-/">回溯算法（第 46 题 + 剪枝）</a>》 中，展示了如何使用回溯算法搜索 4 皇后问题的一个解，相信对直观地理解「回溯算法」是有帮助。</p><h2 id="搜索与遍历"><a href="#搜索与遍历" class="headerlink" title="搜索与遍历"></a>搜索与遍历</h2><p>我们每天使用的搜索引擎帮助我们在庞大的互联网上搜索信息。搜索引擎的「搜索」和「回溯搜索」算法里「搜索」的意思是一样的。</p><p>搜索问题的解，可以通过 遍历 实现。所以很多教程把「回溯算法」称为爆搜（暴力解法）。因此回溯算法用于 搜索一个问题的所有的解 ，通过深度优先遍历的思想实现。</p><h2 id="与动态规划的区别"><a href="#与动态规划的区别" class="headerlink" title="与动态规划的区别"></a>与动态规划的区别</h2><p>共同点：用于求解多阶段决策问题。多阶段决策问题即：</p><ul><li>求解一个问题分为很多步骤(阶段)</li><li>每个步骤(阶段) 可以有多种选择</li></ul><p>不同点：</p><ul><li>动态规划只需要求我们评估的最优解是多少，最优解对应的具体解是什么并不要求。因此 很适合用于评估一个方案的效果。</li><li>回溯算法可以搜索 得到所有的方案(当然也包括最优解)，但是本质上它是一种遍历算法，时间复杂度很高。</li></ul><h2 id="从全排列问题开始理解回溯算法"><a href="#从全排列问题开始理解回溯算法" class="headerlink" title="从全排列问题开始理解回溯算法"></a>从全排列问题开始理解回溯算法</h2><p>我们尝试在纸上写 3 个数字、4 个数字、5 个数字的全排列，相信不难找到这样的方法。以数组 <code>[1, 2, 3]</code> 的全排列为例。</p><ul><li>先写以1开头的全排列，他们是: $[1,2,3],[1,3,2]$，即1 + $[2,3]$的全排列 （注意：递归结构体现在这里）</li><li>再写以2开头的全排列，他们是: $[2,1,3],[2,3,1]$  ,即 <code>2</code> + <code>[1, 3]</code> 的全排列；</li><li>最后写以 3 开头的全排列，它们是：<code>[3, 1, 2], [3, 2, 1]</code>，即 <code>3</code> + <code>[1, 2]</code> 的全排列。</li></ul><p>总结搜索的方法： 按顺手枚举每一位可能出现的情况，已经选择的数字在当前要选择的数字中不能出现。按照这种策略就能做到不重不漏。这样的思路可以用一个树形结构表示。</p><p><img src="https://z3.ax1x.com/2021/10/01/4Ts5cD.png" alt=""></p><p>说明：</p><ul><li><p>每一个节点表示了求解全排列问题的不同阶段 ，这些阶段通过变量的 「不同的值」体现，这些变量的不同的值，称之为「状态」；</p></li><li><p>使用深度优先遍历有「回头」的过程，在「回头」以后， 状态变量需要设置成为和先前一样 ，因此在回到上一层结点的过程中，需要撤销上一次的选择，这个操作称之为「状态重置」；</p></li><li><p>深度优先遍历，借助系统栈空间，保存所需要的状态变量，在编码中只需要注意遍历到相应的节点的时候，状态变量的值是正确的，具体做法是：往下走一层的时候，path遍历在尾部追加，而往回走的时候，需要撤销上一次的选择，也是在尾部操作， 因此path变量是一个栈</p></li><li><p>深度优先遍历通过回溯操作，实现了全局使用一份状态变量的效果</p></li></ul><p>使用编程的方法得到全排列，就是在这样的一个树形结构中完成 <strong>遍历</strong>，从树的根结点到叶子结点形成的路径就是其中一个全排列。</p><h2 id="设计状态变量"><a href="#设计状态变量" class="headerlink" title="设计状态变量"></a>设计状态变量</h2><ul><li>首先这棵树除了根节点和叶子结点以外，每一个结点做的事情其实是一样的，即：在已经选择了一些数的前提下，在剩下的还没有选择的数中，依次选择一个数，这样显然是一个递归的结构。</li><li>递归的终止条件是：一个排列的数字已经选够了，因此外卖需要一个变量来表示当前程序递归到第几层，外卖把这个变量叫做depath，或者index，表示当前要确定的是某个全排列中下标为index 的那个数是多少。</li><li>布尔数组 used，初始化的时候都为false 表示这些数还没有被选择，当我们选定一个数的时候，就将这个数组的对应位置设为 true，这样在考虑下一个位置的时候，就能以 $O(1)$ 的时间复杂度判断这个数是否被选择过，这是一种以空间换时间的思想。</li></ul><p>这些变量称为「状态变量」，它们表示了在求解一个问题的时候所处的阶段。需要根据问题的场景设计合适的状态变量。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h4 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">      <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="comment">// 使用一个动态数组保存所有可能的全排列</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[len];</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(nums, len, <span class="number">0</span>, path, used, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> len, <span class="keyword">int</span> depth, List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used,</span></span></span><br><span class="line"><span class="function"><span class="params">                    List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(depth == len)&#123;</span><br><span class="line">          res.add(path);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 在非叶子节点处，产生不同的分支，这一操作的语义是：在还未选择的数中依次选择一个元素作为下一个位置的元素，这显然是通过一个循环实现。</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">              path.add(nums[i]);</span><br><span class="line">              used[i]=<span class="keyword">true</span>;</span><br><span class="line">              dfs(nums,len,depth+<span class="number">1</span>,path,used,res);</span><br><span class="line">              <span class="comment">//注意：下面这两行代码发生回溯，回溯发生从在深层节点回到浅层节点的过程，代码在形式上和递归前是对称的</span></span><br><span class="line">              used[i] = <span class="keyword">false</span>;</span><br><span class="line">              path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] nums=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">      Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; lists = solution.permute(nums);</span><br><span class="line">      System.out.println(lists);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        size = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        used = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">nums, size, depth, path, used, res</span>):</span></span><br><span class="line">            <span class="keyword">if</span> depth == size:</span><br><span class="line">                res.append(path)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> used[i]:</span><br><span class="line">                    used[i] = <span class="literal">True</span></span><br><span class="line">                    path.append(nums[i])</span><br><span class="line">                    dfs(nums, size, depth + <span class="number">1</span>, path, used, res);</span><br><span class="line">                    used[i] = <span class="literal">False</span></span><br><span class="line">                    path.pop()</span><br><span class="line"></span><br><span class="line">        dfs(nums, size, <span class="number">0</span>, [], used, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    solution = Solution()</span><br><span class="line">    res = solution.permute(nums)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p>执行 <code>main</code> 方法以后输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[], [], [], [], [], []]</span><br></pre></td></tr></table></figure><p>原因出现在递归终止条件这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (depth == len) &#123;</span><br><span class="line">    res.add(path);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> depth == size:</span><br><span class="line">res.append(path)</span><br><span class="line">    <span class="keyword">return</span> </span><br></pre></td></tr></table></figure><p>变量path 所指向的列表在深度优先遍历过程中只有一份，深度优先遍历完成以后，回到了根节点，成为空列表</p><p>在java中，参数传递是值传递，对象类型变量在传参的过程中，复制的是变量的地址。这些地址被添加到res变量，但实际上指向的是同一块内存地址，因此我们会看到6个空的列表对象。解决办法很简单，在 res.add(path)这里做一次拷贝即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(depth == len)&#123;</span><br><span class="line">  res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> depth == size:</span><br><span class="line">  res.append(path[:])</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>复杂度分析：</p><p>回溯算法由于其遍历的特点，时间复杂度一般都比较高，有些问题分析起来很复杂。一些问题剪枝剪得好的话，复杂度会降的很低，因此分析最坏时间复杂度的意义不是很大。但视情况而定</p><p>时间复杂度 $O(N\times N!)$</p><p>非叶子结点的个数，一次为(按层数来)：</p><script type="math/tex; mode=display">1+A_N^1 + A_N^2 +...+A_N^{N-1} = 1 + \frac{N!}{(N-1)!} + \frac{N!}{(N-2)!} +...+N!</script><p>1是根节点，在第一层，节点个数为 N个选一个的排列 故为$A_N^1$</p><p>空间复杂度： $O(N\times N!)$</p><p>递归树深度 $logN$ ，全排列个数 $N!$ , 每个全排列占空间$N$ 。取较大者</p><h3 id="为什么不是广度优先遍历"><a href="#为什么不是广度优先遍历" class="headerlink" title="为什么不是广度优先遍历"></a>为什么不是广度优先遍历</h3><ul><li>首先是正确性，只有遍历状态空间，才能得到所有符合条件的解，这一点 BFS 和 DFS 其实都可以；</li><li>在深度优先遍历的时候，不同状态之间的切换很容易 ，可以再看一下上面有很多箭头的那张图，每两个状态之间的差别只有 11 处，因此回退非常方便，这样全局才能使用一份状态变量完成搜索；</li><li>如果使用广度优先遍历，从浅层转到深层，状态的变化就很大，此时我们不得不在每一个状态都新建变量去保存它，从性能来说是不划算的；</li><li>如果使用广度优先遍历就得使用队列，然后编写结点类。队列中需要存储每一步的状态信息，需要存储的数据很大，真正能用到的很少 。</li><li>使用深度优先遍历，直接使用了系统栈，系统栈帮助我们保存了每一个结点的状态信息。我们不用编写结点类，不必手动编写栈完成深度优先遍历。</li></ul><p>做题的时候，建议 先画树形图 ，画图能帮助我们想清楚递归结构，想清楚如何剪枝。拿题目中的示例，想一想人是怎么做的，一般这样下来，这棵递归树都不难画出。</p><p>在画图的过程中思考清楚：</p><ul><li>分支如何产生；</li><li>题目需要的解在哪里？是在叶子结点、还是在非叶子结点、还是在从跟结点到叶子结点的路径？</li><li>哪些搜索会产生不需要的解的？例如：产生重复是什么原因，如果在浅层就知道这个分支不能产生需要的结果，应该提前剪枝，剪枝的条件是什么，代码怎么写？</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="题型一：排列、组合、子集相关问题"><a href="#题型一：排列、组合、子集相关问题" class="headerlink" title="题型一：排列、组合、子集相关问题"></a>题型一：排列、组合、子集相关问题</h3><p>提示：这部分练习可以帮助我们熟悉「回溯算法」的一些概念和通用的解题思路。解题的步骤是：先画图，再编码。去思考可以剪枝的条件， 为什么有的时候用 used 数组，有的时候设置搜索起点 begin 变量，理解状态变量设计的想法。</p><ul><li><p><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/permutations-ii/">47. 全排列 II（中等）</a>：思考为什么造成了重复，如何在搜索之前就判断这一支会产生重复；</p></li><li><p><a href="https://leetcode-cn.com/problems/combination-sum/">39. 组合总和（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40. 组合总和 II（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/combinations/">77. 组合（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/subsets/">78. 子集（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/subsets-ii/">90. 子集 II（中等）</a>：剪枝技巧同 47 题、39 题、40 题；</p></li><li><p><a href="https://leetcode-cn.com/problems/permutation-sequence/">60. 第 k 个排列（中等）</a>：利用了剪枝的思想，减去了大量枝叶，直接来到需要的叶子结点；</p></li><li><p><a href="https://leetcode-cn.com/problems/restore-ip-addresses/">93. 复原 IP 地址（中等）</a></p></li></ul><h3 id="题型二：Flood-Fill"><a href="#题型二：Flood-Fill" class="headerlink" title="题型二：Flood Fill"></a>题型二：Flood Fill</h3><p>提示：Flood 是「洪水」的意思，Flood Fill 直译是「泛洪填充」的意思，体现了洪水能够从一点开始，迅速填满当前位置附近的地势低的区域。类似的应用还有：PS 软件中的「点一下把这一片区域的颜色都替换掉」，扫雷游戏「点一下打开一大片没有雷的区域」。</p><p>下面这几个问题，思想不难，但是初学的时候代码很不容易写对，并且也很难调试。我们的建议是多写几遍，忘记了就再写一次，参考规范的编写实现（设置 visited 数组，设置方向数组，抽取私有方法），把代码写对。</p><ul><li><p><a href="https://leetcode-cn.com/problems/flood-fill/">733. 图像渲染（Flood Fill，中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/number-of-islands/">200. 岛屿数量（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/surrounded-regions/">130. 被围绕的区域（中等）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/word-search/">79. 单词搜索（中等）</a></p></li></ul><p>说明：以上问题都不建议修改输入数据，设置 <code>visited</code> 数组是标准的做法。可能会遇到参数很多，是不是都可以写成成员变量的问题，面试中拿不准的记得问一下面试官</p><h3 id="题型三：字符串中的回溯问题"><a href="#题型三：字符串中的回溯问题" class="headerlink" title="题型三：字符串中的回溯问题"></a>题型三：字符串中的回溯问题</h3><p>提示：字符串的问题的特殊之处在于，字符串的拼接生成新对象，因此在这一类问题上没有显示「回溯」的过程，但是如果使用 StringBuilder 拼接字符串就另当别论。<br>在这里把它们单独作为一个题型，是希望朋友们能够注意到这个非常细节的地方。</p><ul><li><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合（中等）</a>，<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/hui-su-sou-suo-wu-xian-shi-hui-su-yan-du-you-xian-/">题解</a>；</p></li><li><p><a href="https://leetcode-cn.com/problems/letter-case-permutation/">784. 字母大小写全排列（中等）</a>；</p></li><li><p><a href="https://leetcode-cn.com/problems/generate-parentheses/">22. 括号生成（中等）</a> ：这道题广度优先遍历也很好写，可以通过这个问题理解一下为什么回溯算法都是深度优先遍历，并且都用递归来写。</p></li></ul><h3 id="题型四：游戏问题"><a href="#题型四：游戏问题" class="headerlink" title="题型四：游戏问题"></a>题型四：游戏问题</h3><p>回溯算法是早期简单的人工智能，有些教程把回溯叫做暴力搜索，但回溯没有那么暴力，回溯是有方向地搜索。「力扣」上有一些简单的游戏类问题，解决它们有一定的难度，大家可以尝试一下。</p><ul><li><p><a href="https://leetcode-cn.com/problems/n-queens/">51. N 皇后（困难）</a>：其实就是全排列问题，注意设计清楚状态变量，在遍历的时候需要记住一些信息，空间换时间；</p></li><li><p><a href="https://leetcode-cn.com/problems/sudoku-solver/">37. 解数独（困难）</a>：思路同「N 皇后问题」；</p></li><li><p><a href="https://leetcode-cn.com/problems/zuma-game/">488. 祖玛游戏（困难）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/minesweeper/">529. 扫雷游戏（困难）</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;22-括号生成-回溯-amp-深搜&quot;&gt;&lt;a href=&quot;#22-括号生成-回溯-amp-深搜&quot; class=&quot;headerlink&quot; title=&quot;22-括号生成(回溯&amp;amp;深搜)&quot;&gt;&lt;/a&gt;22-括号生成(回溯&amp;amp;深搜)&lt;/h1&gt;&lt;h4 id=&quot;22-</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Efficient lifelong learning with A-GEM</title>
    <link href="http://example.com/2021/09/28/EFFICIENT-LIFELONG-LEARNING-WITH-A-GEM/"/>
    <id>http://example.com/2021/09/28/EFFICIENT-LIFELONG-LEARNING-WITH-A-GEM/</id>
    <published>2021-09-28T03:26:24.000Z</published>
    <updated>2021-10-05T02:00:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Efficient-lifelong-learning-with-A-GEM"><a href="#Efficient-lifelong-learning-with-A-GEM" class="headerlink" title="Efficient lifelong learning with A-GEM"></a>Efficient lifelong learning with A-GEM</h1><p>从样本复杂度、计算和内存成本方面研究了当前终身学习方法的效率。</p><p>首先引入了一个新的、更现实的评估协议，学习者只观察每个例子一次，超参数选择是在一个小的、不相交的任务集上完成的，不用于实际的学习体验和评估 .</p><p>其次，引入了一个新的度量标准来衡量学习者获得一项新技能的速度。</p><p>第三，提出了 GEM 的改进版本，称为平均 GEM (A-GEM)，它具有与 GEM 相同甚至更好的性能，同时在计算和内存效率方面几乎与 EWC 和其他基于正则化的方法一样。</p><p>最后，包括A-GEM在内的所有算法，如果提供指定所考虑的分类任务的任务描述符，则可以更快地学习。</p><h2 id="Learning-protocol"><a href="#Learning-protocol" class="headerlink" title="Learning protocol"></a>Learning protocol</h2><p>一种新的学习范式，即学习者对一组与实际用于评估的任务集不相交的任务进行交叉验证。在这种情况下，学习者将必须学习并将在一个全新的任务序列上进行测试，并且它将仅在该数据流上执行一次。</p><p>以前关于终身学习的工作采用直接从监督学习中借用的学习范式。 有 T 个任务，每个任务由训练集、验证集和测试集组成。 在训练期间，学习者根据需要对每个任务的数据进行尽可能多的传递。</p><p>此外，通过根据交叉验证网格搜索所需的次数扫描整个任务序列来调整验证集上的超参数。最后，使用由先前交叉验证过程选择的模型在每个任务的测试集上报告度量。</p><p>由于当前范式违反了我们对 LLL 的更严格定义，即学习者只能对数据进行一次传递，因为我们想强调从数据中快速学习的重要性，因此现在引入了一种新的学习范式。</p><p>我们考虑由以下有序数据集序列描述的两个任务流：</p><p>$D^{CV}={D<em>1,…,D</em>{T^{CV}}}$  和 $D^{EV} = {D_{T^{CV}+1},…,D_T}$</p><p>其中 $D<em>k = {(x_i^k,t_i^k,y_i^k)</em>{i=1}^{n_k}}$  是第k个任务的数据集。 $T^{CV}&lt;T$ 在实验中 $T^{CV}=3,T=20$</p><p>我们假设所有数据集都来自相同的任务分布。 为了避免符号混乱，让上下文指定 $D_k$ 是指第 k 个数据集的训练集或测试集。</p><p>$D^{CV}$是交叉验证期间将使用的数据集的流。$D^{CV}$允许学习者出于模型超参数选择的目的多次重放所有样本。</p><p>相反，$D^{EV}$是用于测试集的最终训练和评估的实际数据集。学习者将观察 $D^{EV}$ 中的训练样本一次且仅一次，并且所有指标都将在 $D^{EV}$的测试集上报告。</p><p><img src="https://z3.ax1x.com/2021/09/28/4WN3Nt.png" style="zoom:150%;" /></p><h2 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h2><p>引入了一个新的度量标准来衡量学习速度，它有助于量化一个学习算法学习一个新任务的能力—— Learning Curve Area (LCA)</p><p>每个任务的训练数据集 $D_k$ 由总共 $B_k$个小批次组成。在每次呈现一小批任务 $k$ 之后，使用相应的测试集来评估学习者在所有任务上的表现。</p><p>设 $\alpha_{k,i,j}\in [0,1]$是用任务 $k$ 的第 $i$ 个小批次训练模型后，在任务 $j$ 的测试集上评估的准确度。</p><p>假设连续体中的第一个学习任务由1索引 ( $T^{CV}+1$ 对应于 $D^{EV}$ ) ,  $T$ 的最后一个(对于 $D^{CV}$ ，将是 $T^{CV}$)，我们定义了以下指标：</p><h3 id="Average-Accuracy"><a href="#Average-Accuracy" class="headerlink" title="Average Accuracy"></a>Average Accuracy</h3><p>$A\in [0,1]$ 用所有小批量连续训练模型后的平均精度，直到任务k被定义为：</p><script type="math/tex; mode=display">A_k = \frac{1}{k} \sum_{j=1}^k \alpha_{k, B_{k},j}</script><p>$A_T$ 是所有任务的平均准确率，是最后一个任务学习后得到的。这是LLL中最常用的度量。</p><h3 id="Forgetting-Measure"><a href="#Forgetting-Measure" class="headerlink" title="Forgetting Measure"></a>Forgetting Measure</h3><p>$F \in [-1,1]$  模型经过所有小批量连续训练后的平均遗忘，直到任务 k 被定义为：</p><script type="math/tex; mode=display">F_k = \frac{1}{k-1} \sum_{j=1}^{k-1} f_j^k</script><p>其中 $f_j^k$ 是在使用所有小批量训练模型直到任务 k 并计算为：</p><script type="math/tex; mode=display">f_j^k = max_{l\in \{1,...,k-1\}} \alpha_{l,B_l,j} - \alpha_{k, B_k, j}</script><p>在学习完所有任务后测量遗忘很重要，原因有两个。它量化了过去任务的准确率下降，并给出了模型学习新任务的速度的间接概念，因为健忘的模型几乎没有剩余的知识可以转移，特别是如果新任务与其中一个任务更密切相关 。</p><h3 id="Learning-Curve-Area"><a href="#Learning-Curve-Area" class="headerlink" title="Learning Curve Area"></a>Learning Curve Area</h3><p>$LCA \in [0,1]$ 让我们首先定义模型在所有 T 任务训练后的平均 b-shot 性能（其中 b 是小批量数）：</p><script type="math/tex; mode=display">Z_b = \frac{1}{T} \sum_{k=1}^T \alpha_{k,b,k}</script><p>$\beta$ 处的 LCA 是作为  $b \in [0, \beta]$ 函数的收敛曲线 $Z_b$ 的面积：</p><script type="math/tex; mode=display">LCA_{beta} = \frac{1}{\beta+1} \int_0^{\beta} Z_b db = \frac{1}{\beta+1} \sum_{b=0}^{\beta} Z_b</script><p>LCA 有一个直观的解释。 $LCA<em>0$ 是平均 0-shot 表现，与 GEM 中的前向转移相同。 $LCA</em>{\beta}$  是  $Z<em>b$ 曲线下的区域，如果 0-shot 性能好并且学习器学习速度快，则该区域很高。 特别是，可能有两个模型具有相同的 $Z_b$ 或 $A_T$ ，但 $LCA</em>{\beta}$ 非常不同，因为一个模型比另一个学习得快得多，而它们最终都获得了相同的最终精度。 该度量旨在区分这两种情况，并且对于相对较小的 $\beta$ 值是有意义的，因为我们对从少数示例中学习的模型感兴趣。</p><h2 id="Averaged-gradient-episodic-memory-A-GEM"><a href="#Averaged-gradient-episodic-memory-A-GEM" class="headerlink" title="Averaged gradient episodic memory (A-GEM)"></a>Averaged gradient episodic memory (A-GEM)</h2><p>A-GEM 建立在 GEM  的基础上，该算法利用小的情节记忆在单遍设置中表现良好，并对损失函数提出了一个小的改变，使 GEM 在 训练时间，同时保持相似的表现； </p><h3 id="回顾GEM"><a href="#回顾GEM" class="headerlink" title="回顾GEM"></a>回顾GEM</h3><p>GEM在计算和内存成本方面很高。GEM通过为每个任务 $k$ 存储情节记忆 $M_k$ 来避免灾难性遗忘。</p><p>在最小化当前任务 t 的损失的同时，GEM 将任务 k&lt;t 的情景记忆的损失视为不等式约束，避免其增加但允许其减少。</p><script type="math/tex; mode=display">l (f_{\theta}, M_k) = \frac{1}{|M_k|} \sum_{(x_i,k,y_i)\in M_k} l(f_{\theta}(x_i,k),y_i)</script><p>这有效地允许 GEM 进行其他 LLL 方法不支持的 积极反向迁移。 形式上，在任务 t，GEM 解决以下目标：</p><script type="math/tex; mode=display">minimize_{\theta} \ \ l (f_{\theta}, D_t)  \ \ s.t. \ \ l(f_{\theta}^{t-1}, M_k) \ \ \ \ \forall k<t</script><p>其中 $f_{\theta}^{t-1}$ 是训练到任务 $t−1$ 的网络，为了检查损失的增加，GEM 计算先前任务的损失梯度 $g_k$ 向量与当前任务 $g$ 的梯度更新之间的角度。只要与任何 $g_k$ 的角度大于 90°，它就会将建议的梯度投影到 L2 范数梯度 $\hat g$ 中最接近的，从而使角度保持在边界内。 形式上，GEM 解决的优化问题由下式给出：</p><script type="math/tex; mode=display">minimize_{\hat g} \ \ \frac{1}{2}||g-\hat g||_2^2  \ \ \ s.t. \ \ <\hat g,g_k> \ge0  \ \ \ \forall k<t</script><p>这是一个 凸优化中二次规划的问题， P 变量（网络中的参数数量）中的二次规划 (QP)，对于神经网络而言，可能是数百万。为了有效地解决这个问题，GEM 在对偶空间中工作，这导致只有 t − 1 个变量的更小的 QP：</p><script type="math/tex; mode=display">minimize_v \ \  \frac{1}{2}v^TGG^Tv + g^TG^Tv \ \ s.t. \ \ v\ge0</script><p>其中 $G = -(g<em>1,…,g</em>{t-1}) \in R^{(t-1)\times P}$ 是在训练的每个梯度步骤计算的。一旦上式找到最优解 $v^{<em>}$， 投影梯度可以计算为：$\hat g =G^Tv^{</em>} + g$</p><p>虽然 GEM 已被证明在单个 epoch 设置中非常有效，但性能提升的前提是训练时的计算负担很大。在每个训练步骤中，GEM使用情景记忆中的所有样本来计算矩阵 $G$ ，并且它还需要求解QP。当M的大小和任务数量很大时，此内循环优化变得令人望而却步。</p><p><img src="https://z3.ax1x.com/2021/09/28/4fSh5T.png" alt=""></p><h3 id="A-GEM"><a href="#A-GEM" class="headerlink" title="A-GEM"></a>A-GEM</h3><p>GEM 确保在每个训练步骤中，每个单独的先前任务的损失（由情景记忆中的样本近似）不会增加</p><p>而 A-GEM 试图确保在每个训练步骤中，先前任务的平均情景记忆损失不会增加。 形式上，在学习任务 t 时，A-GEM 的目标是：</p><script type="math/tex; mode=display">minimize_{\theta} \ \ \ l(f_{\theta}, D_t) \ \ \ s.t. \ \ l(f_{\theta}, M) \le l (f_{\theta}^{t-1}, M) \ \ where \ M =\cup_{k<t} M_{k}</script><p>相应的优化问题简化为：</p><script type="math/tex; mode=display">minimize_{\hat g} \ \ \frac{1}{2}||g-\hat g||_2^2 \ \ s.t. \ \ \hat g^Tg_{ref} \ge 0</script><p> 其中 $g<em>{ref}$ 是使用从情节记忆 $(x</em>{ref},y_{ref}) \sim M$ 中随机采样的批次计算得出的梯度。</p><p>换句话说，A-GEM 用单个约束替换了 GEM 的 t-1 约束，其中 $g_{ref}$ 是从情景记忆的随机子集计算出的先前任务的梯度的平均值。</p><p>现在可以非常快速地解决上面方程的约束优化问题； 当梯度 g 违反约束时，它通过以下方式进行投影：</p><script type="math/tex; mode=display">\hat g = g- \frac{g^Tg_{ref}}{g^{T}_{ref}g_{ref}} g_{ref}</script><p>这使得 A-GEM 不仅内存高效，因为它不需要存储矩阵 G，而且比 GEM 快几个数量级，因为 </p><ul><li><p>1）不需要计算矩阵 G 而只需要计算内存样本的随机子集的梯度 </p></li><li><p>2）它不需要解决任何 QP，只需要解决一个内积</p></li><li><p>3）它会产生更少的违背约束，特别是当任务数量很大时。 </p><p>所有这些因素一起使 A-GEM 更快，同时不会妨碍其在单程设置中的良好性能。</p></li></ul><h3 id="证明推导-A-GEM-update-rule"><a href="#证明推导-A-GEM-update-rule" class="headerlink" title="证明推导 A-GEM update rule"></a>证明推导 A-GEM update rule</h3><p>给出了A-GEM更新规则 $\hat g = g- \frac{g^Tg<em>{ref}}{g^{T}</em>{ref}g<em>{ref}} g</em>{ref}$ 的证明</p><p>A-GEM的优化目标:</p><script type="math/tex; mode=display">minimize_{\hat g} \ \ \frac{1}{2}||g-\hat g||_2^2 \ \ s.t. \ \ \hat g^Tg_{ref} \ge 0</script><p>将 $\hat g$ 替换为 $z$，并重写：</p><script type="math/tex; mode=display">minimize_{\hat g} \ \ \frac{1}{2} z^z -g^z \ \ s.t. \ -z^Tg_{ref}\le 0</script><p>请注意，目标中丢弃了项 $g^Tg$，并更改了不等式约束的符号。 上面定义的约束优化问题的拉格朗日可以写成：</p><script type="math/tex; mode=display">L(z,\alpha) = \frac{1}{2} z^Tz - g^z - \alpha z^Tg_{ref}</script><p>方程的对偶：</p><script type="math/tex; mode=display">\theta_D(\alpha) = min_z L(z,\alpha)</script><p>通过将 $L(z, \alpha)$ 相对于 z 的导数设置为零来找到最小化 $L(z, \alpha)$ 的值 $z^∗$：</p><script type="math/tex; mode=display">\nabla_z L(z,\alpha) = 0 \ ,\ z^* = g+\alpha g_{ref}</script><p>代入 $z^∗$ 值后的简化对偶:</p><script type="math/tex; mode=display">\theta_D(\alpha) = \frac{1}{2} (g^Tg +2\alpha g^Tg_{ref} +\alpha^2 g^Tg_{ref} ) - g^Tg-2\alpha g^Tg_{ref} - \alpha^2g_{ref}^Tg_{ref} \\= -\frac{1}{2}g^Tg - \alpha g^Tg_{ref} - \frac{1}{2}^2g_{ref}^Tg_{ref}</script><p>对偶的解 $\alpha^* = max<em>{\alpha;\alpha&gt;0} \theta</em>{D}(\alpha)$ ：</p><script type="math/tex; mode=display">\nabla_{\alpha} \theta_D(\alpha)  = 0 \ ,\ \alpha^* = -\frac{g^Tg_{ref}}{g^T_{ref}g_{ref}}</script><p>通过将$\alpha^*$放入上式中，A-GEM更新规则：</p><script type="math/tex; mode=display">z^{*} = g- \frac{g^Tg_{ref}}{g^T_{ref} g_{ref}} = \hat g</script><h2 id="Joint-embedding-model-using-compositional-task-descriptors"><a href="#Joint-embedding-model-using-compositional-task-descriptors" class="headerlink" title="Joint embedding model using compositional task descriptors"></a>Joint embedding model using compositional task descriptors</h2><p>在这一部分中，将讨论如何改进包括A-GEM在内的所有LLL方法的前向迁移。</p><p>为了加速新任务的学习，我们考虑使用组合任务描述符，其中组件在任务之间共享，从而允许迁移。</p><p>例如，组合任务描述符的示例是所考虑任务的自然语言描述或指定要在任务中识别的对象的属性值的矩阵。</p><p>如果模型已经学习并记住了两个独立的属性(例如，羽毛的颜色和喙的形状)，则它可以在提供指定其属性(黄色羽毛和红色喙)的值的描述符的情况下快速识别新的类，尽管这是完全不可见的组合。</p><p>借鉴小样本学习文献中的思想，我们学习了图像特征和属性嵌入之间的联合嵌入空间。</p><p>形式上，让 $x^k \in X$ 是输入（例如，图像），$t^k$ 是大小为 $C<em>k × A$ 的矩阵形式的任务描述符，其中 $C_k$ 是第 k 个任务中的类数，A 是 数据集中每个类的属性总数。 联合嵌入模型由特征提取模块 $\phi</em>{\theta}: x^k \to \phi<em>{\theta}(x^k)$，其中 $\phi</em>{\theta}(x^k)\in R^D$ 和任务嵌入模块 $\psi_w :t^k \to \psi_w(t^k)$，其中 $\psi_w(t^k)\in R^{C_k\times D}$ 组成 。</p><p>在这项工作中，$\phi_{\theta}(.)$ 被实现为标准的多层前馈网络，而 $\psi_w(.)$ 被实现为维度 A × D 的参数矩阵。这个矩阵可以解释为一个属性查找表，因为每个属性都与一个 D 维向量相关联，通过类中存在的属性的线性组合，从中构建类嵌入向量；</p><p>任务描述符嵌入然后是任务中存在的类的嵌入向量的串联。 在训练期间，通过最小化交叉熵损失来学习参数 θ 和 ω：</p><script type="math/tex; mode=display">l_k(\theta, w) = \frac{1}{N} \sum_{i=1}^N - log(p(y_i^k| x_i^k,t^k;\theta,w))</script><p>其中 $(x_i^k, t^k, y_i^k)$ 是第刻个任务的第i个样本， 如果 $y_i^k=c$ 概率分布为：</p><script type="math/tex; mode=display">p(c|x_i^k ,t^k;\theta, w) = \frac{exp([\phi_{\theta}(x_i^k) \psi_w(t^k)^T]_c) }{\sum_j exp([\phi_{\theta}(x_i^k) \psi_w(t^k)^T]_j)}</script><p>其中 $[a]_i$ 表示向量 a 的第 i 个元素。 请注意，架构和损失函数是通用的，不仅适用于 A-GEM，还适用于任何其他 LLL 模型（例如，基于正则化的方法）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Efficient-lifelong-learning-with-A-GEM&quot;&gt;&lt;a href=&quot;#Efficient-lifelong-learning-with-A-GEM&quot; class=&quot;headerlink&quot; title=&quot;Efficient lifelo</summary>
      
    
    
    
    
    <category term="context detection" scheme="http://example.com/tags/context-detection/"/>
    
  </entry>
  
  <entry>
    <title>14-最长公共前缀(二分、分治)</title>
    <link href="http://example.com/2021/09/25/14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80-%E4%BA%8C%E5%88%86%E3%80%81%E5%88%86%E6%B2%BB/"/>
    <id>http://example.com/2021/09/25/14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80-%E4%BA%8C%E5%88%86%E3%80%81%E5%88%86%E6%B2%BB/</id>
    <published>2021-09-25T01:05:01.000Z</published>
    <updated>2021-09-28T00:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-最长公共前缀-二分、分治"><a href="#14-最长公共前缀-二分、分治" class="headerlink" title="14-最长公共前缀(二分、分治)"></a>14-最长公共前缀(二分、分治)</h1><h4 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">14. 最长公共前缀</a></h4><h2 id="法一：横向扫描"><a href="#法一：横向扫描" class="headerlink" title="法一：横向扫描"></a>法一：横向扫描</h2><p>用 $LCP(S_1,…,S_n)$ 表示字符串 $S_1,…,S_n$的最长公共前缀，可得</p><script type="math/tex; mode=display">LCP(S_1,...,S_n) = LCP(LCP (LCP(S_1,S_2), S_3),...,S_n)</script><p>基于该结论可得到一种查找字符串数组中的最长前缀的简单方法。依次遍历字符串中的每个字符串。对于每个遍历到的字符串，更新最长公共前缀，当遍历完所有的字符串以后，即可得到字符串数组中的最长公共前缀。</p><p><img src="https://i.loli.net/2021/09/25/nxdtFq4bUIczGSC.png" alt=""></p><p>如果在尚未遍历完所有的字符串时，最长公共前缀已经是空串，则最长公共前缀一定是空串，因此不需要继续遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> count = strs.length;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; count;i++)&#123;</span><br><span class="line">            prefix = longestCommonPrefix(prefix, strs[i]); </span><br><span class="line">            <span class="keyword">if</span>(prefix.length() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String str1, String str2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = Math.min(str1.length(), str2.length());</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index&lt;length &amp;&amp; str1.charAt(index) == str2.charAt(index))&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str1.substring(<span class="number">0</span>,index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: List[<span class="built_in">str</span>]</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        prifix , count = strs[<span class="number">0</span>], <span class="built_in">len</span>(strs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,count):</span><br><span class="line">            prifix = self.lcp(prifix, strs[i]);</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> prifix:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> prifix</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lcp</span>(<span class="params">self, str1,str2</span>):</span></span><br><span class="line">        length, index = <span class="built_in">min</span>(<span class="built_in">len</span>(str1), <span class="built_in">len</span>(str2)), <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index &lt; length <span class="keyword">and</span> str1[index] == str2[index]:</span><br><span class="line">            index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> str1[:index]</span><br></pre></td></tr></table></figure><p>复杂度：</p><ul><li>时间$O(mn)$ m是字符串数组中的字符串的平均长度，n是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。</li><li>空间 $O(1)$</li></ul><h2 id="法二：纵向扫描"><a href="#法二：纵向扫描" class="headerlink" title="法二：纵向扫描"></a>法二：纵向扫描</h2><p>方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。另一种方法是纵向扫描。</p><p>纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同。</p><p>如果相同则继续对下一列进行比较，如不相同则当前列不再属于公共前缀，当前列之前的部分为最长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs==<span class="keyword">null</span> || strs.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = strs[<span class="number">0</span>].length();</span><br><span class="line">        <span class="keyword">int</span> count = strs.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;count;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==strs[j].length() || strs[j].charAt(i)!=c)&#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析</p><ul><li>时间复杂度 $O(mn)$ 其中 m 是字符串数组中的字符串的平均长度，n是字符串的数量</li><li>空间 $O(1)$</li></ul><h2 id="方法三：分治"><a href="#方法三：分治" class="headerlink" title="方法三：分治"></a>方法三：分治</h2><p>注意到 LCP 的计算满足结合律，有以下结论：</p><script type="math/tex; mode=display">LCP(S_1, ..., S_n) = LCP(LCP(S_1,...,S_k), LCP(S_{k+1},...,S_n))</script><p>其中$LCP(S_1,…,S_n)$ 是字符串 $S_1,…,S_n$ 的最长公共前缀，$1&lt;k&lt;n$</p><p>基于上述结论，可以使用分治法得到字符串数组中的最长公共前缀。对于问题 $LCP(S<em>i,…,S_j)$，可以分解成两个子问题 $LCP(S_i,…,S</em>{mid})$ 与$LCP(S_{mid+1},…,S_j)$</p><p>其中 $mid = \frac{i+j}{2}$ 对两个子问题分别求解，然后对两个子问题的解计算最长公共前缀，即原问题的解。</p><p><img src="https://i.loli.net/2021/09/26/QpVbrwdZINPjcty.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs==<span class="keyword">null</span> || strs.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longestCommonPrefix(strs, <span class="number">0</span>, strs.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">            <span class="keyword">return</span> strs[start];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (end - start) / <span class="number">2</span> + start;</span><br><span class="line">        String lcpLeft = longestCommonPrefix(strs, start, mid);</span><br><span class="line">        String lcpRight = longestCommonPrefix(strs, mid+<span class="number">1</span>, end);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> minLength = Math.min(lcpLeft.length(), lcpRight.length());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;minLength;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lcpLeft.charAt(i) != lcpRight.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> lcpLeft.substring(<span class="number">0</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcpLeft.substring(<span class="number">0</span>,minLength);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：</p><ul><li><p>时间复杂度：$O(mn)$ 其中m 是字符串数组中的字符串的平均长度，n是字符串的数量。</p><p>时间复杂度的递推式是 $T(n) = 2\cdot T(n/2) + O(m)$， 通过计算可得 $T(n) = O(mn)$</p></li><li><p>空间复杂度 $O(mlogn)$ ，n为字符串数量。空间复杂度取决于递归调用的层数，层数最大为 logn，每层需要 m 的空间存储返回结果。</p></li></ul><h2 id="方法四：二分查找"><a href="#方法四：二分查找" class="headerlink" title="方法四：二分查找"></a>方法四：二分查找</h2><p>虽然，最长公共前缀的长度不会超过字符串数组中的最短字符串的长度。</p><p>用 minLength 表示字符串数组中的最短字符串长度，则可以再 $[0,minLength]$ 的范围内通过二分查找找到最长公共前缀的长度。每次取查找范围的中间值mid， 判断每个字符串的长度为mid 的前缀是否相同，如果相同则最长公共前缀的长度一定大于或等于 mid， 如果不相同则最长公共前缀的长度一定小于mid， 通过上述方式将查找范围缩小一半，直到得到最长公共前缀的长度。</p><p><img src="https://i.loli.net/2021/09/26/32HvnS78gisxEcI.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs==<span class="keyword">null</span> || strs.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minLength = Integer.MAX_VALUE</span><br><span class="line">        <span class="keyword">for</span>(String str:strs)&#123;</span><br><span class="line">            minLength = Math.min(minLength, str.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high=minLength;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (high - low + <span class="number">1</span>) /<span class="number">2</span> + low;</span><br><span class="line">            <span class="keyword">if</span>(isCommonPrefix(strs, mid))&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>,low);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        String str0 = strs[<span class="number">0</span>].substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">int</span> count = strs.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;count;i++)&#123;</span><br><span class="line">            String str = strs[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str0.charAt(j) != str.charAt(j))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;14-最长公共前缀-二分、分治&quot;&gt;&lt;a href=&quot;#14-最长公共前缀-二分、分治&quot; class=&quot;headerlink&quot; title=&quot;14-最长公共前缀(二分、分治)&quot;&gt;&lt;/a&gt;14-最长公共前缀(二分、分治)&lt;/h1&gt;&lt;h4 id=&quot;14-最长公共前缀&quot;&gt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>凸优化一</title>
    <link href="http://example.com/2021/09/24/%E5%87%B8%E4%BC%98%E5%8C%96%E4%B8%80/"/>
    <id>http://example.com/2021/09/24/%E5%87%B8%E4%BC%98%E5%8C%96%E4%B8%80/</id>
    <published>2021-09-24T11:32:10.000Z</published>
    <updated>2021-09-24T11:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="凸优化一"><a href="#凸优化一" class="headerlink" title="凸优化一"></a>凸优化一</h1><p>从一个可行解的集合中，寻找出最优的元素</p><p>任何一个优化问题都可以写成这个形式：</p><script type="math/tex; mode=display">minimize</script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;凸优化一&quot;&gt;&lt;a href=&quot;#凸优化一&quot; class=&quot;headerlink&quot; title=&quot;凸优化一&quot;&gt;&lt;/a&gt;凸优化一&lt;/h1&gt;&lt;p&gt;从一个可行解的集合中，寻找出最优的元素&lt;/p&gt;
&lt;p&gt;任何一个优化问题都可以写成这个形式：&lt;/p&gt;
&lt;script type</summary>
      
    
    
    
    
    <category term="Convex optimization" scheme="http://example.com/tags/Convex-optimization/"/>
    
  </entry>
  
</feed>
